<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gas | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/gas/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2020-08-22T12:41:27+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Apps Script で LINE ボットを作る]]></title>
    <link href="http://momota.github.io/blog/2020/08/22/line-bot/"/>
    <updated>2020-08-22T08:40:00+09:00</updated>
    <id>http://momota.github.io/blog/2020/08/22/line-bot</id>
    <content type="html"><![CDATA[<p><a href="https://script.google.com/home">Google Apps Script</a> (GAS) は、Google が提供する JavaScript プラットフォームで、Google apps (Calendar, Docs, Drive, Gmail, Sheets, and Slides) に対して処理する JavaScript を簡単に書ける。</p>

<p>GAS から HTTP GETリクエストを出したり、受け付けたりできるので、この仕組みを使って、無料で LINE ボットをつくってみる。</p>

<p>LINE ボットは、LINE Messaging API を利用すると簡単に作ることが可能。</p>

<ul>
<li>公式ドキュメント <a href="https://developers.line.biz/ja/services/messaging-api/">Messaging API | LINE Developers</a></li>
</ul>


<p><img src="/images/20200822_line-bot/line_01_diagram.png" alt="line bot diagram" /></p>

<p>出所: <a href="https://developers.line.biz/ja/docs/messaging-api/overview/">Messaging APIの概要 | LINE Developers</a></p>

<!-- more -->


<p>LINE ボット開発の流れは以下。</p>

<ol>
<li>LINE Developers コンソールからチャネル作成</li>
<li>ボットの開発・デプロイ (GAS)</li>
<li>LINE Developers コンソールでのボット設定</li>
</ol>


<h2>1. LINE Developers コンソールからチャネル作成</h2>

<p>流れは以下。</p>

<ol>
<li>LINE Developers 登録 (登録していない人のみ)</li>
<li>新規プロバイダー登録

<ul>
<li>プロバイダーはアプリ提供者。個人でも、組織でも。</li>
</ul>
</li>
<li>チャネル作成

<ul>
<li>チャネルは、LINEプラットフォームが提供する機能を、プロバイダーが開発するサービスで利用するための通信路</li>
</ul>
</li>
</ol>


<p>詳細は <a href="https://developers.line.biz/ja/docs/messaging-api/getting-started/#using-console">Messaging APIを始めよう | LINE Developers</a> を参照。</p>

<p>チャネルが作成できたら、「Messaging API設定」からチャネルアクセストークン★を発行してメモっておく。
後述のボット開発時に必要となる。</p>

<h2>2. ボットの開発・デプロイ (GAS)</h2>

<p>今回は、以下の機能をボットに持たせる。</p>

<ul>
<li>翻訳機能: 日本語を英訳する</li>
<li>ロギング機能: 履歴を Google Sheets に保存する</li>
</ul>


<p>まずは、新規 GAS プロジェクトを作る。
<a href="https://script.google.com/home">自分のプロジェクト &ndash; Apps Script</a> から「新しいプロジェクト」で作成可能。</p>

<p>一つの <code>.gs</code> ファイルでも良いが、ここでは以下のファイル構成で開発する。</p>

<p><code>
├── main.gs
├── class.gs
└── test.gs
</code></p>

<p>話が逸れるが、2020年に入ってから GAS は V8 ランタイムをサポートし始めたので、<code>const</code> とかクラス定義、アロー関数が使えるようになった。
<a href="https://developers.google.com/apps-script/guides/v8-runtime">V8 Runtime Overview  |  Apps Script  |  Google Developers</a></p>

<h3>翻訳機能</h3>

<p>LINE で投稿された文を英訳する。LINE から Webhook で受け取った日本語文字列を英語に翻訳し、レスポンス用のJSONを返すためのクラスを作る。</p>

<p>翻訳には、GAS にビルトインされている <code>LanguageApp</code> を使う。
<a href="https://developers.google.com/apps-script/reference/language/language-app">Class LanguageApp  |  Apps Script  |  Google Developers</a></p>

<p>LINE Messaging APIレスポンスの認可には、上でメモったチャネルアクセストークン★が必要となる。トークンのハードコーディングを避けるため、<code>Script properties</code> へ事前に設定しておく。</p>

<p><code>Script properties</code> は、GAS コンソールのメニュー [File] > [Project properties] > [Script properties] から設定できる。ここでは、<code>LINE_ACCESS_TOKEN</code> で登録している。</p>

<p><img src="/images/20200822_line-bot/line_02_project-properties.png" alt="GAS script properties" /></p>

<p><code>class.gs</code>  に以下を書く。</p>

<p>```javascript
class TranslateAPI {
  // コンストラクタ
  constructor(sourceLang=&lsquo;ja&rsquo;, destLang=&lsquo;en&rsquo;) {</p>

<pre><code>// 日本語 → 英語に翻訳する
this.sourceLang = sourceLang;
this.destLang   = destLang;

// Script properties からチャネルアクセストークンを取得する
this.LINE_ACCESS_TOKEN = PropertiesService.getScriptProperties().getProperty('LINE_ACCESS_TOKEN');
if (!this.LINE_ACCESS_TOKEN) {
  throw 'You should set "LINE_ACCESS_TOKEN" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

// LINE Messaging API 応答メッセージ用のエンドポイント
this.REPLY_ENDPOINT = 'https://api.line.me/v2/bot/message/reply';
</code></pre>

<p>  }</p>

<p>  // 翻訳機能
  translate(text) {</p>

<pre><code>return LanguageApp.translate(text, this.sourceLang, this.destLang);
</code></pre>

<p>  }</p>

<p>  // レスポンス用メッセージ成形
  getResponseJSON(data, replyToken) {</p>

<pre><code>return {
  'headers': {
    'Content-Type': 'application/json; charset=UTF-8',
    'Authorization': 'Bearer ' + this.LINE_ACCESS_TOKEN,
  },
  'method': 'post',
  'payload': JSON.stringify({
    'replyToken': replyToken,
    'messages': [{
      'type': 'text',
      'text': data,
    }],
  }),
};
</code></pre>

<p>  }
}
```</p>

<h3>ロギング機能</h3>

<p>LINE ボットとの会話履歴を Google Sheets に保存する。</p>

<p><a href="https://sheets.new">https://sheets.new</a> から Google Sheets を新規作成する。
作成したシートの URL から spreadsheetIDを取得する。</p>

<pre>
ttps://docs.google.com/spreadsheets/d/<span style="color: #d33682; ">spreadsheetId</span>/edit#gid=0
</pre>


<p>チャネルアクセストークンを <code>Script properties</code> に設定したのと同様に、<code>SHEET_ID</code> として登録する。</p>

<p><code>class.gs</code>  に以下を追記する。</p>

<p>```javascript
class TranslateLogger {
  // コンストラクタ
  constructor() {</p>

<pre><code>// Script properties から spreadsheetID を取得する
const SHEET_ID = PropertiesService.getScriptProperties().getProperty('SHEET_ID');

if (!SHEET_ID) {
  throw 'You should set "SHEET_ID" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

let sheets = SpreadsheetApp.openById(SHEET_ID);
this.sheet = sheets.getActiveSheet();
</code></pre>

<p>  }</p>

<p>  // 日付、翻訳前文字列、翻訳後文字列を Sheets に記録する
  logToSheet(text, translated_text) {</p>

<pre><code>let col     = 1,
    new_row = this.sheet.getLastRow() + 1;

this.sheet.getRange(new_row, col++).setValue(new Date());
this.sheet.getRange(new_row, col++).setValue(text);
this.sheet.getRange(new_row, col++).setValue(translated_text);
</code></pre>

<p>  }
}
```</p>

<h3>メイン処理</h3>

<p>メイン処理は、LINE から日本語文を Webhook (HTTP POST) で受け取り、上述した翻訳処理、ログ処理を経て応答する。</p>

<p><code>main.gs</code> に書く。</p>

<p>```javascript
const doPost = e => {
  const t = new TranslateAPI(&lsquo;ja&rsquo;, &lsquo;en&rsquo;);
  const l = new TranslateLogger();</p>

<p>  // WebHookで受信した応答用Token
  const replyToken     = JSON.parse(e.postData.contents).events[0].replyToken;</p>

<p>  // 受信した文字列を翻訳し、レスポンス用JSONに成形する
  let text            = JSON.parse(e.postData.contents).events[0].message.text,</p>

<pre><code>  translated_text = t.translate(text),
  json            = t.getResponseJSON(translated_text, replyToken);
</code></pre>

<p>  // LINE Messaging APIへ応答する
  UrlFetchApp.fetch(t.REPLY_ENDPOINT, json);</p>

<p>  // ロギング
  l.logToSheet(text, translated_text);</p>

<p>  let response = ContentService.createTextOutput();
  response.setMimeType(ContentService.MimeType.JSON);
  response.setContent(JSON.stringify({&lsquo;content&rsquo;: &lsquo;post ok&rsquo;}));
  return response;
}
```</p>

<p>テストは省略。</p>

<h3>GAS を Web アプリとしてデプロイ (公開) する</h3>

<p>開発したボットを、GAS コンソールメニューの [Publish] > [Deploy as Web app&hellip;] からデプロイする。
「Who has access to the app:」 は「Anyone, even anonymous」に設定しておく。</p>

<p>[Deploy] ボタンを押すと、Authorization requiredダイアログが出てくるので許可してあげる。</p>

<p>許可すると、「Current web app URL:」で GAS のエンドポイント URL ☆が取得できるのでメモっておく。後ほど、LINE Developers コンソールで Webhook URL にこのエンドポイントを指定する。
<a href="https://script.google.com/macros/s/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/exec">https://script.google.com/macros/s/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/exec</a> 形式の URL。</p>

<h2>3.  LINE Developers コンソールでのボット設定</h2>

<p>以下を設定する。</p>

<ul>
<li>Webhook URL の設定 (ボットのエンドポイント URL を指定)</li>
<li>応答メッセージの無効化</li>
<li>ボットの QR コード確認</li>
</ul>


<p>詳細は <a href="https://developers.line.biz/ja/docs/messaging-api/building-bot/">ボットを作成する | LINE Developers</a> を参照。</p>

<p>LINE Developersコンソールから、先に作ったチャンネルの Messaging API 設定 > Webhook 設定の Webhook URL に先程デプロイした GAS のエンドポイント URL ☆ を設定する。</p>

<p>次に、「Webhook の利用」を有効化する。</p>

<p>応答メッセージの無効化もしておく。
「応答メッセージ設定」の「編集」リンクから、「詳細設定」 > 「応答メッセージ」 をオフにしておく。</p>

<p><img src="/images/20200822_line-bot/line_03_response-settings.png" alt="bot response settings on LINE Developers Console" /></p>

<p>最後に、ボットの QR コードを取得し、LINE の友達に追加する。</p>

<h2>動作確認</h2>

<p>以下の日本語入力に対して、</p>

<ul>
<li>1997年にスタートして以来、毎年7月下旬頃に行われてきた国内最大規模のロックフェス「FUJI ROCK FESTIVAL」。今年は東京オリンピック開催の影響もあって8月21～23日に行われる予定だったが、新型コロナウイルスの感染拡大の影響により残念ながらそれも見送られることになった。</li>
</ul>


<p>以下の英訳分を返してくれている。</p>

<ul>
<li>&ldquo;FUJI ROCK FESTIVAL&rdquo;, the largest rock festival in Japan, has been held around late July every year since it started in 1997. This year it was scheduled to be held on August 21-23, partly due to the Tokyo Olympics, but unfortunately it was also postponed due to the spread of the new coronavirus infection.</li>
</ul>


<p><img src="/images/20200822_line-bot/line_04_test_conversation.png" alt="bot conversation" /></p>

<p>会話のログも Google Sheets に取得できている。</p>

<p><img src="/images/20200822_line-bot/line_05_log.png" alt="logging bot conversation" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Script でサーバレスな為替レート取得クローラをつくる]]></title>
    <link href="http://momota.github.io/blog/2018/06/25/apps-script/"/>
    <updated>2018-06-25T14:35:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/06/25/apps-script</id>
    <content type="html"><![CDATA[<p><a href="https://script.google.com/home">Google Apps Script</a> (GAS) は、Google が提供する JavaScript プラットフォームで、Google apps (Calendar, Docs, Drive, Gmail, Sheets, and Slides) に対して処理する JavaScript を簡単に書ける。
Excel マクロのすごい版みたいな感覚。</p>

<p>このスクリプトからHTTP GETリクエストを出したり、受け付けたりできる。</p>

<p>今回は、この GAS を使って、無料の Web クローラをサーバレスでつくってみる。</p>

<!-- more -->


<h2>処理の流れ</h2>

<ol>
<li>GAS から為替レート API をたたく</li>
<li>取得した為替レートデータを Google Sheets へ出力する</li>
<li>上記を1分間隔で実行する。</li>
</ol>


<h2>1. GAS から為替レート API をたたく</h2>

<h3>為替レート API の確認</h3>

<p>API は <a href="https://www.gaitameonline.com/rateaj/getrate">https://www.gaitameonline.com/rateaj/getrate</a> を利用する。
ここへ HTTP GET すると以下のような JSON フォーマットが返ってくる。 (整形済み)</p>

<p>```json
{
  quotes=[</p>

<pre><code>{
  high=1.9196,
  low=1.9162,
  ask=1.9212,
  bid=1.9195,
  currencyPairCode=GBPNZD,
  open=1.9167
},
{
  high=82.83,
  low=82.35,
  ask=82.41,
  bid=82.36,
  currencyPairCode=CADJPY,
  open=82.76
},
// ... (snip) ...
</code></pre>

<p>```</p>

<p>JSON の quotes は各通貨ペアの配列になっており、各要素に high, low, &hellip; などのフィールドがある構造になっている。</p>

<p><a href="https://www.gaitameonline.com/robots.txt">robots.txt</a> には特に言及されていないが、非常識なアクセスはしないように注意。</p>

<h3>GAS の作成</h3>

<p><a href="https://script.google.com/home">Apps Script</a> のメニューから <code>+ 新規スクリプト</code> をクリックすると、新規プロジェクトが立ち上がる。
プロジェクト名やスクリプト名は適当に変更する。 (デフォルト <code>Code.gs</code>)</p>

<p>GAS で API をたたく処理は以下のように書ける。</p>

<p>```javascript
function callExchangeAPI() {</p>

<pre><code>var now      = new Date(),
    url      = "https://www.gaitameonline.com/rateaj/getrate",
    response = UrlFetchApp.fetch(url),
    content  = response.getContentText(),
    fx       = JSON.parse(content);

fx.date = now;
Logger.log(fx);
return fx;
</code></pre>

<p>}
```</p>

<p><code>UrlFetchApp.fetch(url)</code> で API の URL をたたきにいける。
<code>fx.date = now</code> で、取得した JSON に取得日時フィールド <code>date</code> を足している。</p>

<p>上記をコピペして実行する (▶ボタンを押す) と初回実行時には以下のような確認ダイアログがでるので <code>Review Permissions</code> を押して許可する。</p>

<p><img src="/images/20180625_gas/01_notice_initial_run.png" alt="01_notice_initial_run" /></p>

<p>その後、Choose an account画面で自分のアカウントを選ぶと、確認画面 <code>YOUR-PROJECT-NAME wants to access your Google Account</code> が出てくるので <code>ALLOW</code> ボタンを押す。そうすると実行できる。</p>

<p><code>Logger.log(fx)</code> 部分でログ出力しているので、メニュー <code>View</code> > <code>Logs</code> からログ出力できていることが確認できる。
ログは以下のように出力される。</p>

<p><code>
[18-06-24 23:24:06:486 PDT] {date=Mon Jun 25 15:24:06 GMT+09:00 2018, quotes=[{high=1.9224, low=1.9162, ask=1.9223, bid=1.9206, currencyPairCode=GBPNZD, open=1.9167}, {high=82.83, low=82.22, ask=82.45, bid=82.40, currencyPairCode=CADJPY, open=82.76}, {high=1.7870, low=1.7817, ask=1.7855, bid=1.7846, currencyPairCode=GBPAUD, open=1.7817},
... snip ...
</code></p>

<h2>2. 取得した為替レートデータを Google Sheets へ出力する</h2>

<p>取得した為替レートを以下のように Google sheetsに出力する。</p>

<p><img src="/images/20180625_gas/03_sheet.png" alt="03_sheet" /></p>

<p>シートの 1 行目はヘッダ、列の定義は以下。通貨ペア種別すべての Ask や Bid などを取得したタイミングごとに1行で表現する。</p>

<p><code>
date, currencyPairCode1, high1, low1, ask1, bid1, open1, currencyPairCode2, high2, ...
</code></p>

<p>まずは、出力先にあたる Google sheets を新規作成し、その URL をコピーする。</p>

<p>個別の URL をコードに埋め込みたくないので、<code>Script properties</code> に値をセットしてそれをコードの中から利用する。</p>

<p>GAS のメニュー <code>File</code> > <code>Project properties</code> から <code>Script properties</code> タブへ移動する。
<code>+ Add row</code> のリンクから行をエントリーする。
<code>Property</code> に SHEET_URL、<code>Value</code> に先程コピーした Google sheets の URLを登録する。
登録するURL は <code>https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxx/edit</code> のような形式。</p>

<p>上述した <code>Script properties</code> から値を参照して、Sheet オブジェクトを取得する処理は以下。</p>

<p>```javascript
  function() {</p>

<pre><code>if(this.getSheet.sheet) { return this.getSheet.sheet; }

var SHEET_URL = PropertiesService.getScriptProperties().getProperty('SHEET_URL');
if (!SHEET_URL) {
  throw 'You should set "SHEET_URL" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

var sheets = SpreadsheetApp.openByUrl(SHEET_URL);
this.getSheet.sheet = sheets.getActiveSheet();
return this.getSheet.sheet;
</code></pre>

<p>  }
```</p>

<p>API から取得してきた JSON データをシートに出力する。</p>

<p>シートに対して入力するには、<code>sheet.getRange(row, column).setValue(something)</code> のようにシートの行 (row) と列 (column) を指定して setValue を呼べば良い。</p>

<p>```javascript
  function(ex_json) {</p>

<pre><code>var sheet = this.getSheet();

// データ追加行 (Sheetの最終行 + 1) を取得する
var last_row = sheet.getLastRow() + 1;

var col = 1;
sheet.getRange(last_row, col++).setValue(ex_json.date);

for each(var quote in ex_json.quotes) {
  sheet.getRange(last_row, col++).setValue(quote.currencyPairCode);
  sheet.getRange(last_row, col++).setValue(quote.high);
  sheet.getRange(last_row, col++).setValue(quote.low);
  sheet.getRange(last_row, col++).setValue(quote.ask);
  sheet.getRange(last_row, col++).setValue(quote.bid);
  sheet.getRange(last_row, col++).setValue(quote.open);
}
</code></pre>

<p>  }
```</p>

<p>上記をまとめると以下。
以下をコピペして実行する (▶ボタンを押す) と Google sheets に為替データが挿入される。
初回実行時に権限の確認ダイアログがでると思うが許可してあげる。</p>

<p>```javascript
// Main
function scrapeExchangeToSheet() {
  var ex_json = exchange.callExchangeAPI();
  exchange.writeSheets(ex_json);
}</p>

<p>var exchange = {
  getSheet: function() {</p>

<pre><code>if(this.getSheet.sheet) { return this.getSheet.sheet; }

var SHEET_URL = PropertiesService.getScriptProperties().getProperty('SHEET_URL');
if (!SHEET_URL) {
  throw 'You should set "SHEET_URL" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

var sheets = SpreadsheetApp.openByUrl(SHEET_URL);
this.getSheet.sheet = sheets.getActiveSheet();
return this.getSheet.sheet;
</code></pre>

<p>  },</p>

<p>  // call exchange API
  callExchangeAPI: function() {</p>

<pre><code>var now      = new Date(),
    url      = "https://www.gaitameonline.com/rateaj/getrate",
    response = UrlFetchApp.fetch(url),
    content  = response.getContentText(),
    fx       = JSON.parse(content);

fx.date = now;
return fx;
</code></pre>

<p>  },</p>

<p>  // Write exchange data (JSON) to the Google Sheet
  writeSheets: function(ex_json) {</p>

<pre><code>var sheet = this.getSheet();

// get last row to add exchange data
var last_row = sheet.getLastRow() + 1;

var col = 1;
sheet.getRange(last_row, col++).setValue(ex_json.date);

for each(var quote in ex_json.quotes) {
  sheet.getRange(last_row, col++).setValue(quote.currencyPairCode);
  sheet.getRange(last_row, col++).setValue(quote.high);
  sheet.getRange(last_row, col++).setValue(quote.low);
  sheet.getRange(last_row, col++).setValue(quote.ask);
  sheet.getRange(last_row, col++).setValue(quote.bid);
  sheet.getRange(last_row, col++).setValue(quote.open);
}
</code></pre>

<p>  }
}
```</p>

<h2>3. 上記を1分間隔で実行する。</h2>

<p>上記の処理を定期的に実行する。</p>

<p>時計マークのアイコンをクリックする。もしくは、メニュー <code>Edit</code> > <code>Current project's trigger</code> を選択する。
そうするとダイアログが出てくるので、<code>No triggers set up. Click here to add one now.</code> をクリックする。</p>

<p><code>Run</code> にはメイン処理の <code>scrapeExchangeToSheet</code>, <code>Events</code> には好きな起動時間を設定できる。
ここでは1分間隔で実行するため、<code>Time-driven : Minutes timer: Every minute</code> を選択する。</p>

<p>1分間隔で Google sheets にデータが挿入されていることが確認できる。</p>
]]></content>
  </entry>
  
</feed>
