<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2019-04-06T10:40:16+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[slack commands by cloud functions]]></title>
    <link href="http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions/"/>
    <updated>2019-04-06T09:19:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions</id>
    <content type="html"><![CDATA[<p>Slack commands を Google Cloud Functions で実装する。</p>

<p>Slack commands は slack 上で <code>/command arguments</code> 形式で入力すると何かしらの応答を返す仕組み。Slash command とも呼ばれるようだ。
詳細は公式 API ページを参照: <a href="https://api.slack.com/slash-commands">Slash Commands | Slack</a></p>

<p><a href="http://momota.github.io/blog/2015/01/11/lita/">過去につくった Slack Bot</a> が動かなくなったので、GCP を利用して作り直そうというのが背景。</p>

<p>クラウドへのデプロイについては serverless framework を利用した。</p>

<ul>
<li>参考

<ul>
<li><a href="http://momota.github.io/blog/2015/01/11/lita/">lita で Slack Bot (on heroku) をつくる &ndash; momota.txt</a></li>
<li><a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a></li>
</ul>
</li>
</ul>


<p>今回は、slack で <code>/ping</code> というコマンドを実行したら、<code>pong</code> と返すような slack command を作る。
できあがりは以下。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-ping-command.gif" alt="slack command screenshot" /></p>

<!-- more -->


<h3>事前設定</h3>

<p>serverless framework のインストール方法は <a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a> を参照。</p>

<p>今回は、AWS Lambda (Javascript) ではなく GCP (Python) を使う。</p>

<p>事前に GCP のクレデンシャル設定が必要となる。</p>

<ul>
<li>GCP クレデンシャル設定は公式を参照してほしい: <a href="https://serverless.com/framework/docs/providers/google/guide/credentials/">Serverless Framework &ndash; Google Cloud Functions Guide &ndash; Credentials</a></li>
<li>概要は以下。

<ol>
<li>請求先アカウントを作成</li>
<li>新規の Google Cloudプロジェクトを作成 (プロジェクトIDを控える)</li>
<li>必要な API を有効化。以下。

<ul>
<li>Google Cloud Functions</li>
<li>Google Cloud Deployment Manager</li>
<li>Google Cloud Storage</li>
<li>Stackdriver Logging</li>
</ul>
</li>
<li>クレデンシャルを入手する

<ul>
<li>サービスアカウントを作成</li>
<li>ロールの付与

<ul>
<li>Deployment Manager Editor</li>
<li>Storage Admin</li>
<li>Logging Admin</li>
<li>Cloud Functions Developer</li>
</ul>
</li>
<li>クレデンシャルキーファイルの作成 (keyfile.json)</li>
<li>キーファイルのデプロイ: <code>~/.gcloud/keyfile.json</code> など</li>
</ul>
</li>
</ol>
</li>
</ul>


<h3>serverless サービスの作成</h3>

<p>ここでは <code>ping</code> という名前でサービス (プロジェクトのようなもの) を作成する。</p>

<p>```sh
$ serverless create &mdash;template google-python &mdash;path ping
Serverless: Generating boilerplate&hellip;
Serverless: Generating boilerplate in &ldquo;/path-you-want/ping&rdquo;</p>

<hr />

<p>|   _   .&mdash;&mdash;&ndash;.&mdash;&mdash;.&mdash;.&mdash;.&mdash;&mdash;&ndash;.&mdash;&mdash;|  .&mdash;&mdash;&ndash;.&mdash;&mdash;&ndash;.&mdash;&mdash;&ndash;.
|   |<em><strong>|  &ndash;</strong>|   </em>|  |  |  &ndash;<strong>|   _|  |  &ndash;</strong>|<strong> &mdash;|</strong> &mdash;|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.40.0
 &mdash;&mdash;&mdash;&ndash;'</p>

<p>Serverless: Successfully generated boilerplate for template: &ldquo;google-python&rdquo;
```</p>

<p>作成したサービス名と同名のディレクトリが作成されるので、移動する。</p>

<p><code>sh
$ cd ping
</code></p>

<p>以下のファイルが自動生成されている。</p>

<p><code>sh
$ ls -la
合計 24
drwxr-xr-x 2 momota momota 4096  4月  2 22:45 .
drwxr-xr-x 5 momota momota 4096  4月  2 22:45 ..
-rw-r--r-- 1 momota momota  597  4月  2 22:45 .gitignore
-rw-r--r-- 1 momota momota  362  4月  2 22:45 main.py
-rw-r--r-- 1 momota momota  303  4月  2 22:45 package.json
-rw-r--r-- 1 momota momota 1431  4月  2 22:45 serverless.yml
</code></p>

<h3>プロバイダプラグインのインストール</h3>

<p>プロジェクトディレクトリで <code>npm install</code> する。</p>

<p><code>sh
$ npm install
</code></p>

<h3>プロバイダプロパティの更新</h3>

<p><code>serverless.yml</code> を編集する。</p>

<p><code>project</code> フィールドにGCP プロジェクト ID の指定するのと、<code>credentials</code> フィールドにcredentials ファイルの相対パスを指定する。
<code>functions</code> 以下の memorySize, timeout, labels はお好みで設定する。</p>

<p><code>handler</code> フィールドで指定している ping が後述する Python コードの関数名になっており、Cloud Functions 起動時に当該関数が呼び出される。</p>

<p>```yaml
service: ping</p>

<p>provider:
  name: google
  stage: dev
  runtime: python37
  region: us-central1
  project: YOUR-GCP-PROJECT-ID
  credentials: ~/.gcloud/YOUR-KEYFILE.json</p>

<p>plugins:
  &ndash; serverless-google-cloudfunctions</p>

<p>package:
  exclude:</p>

<pre><code>- node_modules/**
- .gitignore
- .git/**
</code></pre>

<p>functions:
  ping-command:</p>

<pre><code>handler: ping
events:
  - http: path
memorySize: 256
timeout: 60s
labels: {
    application: slack-slash-command,
    environment: production,
    owner: momota
}
</code></pre>

<p>```</p>

<h3>Functions コードの実装</h3>

<p>Slack から ping を受けたら pong を返す Python コードを書く。</p>

<p>Slack command が実行されとき Slack から送信されるリクエストは以下のようなフォーマットになっている。</p>

<p><code>
token=gIkuvaNzQIHg97ATvDxqgjtO
&amp;team_id=T0001
&amp;team_domain=example
&amp;enterprise_id=E0001
&amp;enterprise_name=Globular%20Construct%20Inc
&amp;channel_id=C2147483705
&amp;channel_name=test
&amp;user_id=U2147483697
&amp;user_name=Steve
&amp;command=/weather
&amp;text=94070
&amp;response_url=https://hooks.slack.com/commands/1234/5678
&amp;trigger_id=13345224609.738474920.8088930838d88f008e0
</code></p>

<p>これに対して、以下のような Json フォーマットでレスポンスを返す必要がある。</p>

<p>```json
{</p>

<pre><code>"response_type": "in_channel",
"text": "It's 80 degrees right now.",
"attachments": [
    {
        "text":"Partly cloudy today and tomorrow"
    }
]
</code></pre>

<p>}
```</p>

<p><code>main.py</code> を編集する。以下のようなコードになる。</p>

<p>```python
import json
from flask import jsonify</p>

<h1>ping を受けたら pong を返す関数</h1>

<p>def command(query):</p>

<pre><code>return 'pong :table_tennis_paddle_and_ball:'
</code></pre>

<p>def format_slack_message(message):</p>

<pre><code>return {
    'response_type': 'in_channel',
    'text': message,
    'attachments': []
}
</code></pre>

<h1>Cloud Functions で起動される関数: メイン関数</h1>

<p>def ping(request):</p>

<pre><code># validate request
if request.method != 'POST':
    return 'Only POST requests are accepted', 405

message = command(request.form['text'])
response = format_slack_message(message)

return jsonify(response)
</code></pre>

<p>```</p>

<p>Flask ライブラリに依存しているので、<code>requirements.txt</code> を作る。</p>

<p><code>sh
$ echo "Flask==1.0.2" &gt;&gt; requirements.txt
</code></p>

<h3>GCP へのデプロイ</h3>

<p><code>serverless deploy</code> により、GCS にソースコードがアップロードされ、Cloud Functions が Python 3.7 で起動する。
これはマネジメントコンソールからも確認できる。</p>

<p>```sh
serverless deploy -v                                <br/>
Serverless: Packaging service&hellip;
Serverless: Excluding development dependencies&hellip;
Serverless: Compiling function &ldquo;ping-command&rdquo;&hellip;
Serverless: Uploading artifacts&hellip;
Serverless: Artifacts successfully uploaded&hellip;
Serverless: Updating deployment&hellip;
Serverless: Checking deployment update progress&hellip;
&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..
Serverless: Done&hellip;
Service Information
service: ping
project: YOUR-GCP-PROJECT-ID
stage: dev
region: us-central1</p>

<p>Deployed functions
ping-command
  <a href="https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping">https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping</a>
```</p>

<h3>slack の設定</h3>

<p><a href="https://api.slack.com/apps">Slack API： Applications | Slack</a> から <code>Create New App</code> ボタンをクリックしコマンドを作成する。</p>

<p>設定のやり方はこのあたりを参考にしたら良いと思う。: <a href="https://qiita.com/t-mimura/items/d6541ec596bdebea5a7b">Slackのコマンドを作ろう！！ &ndash; Qiita</a></p>

<p>command 作成時の <code>Request URL</code> に作成した Cloud Functions のエンドポイント <a href="https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping">https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping</a> を指定する。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-config.png" alt="slack command config" /></p>

<p>Slack の設定が終わると、Slack から使えるようになる。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-ping-command.gif" alt="slack command screenshot" /></p>

<p>Functions は初回起動時に少し時間がかかる。
Slack command は 3000 ms (3秒) 以内に応答しないとタイムアウトになってしまう。
タイムアウト時は Slack command を再実行してみたら良い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask アプリ (チャットボット) のコンテナ化]]></title>
    <link href="http://momota.github.io/blog/2018/10/11/dockerize-flask-app/"/>
    <updated>2018-10-11T10:54:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/10/11/dockerize-flask-app</id>
    <content type="html"><![CDATA[<p>以下で作ったようなFlaskアプリ (チャットボット) をコンテナ化 (Docker) する。</p>

<ul>
<li><a href="http://momota.github.io/blog/2018/06/19/unittest/">Python unittest で Flask (チャットボット) の単体テスト &ndash; momota.txt</a></li>
</ul>


<!-- more -->


<h2>Flask アプリ</h2>

<p>Python のバージョンは 3.6。</p>

<p>Flask アプリのディレクトリ構成は以下。</p>

<p><code>
$ tree
.
|____log
| |____mattermost_bot.log
|____mattermostbot.py
</code></p>

<ul>
<li><code>mattermostbot.py</code>: ボット本体</li>
<li><code>log/</code> : ログ保存用のディレクトリ</li>
</ul>


<p><code>mattermost.py</code> は簡易的なオウム返しするボットで以下のようなスクリプト。</p>

<p>```python
import json
import logging
from flask import Flask, request
from logging.handlers import RotatingFileHandler</p>

<p>SCRIPT_DIR = os.path.dirname(os.path.abspath(<strong>file</strong>))
BOT_LOG    = SCRIPT_DIR + &lsquo;/log/mattermost_bot.log&rsquo;</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route(&lsquo;/bot&rsquo;, methods=[&lsquo;POST&rsquo;])
def bot():</p>

<pre><code># mattermost -&gt; bot へ送信される JSON データの取得
post_dict = request.form
app.logger.info(post_dict)

# JSONから token と text (ユーザが入力したメッセージ) を取得
token = post_dict['token']
income_text = post_dict['text']

# income_text は `bot_name COMMAND ARGUMENT` のような形式なので
# 半角スペースで分割し、それぞれの要素を変数に格納する
text_array = income_text.split(' ')
bot_name = text_array[0]
command = text_array[1]
arg = " ".join(text_array[2:])

payload_text = ""

# command によって処理を分岐する
if command == "echo":
    payload_text = echo(arg)

app.logger.info(payload_text)

# レスポンス用の JSON を組み立てる
payload = {
    'username': bot_name,
    'icon_url': 'http://your-server/images/bot_icon.png',
    'text': payload_text,
    'MATTERMOST_TOKEN': token
}
json_payload = json.dumps(payload)

return json_payload
</code></pre>

<h1>ログ出力用メソッド</h1>

<p>def log(app):</p>

<pre><code>handler = RotatingFileHandler(BOT_LOG, maxBytes=10000, backupCount=2)
handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s\t%(lineno)d\t%(levelname)s\t%(name)s\t%(message)s')
handler.setFormatter(formatter)
app.logger.addHandler(handler)
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>echo command</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>def echo(text):</p>

<pre><code>return text
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>log(app)
app.debug = True
app.run(host='0.0.0.0')
</code></pre>

<p>```</p>

<h2>Requirements File</h2>

<p>コンテナにインストールする必要のある Python パッケージ を <code>requirements.txt</code> に書き出す。ようは <code>pip</code> でインストールやつを列挙する。</p>

<p><code>
Flask==0.12.2
</code></p>

<p>手で作らなくても、すでに Flask アプリを動かしている環境があれば、以下のコマンドで出力できる。</p>

<p><code>sh
$ pip freeze &gt; requirements.txt
</code></p>

<h2>Dockerfile</h2>

<p>Docker イメージを生成するため、以下のような <code>Dockerfile</code> を作成する。</p>

<p>```
FROM python:3.6</p>

<p>ARG project_dir=/chatbot/</p>

<p>ADD requirements.txt $project_dir
ADD mattermostbot.py $project_dir
ADD log &ldquo;${project_dir}log&rdquo;</p>

<p>WORKDIR $project_dir</p>

<p>RUN pip install -r requirements.txt
CMD [&ldquo;python&rdquo;, &ldquo;mattermostbot.py&rdquo;]
```</p>

<p>プロキシ環境下でビルドする場合は、以下のようにコンテナ内の環境変数を設定してあげれば良い。
追記する場所は、<code>RUN pip install -r requirements.txt</code> より前。</p>

<p>```
ARG proxy_host=&ldquo;proxy.co.jp&rdquo;
ARG proxy_port=&ldquo;85&rdquo;
ARG proxy_user=&ldquo;USER&rdquo;
ARG proxy_pass=&ldquo;PASSWORD&rdquo;
ARG PROXY=&ldquo;${proxy_user}:${proxy_pass}@${proxy_host}:${proxy_port}&rdquo;</p>

<p>ENV http_proxy=&ldquo;<a href="http://$">http://$</a>{PROXY}&rdquo; \</p>

<pre><code>https_proxy="https://${PROXY}" \
ftp_proxy="ftp://${PROXY}"
</code></pre>

<p>```</p>

<h2>Docker イメージのビルド</h2>

<p>以下のコマンドで Docker イメージをビルドする。</p>

<p><code>sh
$ docker build -t mattemost_bot:latest .
</code></p>

<p>できたイメージは以下で確認できる。</p>

<p><code>sh
$ docker images
</code></p>

<h2>コンテナの実行</h2>

<p><code>sh
$ docker run -p 5000:5000 -it mattermost_bot
</code></p>

<p>起動状態などの詳細は以下で確認できる。</p>

<p><code>sh
$ docker ps -a
</code></p>

<h2>動作確認</h2>

<p><code>curl</code> や POSTMAN などを使って HTTP POST リクエストを投げて確認する。</p>

<p>```sh
$ curl -X POST \</p>

<blockquote><p>  <a href="http://localhost:5000/bot">http://localhost:5000/bot</a> \
  -H &lsquo;cache-control: no-cache&rsquo; \
  -H &lsquo;content-type: application/x-www-form-urlencoded&rsquo; \
  -d &lsquo;token=dummy&amp;text=botname%20echo%20hogehoge&rsquo;
{&ldquo;username&rdquo;: &ldquo;botname&rdquo;, &ldquo;icon_url&rdquo;: &ldquo;<a href="http://your-server/images/bot_icon.png">http://your-server/images/bot_icon.png</a>&rdquo;, &ldquo;text&rdquo;: &ldquo;hogehoge&rdquo;, &ldquo;MATTERMOST_TOKEN&rdquo;: &ldquo;dummy&rdquo;}
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python unittest で Flask (チャットボット) の単体テスト]]></title>
    <link href="http://momota.github.io/blog/2018/06/19/unittest/"/>
    <updated>2018-06-19T18:58:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/06/19/unittest</id>
    <content type="html"><![CDATA[<p>最近 Slack クローンの mattermost のチャットボットを Python で作った。
そのコードをテストしたかったときに unittest を覚えたのでそのメモ。</p>

<p><code>sh
$ python -V
Python 3.6.4 :: Anaconda, Inc.
</code></p>

<!-- more -->


<p>ディレクトリ構成は以下。</p>

<p><code>
$ tree
.
|____log
| |____mattermost_bot.log
|____mattermostbot.py
|____test_mattermostbot.py
</code></p>

<ul>
<li><code>mattermostbot.py</code>: ボット本体</li>
<li><code>test_mattermostbot.py</code>: テストコード</li>
<li><code>log/</code> : ログ保存用のディレクトリ</li>
</ul>


<h2>チャットボット</h2>

<p>mattermost の統合機能から「外向きのウェブフック」を設定する。</p>

<p><img src="/images/20180619_unittest/20180619_mattermost_webhook.png" alt="webhook" /></p>

<p>チャットボットは <code>bot_name COMMAND ARGUMENT</code> のように呼び出す。
ここではコマンドは以下の5種類をテストすることにする。</p>

<ul>
<li>echo: <code>ARGUMENT</code> をそのまま返す</li>
<li>hoge: &ldquo;hoge&rdquo; と返す</li>
<li>ping: &ldquo;pong :ping_pong:&rdquo; と返す</li>
<li>sushi: &ldquo;（っ'&ndash;&lsquo;)╮ =͟͟͞͞ :sushi: ﾌﾞｫﾝ&rdquo; を返す</li>
<li>tenki: 今日と明日の天気を返す (Livedoor の天気 API を利用)</li>
</ul>


<p>チャットボットのコード <code>mattermostbot.py</code> は以下。Slack のボットとしても機能するはず。</p>

<p>Flask を使って HTTP POST で送られてくる JSON データを mattermost から受け取って、処理している。
<code>bot()</code> メソッドがボットメイン処理。</p>

<p>```python
import json
import logging
import requests
from flask import Flask, request
from logging.handlers import RotatingFileHandler</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route(&lsquo;/bot&rsquo;, methods=[&lsquo;POST&rsquo;])
def bot():</p>

<pre><code># mattermost -&gt; bot へ送信される JSON データの取得
post_dict = request.form
app.logger.info(post_dict)

# JSONから token と text (ユーザが入力したメッセージ) を取得
token = post_dict['token']
income_text = post_dict['text']

# income_text は `bot_name COMMAND ARGUMENT` のような形式なので
# 半角スペースで分割し、それぞれの要素を変数に格納する
text_array = income_text.split(' ')
bot_name = text_array[0]
command = text_array[1]
arg = " ".join(text_array[2:])

payload_text = ""

# command によって処理を分岐する
if command == "echo":
    payload_text = echo(arg)
elif command == "hoge":
    payload_text = hoge()
elif command == "ping":
    payload_text = pong()
elif command == "sushi":
    payload_text = sushi()
elif command == "tenki":
    payload_text = tenki()

app.logger.info(payload_text)

# レスポンス用の JSON を組み立てる
payload = {
    'username': bot_name,
    'icon_url': 'http://your-server/images/bot_icon.png',
    'text': payload_text,
    'MATTERMOST_TOKEN': token
}
json_payload = json.dumps(payload)

return json_payload
</code></pre>

<h1>ログ出力用メソッド</h1>

<p>def log(app):</p>

<pre><code>handler = RotatingFileHandler('log/mattermost_bot.log', maxBytes=10000, backupCount=2)
handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s\t%(lineno)d\t%(levelname)s\t%(name)s\t%(message)s')
handler.setFormatter(formatter)
app.logger.addHandler(handler)
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>echo command</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>def echo(text):</p>

<pre><code>return text
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>hoge command</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>def hoge():</p>

<pre><code>return "hoge"
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>ping command</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>def pong():</p>

<pre><code>pong_msg = "pong :ping_pong:"
return pong_msg
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>sushi command</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>def sushi():</p>

<pre><code>return "（っ'-')╮ =͟͟͞͞ :sushi: ﾌﾞｫﾝ"
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<h1>tenki command</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>def tenki():</p>

<pre><code>api_url = "http://weather.livedoor.com/forecast/webservice/json/v1?city="
# 横浜の city id
# その他のIDはここから探して: http://weather.livedoor.com/forecast/rss/primary_area.xml
city_id = "140010"
api_res = requests.get(api_url + city_id)
json_res = json.loads(api_res.text)

today = json_res['forecasts'][0]
tomorrow = json_res['forecasts'][1]

tenki_info = ""
tenki_info += format_tenki_json(today)
tenki_info += format_tenki_json(tomorrow)
return tenki_info
</code></pre>

<p>def format_tenki_json(j):</p>

<pre><code>tenki_info = "# "
tenki_info += j['dateLabel'] + " (" + j['date'] + ") の横浜の天気は" + j['telop']
tenki_info += " ![](" + j['image']['url'] + ")\n"

t_min = j['temperature']['min']
t_max = j['temperature']['max']
t_min_str = " -- " if t_min is None else str(t_min['celsius'])
t_max_str = " -- " if t_max is None else str(t_max['celsius'])
tenki_info += "- 最低気温は " + t_min_str +"℃\n"
tenki_info += "- 最高気温は " + t_max_str  +"℃\n\n"
return tenki_info
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>log(app)
app.debug = True
app.run(host='0.0.0.0')
</code></pre>

<p>```</p>

<h2>テスト</h2>

<p>以下を参考にした。</p>

<p><a href="http://momijiame.tumblr.com/post/39324429279/python-%E3%81%AE-flask-%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B">Python の Flask で作ったアプリケーションをテストする | CUBE SUGAR STORAGE</a></p>

<p>各チャットボットコマンドに対応するテストケースを以下のように書ける。</p>

<p>```python
import datetime
import json
import mattermostbot
import unittest</p>

<p>class TestMattermostBot(unittest.TestCase):</p>

<pre><code># mattermost -&gt; bot へのリクエスト JSON のダミーデータ雛形
data = dict(
        channel_id = 'xxxxxxxxxxxxxxxxxxxxxxxxxx',
        channel_name = 'some_channel',
        file_ids = '',
        post_id = 'xxxxxxxxxxxxxxxxxxxxxxxxxx',
        team_domain = 'some_team',
        team_id = 'xxxxxxxxxxxxxxxxxxxxxxxxxx',
        text = 'your_bot_name ',
        timestamp = '9999999999',
        token = 'xxxxxxxxxxxxxxxxxxxxxxxxxx',
        trigger_word = 'your_bot_name',
        user_id = 'xxxxxxxxxxxxxxxxxxxxxxxxxx',
        user_name = 'your_name')

def setUp(self):
    self.app = mattermostbot.app.test_client()

def test_post_echo(self):
    response = TestMattermostBot.req(self, 'echo fuga')
    response_data = json.loads(response.data)
    assert response.status_code == 200
    assert response_data['text'] == 'fuga'

def test_post_hoge(self):
    response = TestMattermostBot.req(self, 'hoge')
    response_data = json.loads(response.data)
    assert response.status_code == 200
    assert response_data['text'] == 'hoge'

def test_post_ping(self):
    response = TestMattermostBot.req(self, 'ping')
    response_data = json.loads(response.data)
    assert response.status_code == 200
    assert response_data['text'] == 'pong :ping_pong:'

def test_post_sushi(self):
    response = TestMattermostBot.req(self, 'sushi')
    response_data = json.loads(response.data)
    assert response.status_code == 200
    assert response_data['text'] == "（っ'-')╮ =͟͟͞͞ :sushi: ﾌﾞｫﾝ"

def test_post_tenki(self):
    response = TestMattermostBot.req(self, 'tenki')
    response_data = json.loads(response.data)
    assert response.status_code == 200
    assert datetime.date.today().strftime('%Y-%m-%d') in response_data['text']

def req(self, command):
    data = TestMattermostBot.data.copy()
    data['text'] = data['text'] + command
    return self.app.post('/bot', data=data)
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>unittest.main()
</code></pre>

<p>```</p>

<p>テストを実行するとこんな感じになる。</p>

<p>```sh
$ python test_mattermostbot.py</p>

<h2>&hellip;..</h2>

<p>Ran 5 tests in 0.115s</p>

<p>OK
```</p>
]]></content>
  </entry>
  
</feed>
