<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: google | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/google/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2019-03-30T16:32:08+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[参加レポート]Google Cloud Kubernetes Day]]></title>
    <link href="http://momota.github.io/blog/2019/03/27/gc_k8sday/"/>
    <updated>2019-03-27T13:42:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/03/27/gc_k8sday</id>
    <content type="html"><![CDATA[<ul>
<li>2019/03/26(火)、渋谷で行われた <a href="https://cloudplatformonline.com/2019-google-cloud-kubernetes-day-0326.html">Google Cloud Kubernetes Day</a> への参加レポート。</li>
<li>会場の約半数が k8s をすでに利用、サービスメッシュは1割程度という感じで、プロダクション環境での採用をやっていかないとまずいという雰囲気だった。</li>
<li>ハッシュタグ: <a href="https://twitter.com/hashtag/gc_k8sday">#gc_k8sday</a></li>
<li>資料が公開されたらリンクを張ったりアップデートする予定。</li>
</ul>


<!-- more -->


<h1>「Kubernetes/Container による開発」の導入難易度とメリット</h1>

<ul>
<li>株式会社サイバーエージェント　青山 真也 氏</li>
<li><p><a href="https://twitter.com/amsy810">@amsy810</a></p></li>
<li><p>サイバーエージェントとk8s</p>

<ul>
<li>2016年頃からk8sを採用</li>
<li>GKEとオンプレの採用が多い (半々くらい)</li>
<li>新規事業の多くがk8s/Containerを利用している</li>
<li>レガシーシステムからコンテナへの移行も実施中</li>
</ul>
</li>
<li>k8s

<ul>
<li>コンテナオーケストレーションシステムの一つ</li>
<li>Borgベースなので、Googleの経験がk8sに引き継がれている</li>
<li>現在はCNCFが中立的にホスト。コミュニティによって改良されている</li>
</ul>
</li>
<li>オーケストレーションとは

<ul>
<li>プロビジョニングの一つ

<ol>
<li>ブートストラッピング: サーバの準備、OSのインストール

<ul>
<li>Terraform</li>
</ul>
</li>
<li>コンフィグレーション: サーバのセットアップ、ミドルウェアのインストール、セットアップ

<ul>
<li>Chef, Ansible, Puppet, Salt</li>
</ul>
</li>
<li>オーケストレーション: アプリケーションの配置

<ul>
<li>Fabric, Capistrano</li>
</ul>
</li>
</ol>
</li>
<li>イメージ化による高い再現性を保つようになってきた

<ul>
<li>Packer, Cloud Image, OpenStack Heat, CloudFormation</li>
</ul>
</li>
<li>容易なイメージ化、軽量なイメージ、高速な起動と停止。特定クラウドへの依存がない。

<ul>
<li>Docker, k8s</li>
</ul>
</li>
</ul>
</li>
<li>Cloud Nativeとは

<ul>
<li>疎結合なシステム</li>
<li>復元力がある</li>
<li>管理しやすい</li>
<li>可観測である</li>
<li>堅牢な自動化により、頻繁かつ期待通りに最小限の労力で大きな変更が可能</li>
</ul>
</li>
<li>CNCF が Cloud Native の進め方をTRAIL MAPとして定義: <a href="https://github.com/cncf/landscape">cncf/landscape</a></li>
</ul>


<p><img src="/images/20190327_gc_k8sday/cncf-trail-map.png" alt="CNCF trail map" /></p>

<h2>Containerization</h2>

<p>レガシーシステムのマイグレーションもスタート地点はここから。実行環境込みのアプリケーションをSystemdに置き換えるイメージ</p>

<ol>
<li>容易なイメージかと再現性 by Docker

<ul>
<li>アプリケーションと実行環境のイメージ化: 再現性の高い環境</li>
<li>ローカル環境でも同等の動作が保証される</li>
</ul>
</li>
<li>軽量なイメージ by Docker

<ul>
<li>VMイメージと比べて軽量</li>
<li>単一プロセスのみを可動させるため、軽量OSの選定もしやすい: Alpine</li>
</ul>
</li>
<li>高速な起動と停止 by Docker

<ul>
<li>VMよりも起動停止が高速: プロセスの起動停止に相当</li>
<li>高速なスケールアウトや障害時の復旧が可能</li>
</ul>
</li>
</ol>


<h2>Orchestration</h2>

<ol>
<li>高い抽象度とクラウド非依存 by k8s

<ul>
<li>Load BalancerやStorageなども抽象化</li>
<li>利用者から見るとクラウド固有の知識がほぼ不要 vs Terraform, OpenStack heat, AWS CloudFormation</li>
<li>ベンダーニュートラルな実行基盤</li>
<li>基本的にはポータビリティがある</li>
</ul>
</li>
<li>宣言的なAPIとCode by k8s

<ul>
<li>構成情報はManifestsで宣言的に記述してAPIに登録: Infrastructure as Code</li>
<li>Control LoopとReconciliation</li>
</ul>
</li>
<li>洗練された自動化 by k8s

<ul>
<li>障害時のセルフヒーリング</li>
<li>アプリケーションのアップグレード</li>
<li>コンテナ単位のヘルスチェック</li>
<li>コンテナ起動前の初期化処理</li>
<li>コンテナ停止時のSIGNAL</li>
<li>コンテナ開始直後、停止直前のフック</li>
</ul>
</li>
<li>豊富なエコシステムと拡張性 by k8s

<ul>
<li><img src="/images/20190327_gc_k8sday/cncf-landscape.png" alt="CNCF landscape" /></li>
<li>例) Managed Service via Kubernetes (Cloud SQL)</li>
</ul>
</li>
</ol>


<h2>Cloud Nativeの難しさ</h2>

<ol>
<li>アプリケーションのアーキテクチャ

<ul>
<li>マイクロ/ミニサービスに適した技術</li>
<li>いつでも停止できるようにSIGTERMのハンドリングは必須: ノードのアップグレード、コンテナイメージのアップデート</li>
<li>Service Discovery経由で通信</li>
<li>ネットワークに一部制約がある (Source IPが消失する、など)</li>
</ul>
</li>
<li>セキュリティと分離性

<ul>
<li>仮想化の分離性: gVisorなどを利用する</li>
<li>ネットワークの分離性</li>
</ul>
</li>
<li>k8sの学習コスト

<ul>
<li>学習コストは小さくないものの懸念するほどではない</li>
</ul>
</li>
<li>k8sクラスタの管理

<ul>
<li>GKEを利用することでだいぶ楽できる</li>
</ul>
</li>
</ol>


<h2>マネージドk8sの選定基準</h2>

<ul>
<li>マネージドの範囲</li>
<li>クラスタマネジメントの自動化機能</li>
<li><p>k8sバージョンの追随スピード</p></li>
<li><p>サイバーエージェントでは、アドテク分野やアベマTVなどいろいろなヘビーワークロードにもk8sで実装し、耐えうるシステムを構築</p></li>
<li>ステートフル部分はマネージドサービスを利用する: Cloud SQL、BigQuery、…</li>
</ul>


<h1>コンテナ開発プラットフォームに GKE を選択すべき 7 つの理由</h1>

<ul>
<li>Google Cloud Japan　田中 宏樹氏、岩成 祐樹氏</li>
</ul>


<h2>Security</h2>

<ul>
<li>セキュリティがクラウドの長所に</li>
<li>GCPでは、徹底的な防御がデフォルトでON

<ul>
<li>通信の暗号化</li>
<li>ストレージの暗号化</li>
<li>認証・認可</li>
<li>ハードウェア</li>
</ul>
</li>
<li>コンテナのセキュリティ

<ul>
<li>インフラストレクチャセキュリティ

<ul>
<li>インフラはコンテナを開発するのに安全か</li>
<li>GKE: Use RBAC and IAM</li>
<li>プライベートクラスタと承認済みネットワーク</li>
<li>Cloud Armor: スケーラブルなDDoS対策</li>
<li>BackendConfg</li>
</ul>
</li>
<li>ソフトウェアサプライチェーン

<ul>
<li>作成したコンテナはビルド、デプロイして問題ないか</li>
<li>CI/CDパイプラインは信頼できないデプロイを止めてくれない

<ul>
<li>イメージのメタデータ</li>
<li>Binary Authorization: QAされたコードだけを実行</li>
</ul>
</li>
<li>Container Registry: 脆弱性スキャン</li>
<li>Binary Authorization: 信頼されたコンテナイメージのみをGKE上にデプロイすることを保証するセキュリティコントロール機能</li>
</ul>
</li>
<li>ランタイムセキュリティ

<ul>
<li>作成したコンテナは実行して問題ないか</li>
<li>Container Optimized OS: GCE, GKEで利用可能な軽量なイメージ

<ul>
<li>runcの脆弱性 CVE-2019-5736の影響を受けなかった</li>
</ul>
</li>
<li>3rdパーティツールの利用: aqua. sysdig, stackrock&hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Network</h2>

<ul>
<li>さまざまなGCPサービスとの統合</li>
<li>Google Cloud Load Bakancing</li>
<li>世界中のCloud CDNとLB</li>
<li>Container Native Load Balancing

<ul>
<li>LBからVM(Node)を介さずPodへ直接トラフィックを転送</li>
<li>Double-hop問題を解決</li>
<li>レイテンシーとルーティング問題を解決</li>
</ul>
</li>
</ul>


<h2>Hybrid Cloud</h2>

<ul>
<li>ゴール: コードをどこでも実行できる環境を整える</li>
<li>GKE On-prem

<ul>
<li>オンプレミスのクラスタをGoogle Cloud Consoleから一元的に管理</li>
<li>クラスタ集中管理のメリット: GKEとGKE On-Premで同じツールを使ってクラスタの構築、構成、管理を実施</li>
<li>同一のクラスタ環境</li>
</ul>
</li>
<li>事例

<ul>
<li>メルカリ: オンプレミスからの移行</li>
</ul>
</li>
</ul>


<h2>Observability</h2>

<ul>
<li>ロギング

<ul>
<li>GCP内部の情報に加えて、GCPの外部で発生するログについても収集できる基盤が必要</li>
</ul>
</li>
<li>モニタリング</li>
<li>統合管理プラットフォーム

<ul>
<li>DevOpe/SRE</li>
<li>Developer</li>
<li>SecOps</li>
</ul>
</li>
<li>Stackdriver: アプリケーション開発者と運用担当者にLoggingとMonitoring機能を提供する</li>
<li>Stackdriver Kubernetes Monitoring

<ul>
<li>k8sのワークロードに最適化されたStackdriverのツール</li>
</ul>
</li>
<li>work with Open Source: Prometheus</li>
</ul>


<h2>Contribution</h2>

<ul>
<li>Open source is free like a puppy</li>
<li>GKE is going to ..

<ul>
<li>To be Reliable

<ul>
<li>Regional clusters</li>
<li>Regional Persistent Disks</li>
</ul>
</li>
<li>To be Scalable

<ul>
<li>HPA: 水平スケーリング</li>
<li>VPA: Podの垂直スケーリング</li>
<li>CA: Nodeの水平スケーリング</li>
<li>Node Auto-Provisioning</li>
</ul>
</li>
<li>To be Open

<ul>
<li>OSS Friendly ecosystem

<ul>
<li>Skaffold</li>
<li>Kanico</li>
<li>Knative</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>GKE を用いたレガシー システムからのリプレース事例</h1>

<ul>
<li>富士フイルム株式会社　小林 大助 氏</li>
</ul>


<h2>プロジェクト概要</h2>

<ul>
<li>FUJIFILM Prints &amp; Gifts

<ul>
<li><a href="https://pg-ja.fujifilm.com/photo-print">写真プリント | FUJIFILMプリント＆ギフト | 富士フイルムの公式ストア</a></li>
<li><a href="https://fujifilmmall.jp/walldecor/?_ga=2.101125698.254826136.1553583454-463832683.1553583454">WALL DECOR（ウォールデコ）｜富士フイルム</a></li>
</ul>
</li>
<li>レガシーシステム運用10年超え

<ul>
<li>保守・運用コスト大</li>
<li>機能改善スピード低</li>
</ul>
</li>
<li>ユーザの消費動向の変化

<ul>
<li>モノ消費からコト消費へ</li>
</ul>
</li>
</ul>


<h2>GKE利用までの経緯</h2>

<ul>
<li>S→T→P→D→C→A

<ul>
<li>PDCAに加えて See + Think</li>
<li>富士フィルムではSTを重視</li>
</ul>
</li>
<li>モノリシックなアプリケーションにより影響範囲の見定めが難しい</li>
<li>特に苦労しているのは季節イベント、キャンペーン

<ul>
<li>負荷量の変動に対してシステムが追随しにくい</li>
<li>スケーラビリティを確保しやすい仕組みを最優先にする</li>
<li>コンテナを利用</li>
</ul>
</li>
<li>保守面を意識すれば、オーケストレーションツールは使いたい。課題が2つ

<ul>
<li>何が標準か

<ul>
<li>流行度</li>
<li>[社内の]覇権争い</li>
<li>仕様策定中</li>
</ul>
</li>
<li>自分たちで運用できるか

<ul>
<li>使いこなせないと意味がない</li>
<li>運用環境に耐えうるレベルか</li>
</ul>
</li>
</ul>
</li>
<li>k8sがデファクトスタンダードになった: 規格争いによる技術の陳腐化懸念が後退</li>
<li>主要ベンダがk8sマネージドサービスを展開</li>
<li>2018年1月時点で日本国内GAしているのはGoogeのみ</li>
<li>動作安定性</li>
</ul>


<h2>取り組む上での課題: 組織面</h2>

<ul>
<li>周囲の理解

<ul>
<li>技術的優位性を説明できないといけない</li>
<li>総論は賛成、各論は？</li>
<li>リスクを背負えるか: 納期遵守のPrj</li>
</ul>
</li>
<li>技術学習、解説資料作成、説明行脚</li>
<li>現場レベルでは味方は多かった</li>
<li>リスクに対しては、バックアッププランの準備、技術習得状況の説明、Googleエンジニアのバックアップ</li>
</ul>


<h2>取り組む上での課題: 開発面</h2>

<ul>
<li>技術習得: 独学とハンズオン</li>
<li>事前調査</li>
<li>運用: ログ出力やアラート関連は、メトリクスの書き方が困難だった</li>
<li>設計・設定: マニフェストファイルの書き方、永続データの取扱いに関する適切なサービス選定がむずい</li>
<li>基本設計: サービス分割はアトミックにすると障害復旧が難しいので、意味のある塊に</li>
<li>商用利用に向けての課題: PaaSの特徴や仕様についてGoogleエンジニアのサポートを受けながら選定、確認を進める</li>
<li>レガシーシステムとの連携: 基本は新システム側が全面降伏で対応</li>
</ul>


<h2>効果</h2>

<ul>
<li>スケーラビリティの確保はできた。ただし、今後悪化しないように管理していく必要がある</li>
<li>保守運用コストは改善された

<ul>
<li>ランニングコスト 3/5</li>
<li>導入8ヶ月でサービスダウンタイムなし。安定稼働中。</li>
</ul>
</li>
<li>機能改善スピードは向上できた

<ul>
<li>対応速度が約2倍に</li>
</ul>
</li>
<li>学習コストは小さくなかったが、リターンが大きかった</li>
<li>アプリ開発に集中できる環境を整えることができた</li>
<li>組織の壁は高い、乗り越えるには熱意が必要。仲間がいれば突破しやすい</li>
<li>クラウドベンダエンジニアの協力は偉大</li>
</ul>


<h1>コンテナによる開発と運用の進化</h1>

<ul>
<li><p>Google Cloud Japan　篠原 一徳氏、村上 大河氏</p></li>
<li><p>3つのポイント</p>

<ul>
<li>人 (ビジネス・技術)

<ul>
<li>CxO</li>
<li>Manager</li>
<li>Business</li>
<li>Tech</li>
</ul>
</li>
<li>プロセス

<ul>
<li>DevOps</li>
<li>SRE</li>
<li>Scrum (アジャイル開発)</li>
<li>Waterfall</li>
</ul>
</li>
<li>テクノロジー

<ul>
<li>クラウド</li>
<li>マイクロサービスアーキテクチャ</li>
<li>CI/CD</li>
</ul>
</li>
</ul>
</li>
<li>マイクロサービスとは

<ul>
<li>2014年にJames LewisとMartin Fowlerが提唱</li>
<li>機能ごとに独立したアプリケーションに分割</li>
<li>各サービスは単一の目的を持つ</li>
<li>分散システム、サービス間は疎結合、軽量なAPIなどでやりとり</li>
</ul>
</li>
<li>AsIs to ToBe: Monolith to Microservice

<ul>
<li>新規サービスからやる (新規機能から抜き出す)</li>
<li>既存のサービスを部分的に置き換える

<ul>
<li>Domain (専門領域) を抜き出し、マイクロサービス化する</li>
<li>チームも抜き出していくことが重要</li>
</ul>
</li>
</ul>
</li>
<li>マイクロサービス化を進めていくと、カオス化</li>
<li>The problem

<ul>
<li>分散アーキテクチャへの移行により、今までのアーキテクチャ向けに最適化された方法では監視、管理、保護が困難</li>
</ul>
</li>
<li>4 challenges of Microservices

<ul>
<li>プロセス内のコミュニケーションから、プロセス外コミュニケーションへの置き換え: RPC + APIゲートウェイ</li>
<li>分散システム導入により複雑化するシステムの効率的な管理: サービスメッシュ</li>
<li>マイクロサービス協会が引き起こすデータサイロの解決: データレイク</li>
<li>アプリケーションコード以外のコーディングを少なくする: 自動化 (CI/CD)</li>
</ul>
</li>
<li>課題と2つの実現方法

<ul>
<li>呼び出し先マイクロサービスのトラッキングが困難

<ul>
<li>REST API (HTTP1.1)

<ul>
<li>Open APIでメッセージフォーマットを定義</li>
<li>互換性管理のためのガイドラインの作成を推奨</li>
</ul>
</li>
<li>gRPC (HTTP2.0)

<ul>
<li>Protocol Buffersでメッセージフォーマットを定義</li>
<li>Language Guideに従うと、下位互換性の担保が容易</li>
</ul>
</li>
</ul>
</li>
<li>バージョン管理ガイド

<ul>
<li><a href="https://cloudplatform-jp.googleblog.com/2017/07/versioning-APIs-at-Google.html">Google Cloud Platform Japan 公式ブログ： Google における API のバージョニング</a></li>
<li>Google 内部のAPIバージョニング手法を公開</li>
<li>Cloud Endpointで実現をサポート</li>
</ul>
</li>
<li>API設計ガイド

<ul>
<li><a href="https://cloud.google.com/apis/design/">API 設計ガイド | Cloud API | Google Cloud</a></li>
<li>Google内部のAPI設計のスタンダードを公開</li>
<li>Cloud Endpointで簡単に実現</li>
</ul>
</li>
<li>Cloud Endpointsによるマイクロサービスの実現

<ul>
<li>内部はgRPC、外部はRESTで公開も可能</li>
</ul>
</li>
</ul>
</li>
<li>サービスメッシュ

<ul>
<li>マイクロサービス環境において、サービスディスカバリ、トラフィックコントロール、認証・認可、メトリクス収集などの機能を担うソフトウェア</li>
<li>アプリケーション自体に手を入れるのではなく、サイドカーで実現</li>
<li>Istio: GoogleとIBMが中心に開発しているサービスメッシュ実装のOSS

<ul>
<li>ProxyとしてEnvoyを利用</li>
<li>トラフィックコントロール

<ul>
<li>これまでトラフィックコントロールはインフラストラクチャと結びついていた</li>
<li>トラフィックスプリッティング</li>
</ul>
</li>
<li>セキュリティ

<ul>
<li>サービス間のセキュリティを強化</li>
<li>RBAC</li>
</ul>
</li>
<li>可観測性

<ul>
<li>Istioの監視

<ul>
<li>Mixer: テレメトリの収集</li>
<li>Prometheus</li>
<li>Grafana</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Istio on GCP</li>
</ul>
</li>
<li>データレイク

<ul>
<li>マイクロサービスにより、データのサイロ化が進む</li>
</ul>
</li>
<li>CSM (Managed Istio) の Alphaユーザを募集中: <a href="https://docs.google.com/forms/d/1Qhj4qViWgaSAf9KUfowWRdVS6OHwg9cgEdYX2xbpLeM/viewform?edit_requested=true">https://docs.google.com/forms/d/1Qhj4qViWgaSAf9KUfowWRdVS6OHwg9cgEdYX2xbpLeM/viewform?edit_requested=true</a></li>
</ul>


<h1>事例セッション： FreakOut の広告プロダクトでの GKE 活用事例と GKE 新機能の導入について</h1>

<ul>
<li><p>株式会社フリークアウト　西口 次郎 氏</p></li>
<li><p>RED: Freakout DSP</p></li>
<li>ASE: 位置情報マーケティングプラットフォーム</li>
<li>RED for Publishers: アドネットワーク基盤</li>
<li>LayApp: アプリエンゲージメントプラットフォーム</li>
</ul>


<h2>プロダクション環境でのGKE運用</h2>

<ul>
<li><a href="https://cloudplatform-jp.googleblog.com/2018/09/freakout-kubernetes-engine.html">Google Cloud Platform Japan 公式ブログ： 株式会社フリークアウトの導入事例： フルマネージドな Kubernetes Engine を駆使して、大規模アドプラットフォームをプレミアム メディア向けに提供</a></li>
<li>GKE

<ul>
<li>サービスごとにクラスタを分割</li>
<li>広告配信、UI、バッチ</li>
<li>CronJobを利用</li>
<li>カナリーリリース環境を用意</li>
<li>Stackdriverを活用</li>
</ul>
</li>
<li>Stackdriver

<ul>
<li>Monitoring

<ul>
<li>Prometheusと併用</li>
</ul>
</li>
<li>Logging

<ul>
<li>コンテナのエラーログなどを集約</li>
<li>アラート: Pub/Sub → Cloud Functions → Slack</li>
</ul>
</li>
<li>Profiler

<ul>
<li>常に最新のコーdンのプロファイルを可視化、比較</li>
</ul>
</li>
</ul>
</li>
<li>BigQuery

<ul>
<li>すべてのアクセスログ、アプリケーションログを集約

<ul>
<li>数十億レコード/日</li>
</ul>
</li>
<li>fluentd (Sidecar Container)からStreaming insert</li>
<li>可視化はre:dash</li>
<li>MySQLのマスタデータもインポートしている</li>
</ul>
</li>
<li>Vulnerability scanning

<ul>
<li>GCRの機能</li>
<li>Debian, Ubuntu, Alpineが対象</li>
<li>過去30日間にpullされたイメージが対象</li>
<li>脆弱性が見つかった際、Pub/SubにPublishされる (Cloud FunctionsでSlack通知)</li>
</ul>
</li>
<li>kustomise

<ul>
<li>k8s のYAMLファイルのカスタマイズ</li>
<li>kubectrlのサブコマンドとしてマージされた</li>
<li>Production/Staging/Cannaryなど環境ごとの設定を上書き</li>
</ul>
</li>
<li>Other tools

<ul>
<li>stern

<ul>
<li>複数のコンテナのログをすばやく確認できる</li>
</ul>
</li>
<li>kubectx

<ul>
<li>クラスタ切り替え</li>
<li>複数クラスタ/開発・本番環境の切り替えに</li>
<li>ネームスペースの切り替えも可能</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>GKEでのCI/CD</h2>

<ul>
<li>Github</li>
<li>CircleCI</li>
<li>Cloud Build</li>
<li>Cloud Container Registry</li>
<li>Cloud Pub/Sub: ビルド通知</li>
<li>Cloud Functions: Slack通知</li>
<li>Slack: エンジニア通知</li>
</ul>


<h3>CIのフロー</h3>

<ol>
<li>GithubへのPush</li>
<li>テスト・ビルド

<ul>
<li>CircleCIでのテスト</li>
<li>CloudBuildでのビルド</li>
</ul>
</li>
<li>カナリアリリース</li>
</ol>


<h2>CDのフロー</h2>

<ol>
<li>GithubでPRをマージ</li>
<li>ビルド&amp;デプロイ

<ul>
<li>docker build</li>
<li>docker push</li>
<li>kubectrl set image</li>
</ul>
</li>
<li>notification

<ul>
<li>Pub/SubへのPublish</li>
<li>Cloud FunctionsでSlackツウイ</li>
</ul>
</li>
</ol>


<h2>GKE 新機能の利用</h2>

<ul>
<li>VPC-native cluster (alias IP)</li>
<li>Cloud NAT

<ul>
<li>マネージドNATサービス</li>
<li>アウトバウンドアクセスのゲートウェイ</li>
<li>外部アクセスするIPアドレスを限定する用途で使用

<ul>
<li>IPアドレスの事前登録が必須な外部API</li>
</ul>
</li>
</ul>
</li>
<li>Network Endpoint Groups

<ul>
<li>コンテナネイティブの負荷分散</li>
<li>Instance Groupはiptablesを介してPodへルーティングしていたが、Podへ直接ルーティング可能</li>
<li>ネットワークパフォーマンス改善</li>
</ul>
</li>
<li>BackendConfig Custom resource</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[参加レポート]GDG-Tokyo New Year Party 2019]]></title>
    <link href="http://momota.github.io/blog/2019/01/31/gdg-tokyo/"/>
    <updated>2019-01-31T10:51:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/01/31/gdg-tokyo</id>
    <content type="html"><![CDATA[<p><img src="/images/20190131_gdg-tokyo/gdg.png" alt="GDF-Tokyo New Year Party logo" /></p>

<ul>
<li>2019/01/30(水)、六本木で行われた<a href="https://gdg-tokyo.connpass.com/event/113178/">GDG Tokyo New Year Party 2019 &ndash; connpass</a> への参加レポート。</li>
</ul>


<!-- more -->


<h3>How to start Android Dev</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="5e83e4faafc34fb6a4dcacdb633f47ea" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/wasabeef_jp">@wasabeef_jp さん</a></li>
<li>資料: <a href="https://speakerdeck.com/wasabeef/jp-how-to-start-android-dev">［JP］ How to start Android Dev &ndash; Speaker Deck</a></li>
</ul>


<h4>IDE (Build tool)</h4>

<ul>
<li>Android Studio

<ul>
<li>Layout Editor</li>
<li>MotionLayout: Motion editor</li>
<li>Emulator: 数年前に比べると高機能・高速化</li>
</ul>
</li>
<li>Gradle

<ul>
<li>ビルド自動化</li>
<li>Android開発におけるスタンダード</li>
<li>DSL (デフォルトGroovy DSL)

<ul>
<li>Kotlin DSL</li>
</ul>
</li>
</ul>
</li>
<li>Java / Kotlin

<ul>
<li>近年はKotlinが主流

<ul>
<li>Libraryを作るときはJavaで作ることが多い</li>
</ul>
</li>
<li>Java 8: 最新のJavaは使えない

<ul>
<li>D8 toolsによって今後変わりそう</li>
</ul>
</li>
<li>Kotlin 1.3

<ul>
<li>Coroutines: 軽量スレッド</li>
<li>Null-safety</li>
<li>Extention functions</li>
<li>Lambda + Inline functions、など</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>Architecture</h4>

<ul>
<li>MVVM

<ul>
<li>Google推奨でAACと相性がいい</li>
</ul>
</li>
<li>Flux

<ul>
<li>日本で数件の事例あり</li>
</ul>
</li>
</ul>


<h4>Jetpack</h4>

<ul>
<li>KTX

<ul>
<li>Core</li>
<li>Fragment</li>
<li>Lifecycle</li>
</ul>
</li>
<li>Lifecycles

<ul>
<li>バックグラウンド状態、フォアグラウンド状態、電源状態…</li>
<li>ライフサイクルを知りたいとき

<ul>
<li>動画の開始停止</li>
<li>画面閉じたときの終了処理</li>
</ul>
</li>
</ul>
</li>
<li>ViewModel (+ LiveData)

<ul>
<li>Activity/ViewModelはそれぞれ異なるライフサイクルがあるが、ViewModelのほうが長生きする</li>
<li>ViewModel

<ul>
<li>Activityの画面回転・破棄のデータ保持</li>
<li>Fragments感のデータ共有</li>
<li>永続化ではない</li>
</ul>
</li>
</ul>
</li>
<li>Navigation

<ul>
<li>Fragment Transactionの簡易化

<ul>
<li>アニメーション</li>
</ul>
</li>
<li>ディープリンク</li>
<li>Navigation Editor</li>
</ul>
</li>
</ul>


<h4>DI</h4>

<ul>
<li>Dagger

<ul>
<li>Java</li>
</ul>
</li>
<li>Koin</li>
<li>Kodein</li>
</ul>


<h4>Networking</h4>

<ul>
<li>Retrofit</li>
</ul>


<h4>Testing</h4>

<ul>
<li>Unit Test

<ul>
<li>Instrument Test: 実機テスト</li>
<li>Local Test (Robolectric): CIとの相性がいい</li>
<li>Firebase Test Lab</li>
</ul>
</li>
</ul>


<h4>CI</h4>

<ul>
<li>bitrise

<ul>
<li>モバイル向け</li>
</ul>
</li>
<li>CircleCI

<ul>
<li>高機能</li>
<li>メモリ不足で落ちる場合がある</li>
</ul>
</li>
<li>Danger

<ul>
<li>コードレビューの自動化をCI上で</li>
</ul>
</li>
</ul>


<h4>Flutter</h4>

<ul>
<li>Google製</li>
<li>Hot reload</li>
<li>ウィジェットがたくさん</li>
</ul>


<h3>Cloud Functionsから始めるFirebase</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="161fd22794824e868465f92f2ecee8c5" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/d_date">Daiki Matsudate(@d_date)さん</a></li>
<li>資料: <a href="https://speakerdeck.com/d_date/cloud-functionskarashi-merufirebase-4568e784-5bf3-4611-90a4-2f8632b3aa78">Cloud Functionsから始めるFirebase &ndash; Speaker Deck</a></li>
</ul>


<h4>Firebase</h4>

<ul>
<li>mBaaS

<ul>
<li>アプリ開発を容易に</li>
<li>アプリ品質向上</li>
</ul>
</li>
</ul>


<h4>Cloud Functions for Firebase</h4>

<ul>
<li>コードをクラウドにプッシュするとFirebaseのサービスのアクションをトリガーに動く</li>
</ul>


<h4>Admin API</h4>

<ul>
<li>CLIで特権環境からFirebaseを操作できる</li>
</ul>


<h4>ユースケース</h4>

<ul>
<li>(Twitterなどの)フォロワーが追加されたら通知する</li>
<li>メッセージのサニタイズする</li>
<li>画像をストレージにアップロード後、サムネイル化し格納し直し</li>
<li>URL Shorter</li>
<li>Firestoreの全文検索: Firestoreアップデート時にalgoliaにインデックスを貼る</li>
<li>Remote Config</li>
<li><a href="https://github.com/firebase/functions-samples">firebase/functions-samples： Collection of sample apps showcasing popular use cases using Cloud Functions for Firebase</a> にいろいろとサンプルがある</li>
</ul>


<h4>GCP</h4>

<ul>
<li>GCP FunctionsはGo 1.11に対応</li>
</ul>


<h3>Starting Google Kubernetes Engine 2019</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="4d31ff24e0cc4e79b5275dbaba4a49f3" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/sakajunquality">sakajunquality(@sakajunquality)さん</a></li>
<li>資料: <a href="https://speakerdeck.com/sakajunquality/starting-google-kubernetes-engine-2019">Starting Google Kubernetes Engine 2019 &ndash; Speaker Deck</a></li>
</ul>


<h4>What&rsquo;s k8s?</h4>

<ul>
<li>Borgベースのコンテナプラットフォーム</li>
<li>Microservicesプラットフォーム</li>
<li>Goベース</li>
<li>CNCFプロジェクトの「Graduated」ステージ</li>
</ul>


<h4>K8s マネージドサービス</h4>

<ul>
<li>GKE</li>
<li>EKS</li>
<li>AKS</li>
<li>IKS</li>
<li>などなどたくさんある…</li>
</ul>


<h4>Why GKE?</h4>

<ul>
<li>すでにGCPを使っている</li>
<li>k8sはむずかしい</li>
<li>GCP独自の機能</li>
</ul>


<h4>Already Using GCP?</h4>

<p>GCPでk8sを使うには以下のパターンがある</p>

<ul>
<li>AppEngine (Flexible) → 柔軟性がない</li>
<li>Compute Engine →  信頼性 (可用性) がない、作り込むとしても大変</li>
<li>Kubernetes Engine: Flexible + Reliable</li>
</ul>


<h4>k8sは難しい</h4>

<ul>
<li><a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">kelseyhightower/kubernetes-the-hard-way： Bootstrap Kubernetes the hard way on Google Cloud Platform. No scripts.</a></li>
<li>k8s は構築も、維持も、管理も大変

<ul>
<li>Boosting</li>
<li>High Availability</li>
<li>Version Updates</li>
</ul>
</li>
<li>簡単にクラスタをつくるならフルマネージドのGKE</li>
</ul>


<h4>GKEはフルマネージドサービス</h4>

<ul>
<li>コントロールプレーンとワーカーノードが両方フルマネージド</li>
<li>リージョン・ゾーンレベルの可用性</li>
<li>Auto-Repair / Auto-Update</li>
<li>VPCネイティブ</li>
</ul>


<h4>GCP特有機能</h4>

<ul>
<li>Networking

<ul>
<li>Cloud Load Balancing: L4. L7</li>
<li>Cloud Armor: L3-L7カスタムルールを作れるWAF</li>
<li>Cloud CDN: グローバルCDN</li>
</ul>
</li>
<li>CI/CD

<ul>
<li>Cloud Build: フルマネージドCI、ネイティブDockerをサポート</li>
<li>Container Registry: Docker レジストリ。脆弱性診断が可能</li>
<li>Cloud Source Repository: プライベートGitリポジトリ。検索が強い。Githubからミラー可能。</li>
<li>GitOpsの概念</li>
</ul>
</li>
<li>Monitoring

<ul>
<li>Stackdriver Monitoring: フルスタックの監視スイート</li>
<li>Stackdriver Logging: フルマネージドログプラットフォーム。GKEはfluentdがプリインストール</li>
</ul>
</li>
<li>Integrations

<ul>
<li>Cloud Pub/Sub</li>
<li>Cloud Functions</li>
<li>Cloud IAP</li>
</ul>
</li>
</ul>


<h4>GKE Update</h4>

<ul>
<li>Private Cluster + Cloud Nat

<ul>
<li>Private Clusterは、プライベートIPだけを持てる</li>
<li>Cloud Natは、フルマネージドNat-Gateway</li>
</ul>
</li>
<li>NEG /Container-Native Load Balancing

<ul>
<li>Network Endpoint Groupを使うとLB～Pod間のトラフィック制御をiptablesを使わずにできる</li>
</ul>
</li>
<li>Node Auto-Provisioning

<ul>
<li>Cluster Autoscalerが新しいノードプールを作成・削除してくれる</li>
</ul>
</li>
<li>Binary Authorization

<ul>
<li>信頼できるイメージのみをGKEへデプロイできる</li>
<li>チェックボックスにチェックを入れるだけで有効化可能</li>
</ul>
</li>
<li>Istio

<ul>
<li>1クリックでIstioをデプロイ可能</li>
<li>既存クラスタにも適用可能</li>
</ul>
</li>
</ul>


<h4>How to start?</h4>

<ul>
<li><code>$ gcloud container clusters create MY_CLUSTER</code></li>
<li>本を読む

<ul>
<li>中井さんのプログラマのための Google Cloud Platform 入門</li>
<li>Docker/Kubernetes 実践コンテナ開発入門</li>
<li>青山さんのKubernetes完全ガイド</li>
</ul>
</li>
<li>ハンズオン

<ul>
<li>Quick Start</li>
<li>QwickLabs</li>
<li>Coursera</li>
<li>sakajunquality&rsquo;s hands-on</li>
</ul>
</li>
<li>オンラインドキュメント

<ul>
<li>GKE document</li>
<li>Kubernetes document</li>
<li>Youtubeもある</li>
</ul>
</li>
</ul>


<h3>Web in 2019 What’s coming?</h3>

<ul>
<li>発表者: <a href="https://twitter.com/laco2net">Suguru Inatomi / lacolaco(@laco2net)さん</a></li>
<li>資料: <a href="https://docs.google.com/presentation/d/e/2PACX-1vRXfgnXlYSQ5Q3ImC1DQoub0L_5NUrha9yW3MLcDnFbn1A-mdEXZF11wzzadDF2yKoUnroZ46tMwUl3/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">20190130 &ndash; Web in 2019 What’s coming? &ndash; Google Slides</a></li>
</ul>


<h4>ES 2019 (WIP)</h4>

<ul>
<li><a href="https://qiita.com/tonkotsuboy_com/items/07f8ef98abf89250b90c">JavaScriptの次の仕様ES2019でほぼ確実に追加される新機能まとめ &ndash; Qiita</a></li>
</ul>


<h4>Web Components / Polymer</h4>

<ul>
<li>Polymerの追加開発がなくなった (メンテナンス状態)</li>
<li>lit

<ul>
<li>lit-html / lit-element</li>
</ul>
</li>
<li>Web ComponentsのBrowser supports Update

<ul>
<li>Firefox がサポート</li>
<li>EdgeがChromiumへ移行なので、移行後はEdgeでもwebcomponentsが使える</li>
</ul>
</li>
<li>CSS Shadow parts

<ul>
<li>Shadow DOM内にPartsを定義</li>
<li>外側のCSSから上書きできる</li>
</ul>
</li>
<li>Constructable Stylesheets

<ul>
<li>CSSStyleSheet()のオブジェクトを作成可能</li>
</ul>
</li>
<li>HTML Modules

<ul>
<li>Edgeチームから提案</li>
<li>.htm (モジュールファイル) をインポート可能</li>
</ul>
</li>
<li>Class Public Fields</li>
</ul>


<h4>Angular Updates</h4>

<ul>
<li>Community

<ul>
<li>成長中</li>
<li>Angular docsへの訪問者は1.5M に迫る</li>
<li>日本コミュニティ (ドキュメント翻訳など) も10,000MAUに到達</li>
</ul>
</li>
<li>Core updates

<ul>
<li>半年に1回メジャーアップデート</li>
<li>メジャーバージョンアップしてもそんなに大きな変化はなし</li>
</ul>
</li>
<li>Angular Bazel

<ul>
<li>Bazel (ビルドツール) をAngularでもサポート</li>
</ul>
</li>
<li>Ivy roadmap

<ul>
<li>次世代の内部リファクタリング</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Script でサーバレスな為替レート取得クローラをつくる]]></title>
    <link href="http://momota.github.io/blog/2018/06/25/apps-script/"/>
    <updated>2018-06-25T14:35:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/06/25/apps-script</id>
    <content type="html"><![CDATA[<p><a href="https://script.google.com/home">Google Apps Script</a> (GAS) は、Google が提供する JavaScript プラットフォームで、Google apps (Calendar, Docs, Drive, Gmail, Sheets, and Slides) に対して処理する JavaScript を簡単に書ける。
Excel マクロのすごい版みたいな感覚。</p>

<p>このスクリプトからHTTP GETリクエストを出したり、受け付けたりできる。</p>

<p>今回は、この GAS を使って、無料の Web クローラをサーバレスでつくってみる。</p>

<!-- more -->


<h2>処理の流れ</h2>

<ol>
<li>GAS から為替レート API をたたく</li>
<li>取得した為替レートデータを Google Sheets へ出力する</li>
<li>上記を1分間隔で実行する。</li>
</ol>


<h2>1. GAS から為替レート API をたたく</h2>

<h3>為替レート API の確認</h3>

<p>API は <a href="https://www.gaitameonline.com/rateaj/getrate">https://www.gaitameonline.com/rateaj/getrate</a> を利用する。
ここへ HTTP GET すると以下のような JSON フォーマットが返ってくる。 (整形済み)</p>

<p>```json
{
  quotes=[</p>

<pre><code>{
  high=1.9196,
  low=1.9162,
  ask=1.9212,
  bid=1.9195,
  currencyPairCode=GBPNZD,
  open=1.9167
},
{
  high=82.83,
  low=82.35,
  ask=82.41,
  bid=82.36,
  currencyPairCode=CADJPY,
  open=82.76
},
// ... (snip) ...
</code></pre>

<p>```</p>

<p>JSON の quotes は各通貨ペアの配列になっており、各要素に high, low, &hellip; などのフィールドがある構造になっている。</p>

<p><a href="https://www.gaitameonline.com/robots.txt">robots.txt</a> には特に言及されていないが、非常識なアクセスはしないように注意。</p>

<h3>GAS の作成</h3>

<p><a href="https://script.google.com/home">Apps Script</a> のメニューから <code>+ 新規スクリプト</code> をクリックすると、新規プロジェクトが立ち上がる。
プロジェクト名やスクリプト名は適当に変更する。 (デフォルト <code>Code.gs</code>)</p>

<p>GAS で API をたたく処理は以下のように書ける。</p>

<p>```javascript
function callExchangeAPI() {</p>

<pre><code>var now      = new Date(),
    url      = "https://www.gaitameonline.com/rateaj/getrate",
    response = UrlFetchApp.fetch(url),
    content  = response.getContentText(),
    fx       = JSON.parse(content);

fx.date = now;
Logger.log(fx);
return fx;
</code></pre>

<p>}
```</p>

<p><code>UrlFetchApp.fetch(url)</code> で API の URL をたたきにいける。
<code>fx.date = now</code> で、取得した JSON に取得日時フィールド <code>date</code> を足している。</p>

<p>上記をコピペして実行する (▶ボタンを押す) と初回実行時には以下のような確認ダイアログがでるので <code>Review Permissions</code> を押して許可する。</p>

<p><img src="/images/20180625_gas/01_notice_initial_run.png" alt="01_notice_initial_run" /></p>

<p>その後、Choose an account画面で自分のアカウントを選ぶと、確認画面 <code>YOUR-PROJECT-NAME wants to access your Google Account</code> が出てくるので <code>ALLOW</code> ボタンを押す。そうすると実行できる。</p>

<p><code>Logger.log(fx)</code> 部分でログ出力しているので、メニュー <code>View</code> > <code>Logs</code> からログ出力できていることが確認できる。
ログは以下のように出力される。</p>

<p><code>
[18-06-24 23:24:06:486 PDT] {date=Mon Jun 25 15:24:06 GMT+09:00 2018, quotes=[{high=1.9224, low=1.9162, ask=1.9223, bid=1.9206, currencyPairCode=GBPNZD, open=1.9167}, {high=82.83, low=82.22, ask=82.45, bid=82.40, currencyPairCode=CADJPY, open=82.76}, {high=1.7870, low=1.7817, ask=1.7855, bid=1.7846, currencyPairCode=GBPAUD, open=1.7817},
... snip ...
</code></p>

<h2>2. 取得した為替レートデータを Google Sheets へ出力する</h2>

<p>取得した為替レートを以下のように Google sheetsに出力する。</p>

<p><img src="/images/20180625_gas/03_sheet.png" alt="03_sheet" /></p>

<p>シートの 1 行目はヘッダ、列の定義は以下。通貨ペア種別すべての Ask や Bid などを取得したタイミングごとに1行で表現する。</p>

<p><code>
date, currencyPairCode1, high1, low1, ask1, bid1, open1, currencyPairCode2, high2, ...
</code></p>

<p>まずは、出力先にあたる Google sheets を新規作成し、その URL をコピーする。</p>

<p>個別の URL をコードに埋め込みたくないので、<code>Script properties</code> に値をセットしてそれをコードの中から利用する。</p>

<p>GAS のメニュー <code>File</code> > <code>Project properties</code> から <code>Script properties</code> タブへ移動する。
<code>+ Add row</code> のリンクから行をエントリーする。
<code>Property</code> に SHEET_URL、<code>Value</code> に先程コピーした Google sheets の URLを登録する。
登録するURL は <code>https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxx/edit</code> のような形式。</p>

<p>上述した <code>Script properties</code> から値を参照して、Sheet オブジェクトを取得する処理は以下。</p>

<p>```javascript
  function() {</p>

<pre><code>if(this.getSheet.sheet) { return this.getSheet.sheet; }

var SHEET_URL = PropertiesService.getScriptProperties().getProperty('SHEET_URL');
if (!SHEET_URL) {
  throw 'You should set "SHEET_URL" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

var sheets = SpreadsheetApp.openByUrl(SHEET_URL);
this.getSheet.sheet = sheets.getActiveSheet();
return this.getSheet.sheet;
</code></pre>

<p>  }
```</p>

<p>API から取得してきた JSON データをシートに出力する。</p>

<p>シートに対して入力するには、<code>sheet.getRange(row, column).setValue(something)</code> のようにシートの行 (row) と列 (column) を指定して setValue を呼べば良い。</p>

<p>```javascript
  function(ex_json) {</p>

<pre><code>var sheet = this.getSheet();

// データ追加行 (Sheetの最終行 + 1) を取得する
var last_row = sheet.getLastRow() + 1;

var col = 1;
sheet.getRange(last_row, col++).setValue(ex_json.date);

for each(var quote in ex_json.quotes) {
  sheet.getRange(last_row, col++).setValue(quote.currencyPairCode);
  sheet.getRange(last_row, col++).setValue(quote.high);
  sheet.getRange(last_row, col++).setValue(quote.low);
  sheet.getRange(last_row, col++).setValue(quote.ask);
  sheet.getRange(last_row, col++).setValue(quote.bid);
  sheet.getRange(last_row, col++).setValue(quote.open);
}
</code></pre>

<p>  }
```</p>

<p>上記をまとめると以下。
以下をコピペして実行する (▶ボタンを押す) と Google sheets に為替データが挿入される。
初回実行時に権限の確認ダイアログがでると思うが許可してあげる。</p>

<p>```javascript
// Main
function scrapeExchangeToSheet() {
  var ex_json = exchange.callExchangeAPI();
  exchange.writeSheets(ex_json);
}</p>

<p>var exchange = {
  getSheet: function() {</p>

<pre><code>if(this.getSheet.sheet) { return this.getSheet.sheet; }

var SHEET_URL = PropertiesService.getScriptProperties().getProperty('SHEET_URL');
if (!SHEET_URL) {
  throw 'You should set "SHEET_URL" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

var sheets = SpreadsheetApp.openByUrl(SHEET_URL);
this.getSheet.sheet = sheets.getActiveSheet();
return this.getSheet.sheet;
</code></pre>

<p>  },</p>

<p>  // call exchange API
  callExchangeAPI: function() {</p>

<pre><code>var now      = new Date(),
    url      = "https://www.gaitameonline.com/rateaj/getrate",
    response = UrlFetchApp.fetch(url),
    content  = response.getContentText(),
    fx       = JSON.parse(content);

fx.date = now;
return fx;
</code></pre>

<p>  },</p>

<p>  // Write exchange data (JSON) to the Google Sheet
  writeSheets: function(ex_json) {</p>

<pre><code>var sheet = this.getSheet();

// get last row to add exchange data
var last_row = sheet.getLastRow() + 1;

var col = 1;
sheet.getRange(last_row, col++).setValue(ex_json.date);

for each(var quote in ex_json.quotes) {
  sheet.getRange(last_row, col++).setValue(quote.currencyPairCode);
  sheet.getRange(last_row, col++).setValue(quote.high);
  sheet.getRange(last_row, col++).setValue(quote.low);
  sheet.getRange(last_row, col++).setValue(quote.ask);
  sheet.getRange(last_row, col++).setValue(quote.bid);
  sheet.getRange(last_row, col++).setValue(quote.open);
}
</code></pre>

<p>  }
}
```</p>

<h2>3. 上記を1分間隔で実行する。</h2>

<p>上記の処理を定期的に実行する。</p>

<p>時計マークのアイコンをクリックする。もしくは、メニュー <code>Edit</code> > <code>Current project's trigger</code> を選択する。
そうするとダイアログが出てくるので、<code>No triggers set up. Click here to add one now.</code> をクリックする。</p>

<p><code>Run</code> にはメイン処理の <code>scrapeExchangeToSheet</code>, <code>Events</code> には好きな起動時間を設定できる。
ここでは1分間隔で実行するため、<code>Time-driven : Minutes timer: Every minute</code> を選択する。</p>

<p>1分間隔で Google sheets にデータが挿入されていることが確認できる。</p>
]]></content>
  </entry>
  
</feed>
