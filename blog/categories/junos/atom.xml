<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: junos | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/junos/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2020-08-22T12:33:22+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ネットワークエンジニアのための junos.vim]]></title>
    <link href="http://momota.github.io/blog/2016/06/22/junos-dot-vim/"/>
    <updated>2016-06-22T10:57:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/06/22/junos-dot-vim</id>
    <content type="html"><![CDATA[<p>ネットワークエンジニアのみなさん、こんにちは。</p>

<p>Juniper の configuration をカラーリングする vim プラグイン
<a href="https://github.com/momota/junos.vim">momota/junos.vim</a> を作ったのでご活用下さい。</p>

<p>対象は、Juniper EX シリーズとSRX シリーズです。</p>

<p>色を付けることによって、junos configuration の解釈を手助けしたり、
configuration 作成時のミスに気づきやすくしたりする効果が期待できます。
(誤ったタームを入力すると色が付かないので)</p>

<p>以下のようにカラーリングします。 (colorscheme は molokai)</p>

<h2>before</h2>

<p><img src="/images/20160622_junos-confg_before.png" alt="display_before" /></p>

<h2>after</h2>

<p><img src="/images/20160622_junos-confg_after.png" alt="display_after" /></p>

<h2>before: <code>display set</code> モード</h2>

<p><img src="/images/20160622_junos-confg-set_before.png" alt="display-set_before" /></p>

<h2>after: <code>display set</code> モード</h2>

<p><img src="/images/20160622_junos-confg-set_after.png" alt="display-set_after" /></p>

<p>cisco 版はこちら <a href="http://momota.github.io/blog/2016/06/24/cisco-dot-vim/">ネットワークエンジニアのための cisco.vim</a></p>

<!-- more -->


<h2>インストール</h2>

<p>NeoBundle で vim プラグインを管理している人は以下の行を<code>.vimrc</code> に追加して</p>

<p><code>vim
NeoBundle 'momota/junos.vim'
</code></p>

<p><code>:NeoBundleInstall</code> でインストールする。</p>

<p>その他は、<a href="https://github.com/momota/junos.vim#installation">README/Installation</a> を参照。</p>

<h2>使い方</h2>

<p>juniper config ファイルを <code>.junos</code> という拡張子で保存して vim で開くか、
juniper config ファイルの先頭に以下行を追加して保存し vim で開くと色付けしてくれる。</p>

<p>```sh</p>

<h1>vim: set ft=junos:</h1>

<p>```</p>

<p>もしくは、juniper config ファイルを vim 開いている時に <code>:set ft=junos</code> を実行する。</p>

<h1>関連</h1>

<ul>
<li><a href="http://momota.github.io/blog/2016/06/24/cisco-dot-vim/">ネットワークエンジニアのための cisco.vim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのteraterm macro]]></title>
    <link href="http://momota.github.io/blog/2014/05/20/teraterm-macro/"/>
    <updated>2014-05-20T01:17:00+09:00</updated>
    <id>http://momota.github.io/blog/2014/05/20/teraterm-macro</id>
    <content type="html"><![CDATA[<p>先週末の5/17、teraterm マクロを初めて書いたので記念パピコ。</p>

<p>通信断時間の計測のため、わけあって急遽Cisco ルータ (892J) から継続pingを実行する必要があった。
892J のpingは、リピート回数に上限があるので、上限回数を超えた時に再度pingコマンドを叩く必要があった。
人間がpingの終わりを観察して終わったことを確認して再度実行するのは「ないわーーー」なので初めてのテラタームマクロを書いた。</p>

<!-- more -->


<p>pingが終わったら、打ち直す的な単純な処理だったら、意外と簡単に書けるので好き嫌いせず書いてみるのも悪くないと思った。</p>

<p>```vim
; &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
; Cisco ルータのpingリピート回数に上限があるので、上限回数を超えた時に
; 再度pingを実行するマクロ
; 拡張pingを実行するため、enableモードで本マクロを読み込むこと
; &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
LOOP_LIMIT = 1000</p>

<p>sendln
for i 1 LOOP_LIMIT
  call ping
next
end</p>

<p>:ping
  wait &lsquo;YOUR-ROUTER#&rsquo;
  sendln &lsquo;ping vrf VR-NAME TARGET-IP repeat 10000 timeout 1&rsquo;
return
```</p>

<p>linux/unix環境だとshell scriptでやったほうが手っ取り早いけど、ネットワーク機器みたいな特殊な環境だとteraterm macroみたいなのが便利なんだなといまさらながら思った。</p>

<p>意外に楽しくなってきたので、もっと書きたくなってきた。</p>

<p>Juniperの情報取得については、改行区切りの複数のコマンドをコピペで流し込むと出力結果の途中に入力コマンドが入り込んでしまう。プロンプトが返ってくるのを待ってから1行ずつコマンドを実行すれば本事象は回避できるので、そのようなteraterm macroを利用しているが、その中身が自分好みではなかったので書き換えてみた。</p>

<p>```vim
; &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
; commandlist.txt から1行ずつコマンドを読み込み、実行する
; &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
sendln</p>

<p>commandlist = &lsquo;./commandlist.txt&rsquo;
fileopen filehandle commandlist 0</p>

<p>while 1
  filereadln filehandle command
  if result = 1 break</p>

<p>  call wait_prompt
  sendln command
endwhile</p>

<p>fileclose filehandle
end</p>

<p>; &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
; Juniper のプロンプトを待つサブルーチン
:wait_prompt
  wait &lsquo;@YOUR-HOSTNAME>&rsquo;
return
```</p>

<p>上記、<code>.ttl</code> ファイルと同じところに <code>commandlist.txt</code> を置く。
<code>commandlist.txt</code> には実行したいコマンドを改行区切りで列挙する以下はEXシリーズのコマンド例。</p>

<p><code>
show system uptime | no-more
show version | no-more
show configuration | display set | no-more
show chassis environment | no-more
show chassis routing-engine | no-more
show virtual-chassis | no-more
show virtual-chassis vc-port | no-more
show ethernet-switching table brief | no-more
show arp | no-more
show lacp interfaces | no-more
show route | no-more
show vlans detail | no-more
show interfaces terse | no-more
show firewall | no-more
show log messages | no-more
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[junos firewall filter term 定義を挿入する方法]]></title>
    <link href="http://momota.github.io/blog/2013/09/14/junos-filter/"/>
    <updated>2013-09-14T12:36:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/09/14/junos-filter</id>
    <content type="html"><![CDATA[<p><img src="http://upload.wikimedia.org/wikipedia/en/8/86/Junos_sw_logo.jpg" alt="junos" /></p>

<p>junos の firewall filter の設定で定義の順序について。(EXシリーズを想定)</p>

<p>以下、すべてconfiguration mode での操作。</p>

<p>下記のようなフィルタがすでに設定されている場合に、<code>TERM10</code> と <code>TERM20</code> の間に <code>TERM15</code> を挿入したいことがある。フィルタは上から順に評価されるし。</p>

<p>```</p>

<h1>show | display set</h1>

<p>&hellip;
set firewall family inet filter FILTER01 term TERM10 from source-address 10.0.0.1/32
set firewall family inet filter FILTER01 term TERM10 from destination-address 192.168.1.0/24
set firewall family inet filter FILTER01 term TERM10 from tcp-established
set firewall family inet filter FILTER01 term TERM10 then accept
set firewall family inet filter FILTER01 term TERM20 then count COUNTER20
set firewall family inet filter FILTER01 term TERM20 then discard
&hellip;
```</p>

<!-- more -->


<p>単純に以下のターム定義 <code>TERM15</code> を追加で設定すると</p>

<p>```</p>

<h1>set firewall family inet filter FILTER01 term TERM15 from source-address 10.0.0.2/32</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from destination-address 192.168.1.0/24</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from protocol tcp</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from destination-port 20-21</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 then accept</h1>

<p>```</p>

<p>以下のように、意図した箇所に設定が反映されない。
つまり、10.0.0.2/32 から 192.168.1.0/24 への FTP 通信は許可されない。</p>

<p>```diff</p>

<h1>show | display set</h1>

<p>&hellip;
  set firewall family inet filter FILTER01 term TERM10 from source-address 10.0.0.1/32
  set firewall family inet filter FILTER01 term TERM10 from destination-address 192.168.1.0/24
  set firewall family inet filter FILTER01 term TERM10 from tcp-established
  set firewall family inet filter FILTER01 term TERM10 then accept
  set firewall family inet filter FILTER01 term TERM20 then count COUNTER20
  set firewall family inet filter FILTER01 term TERM20 then discard
+ set firewall family inet filter FILTER01 term TERM15 from source-address 10.0.0.2/32
+ set firewall family inet filter FILTER01 term TERM15 from destination-address 192.168.1.0/24
+ set firewall family inet filter FILTER01 term TERM15 from protocol tcp
+ set firewall family inet filter FILTER01 term TERM15 from destination-port 20-21
+ set firewall family inet filter FILTER01 term TERM15 then accept
&hellip;
```</p>

<p><code>TERM10</code> と <code>TERM20</code> の間に <code>TERM15</code> を挿入する場合は、以下のように既存定義をすべて <code>delete</code> してから新しい定義追加済みの定義を設定し直す必要があるが、ターム定義が1000くらいあるケースを想定するとそれは避けたい。</p>

<p>```</p>

<h1>delete firewall family inet filter FILTER01 term TERM10</h1>

<h1>delete firewall family inet filter FILTER01 term TERM20</h1>

<h1></h1>

<h1>set firewall family inet filter FILTER01 term TERM10 from source-address 10.0.0.1/32</h1>

<h1>set firewall family inet filter FILTER01 term TERM10 from destination-address 192.168.1.0/24</h1>

<h1>set firewall family inet filter FILTER01 term TERM10 from tcp-established</h1>

<h1>set firewall family inet filter FILTER01 term TERM10 then accept</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from source-address 10.0.0.2/32</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from destination-address 192.168.1.0/24</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from protocol tcp</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from destination-port 20-21</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 then accept</h1>

<h1>set firewall family inet filter FILTER01 term TERM20 then count COUNTER20</h1>

<h1>set firewall family inet filter FILTER01 term TERM20 then discard</h1>

<p>```</p>

<p>このようなときには <code>insert</code> を使う。以下のようにターム設定後に <code>insert</code> してあげればOK。</p>

<p>```</p>

<h1>set firewall family inet filter FILTER01 term TERM15 from source-address 10.0.0.2/32</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from destination-address 192.168.1.0/24</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from protocol tcp</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 from destination-port 20-21</h1>

<h1>set firewall family inet filter FILTER01 term TERM15 then accept</h1>

<p>#</p>

<h1>insert firewall family inet filter FILTER01 term TERM15 after term TERM_10</h1>

<p>```</p>

<p>そうすると、以下のように意図したとおり定義できる。</p>

<p>```diff</p>

<h1>show | display set</h1>

<p>&hellip;
  set firewall family inet filter FILTER01 term TERM10 from source-address 10.0.0.1/32
  set firewall family inet filter FILTER01 term TERM10 from destination-address 192.168.1.0/24
  set firewall family inet filter FILTER01 term TERM10 from tcp-established
  set firewall family inet filter FILTER01 term TERM10 then accept
+ set firewall family inet filter FILTER01 term TERM15 from source-address 10.0.0.2/32
+ set firewall family inet filter FILTER01 term TERM15 from destination-address 192.168.1.0/24
+ set firewall family inet filter FILTER01 term TERM15 from protocol tcp
+ set firewall family inet filter FILTER01 term TERM15 from destination-port 20-21
+ set firewall family inet filter FILTER01 term TERM15 then accept
  set firewall family inet filter FILTER01 term TERM20 then count COUNTER20
  set firewall family inet filter FILTER01 term TERM20 then discard
```</p>
]]></content>
  </entry>
  
</feed>
