<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2016-06-22T11:33:48+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RuboCop でコーディングスタイルを矯正する]]></title>
    <link href="http://momota.github.io/blog/2016/06/17/rubocop/"/>
    <updated>2016-06-17T17:30:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/06/17/rubocop</id>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/bbatsov/rubocop/master/logo/rubo-logo-horizontal.png" alt="RuboCop Logo" /></p>

<p><a href="http://note103.hateblo.jp/entry/2016/06/13/074744">textlintで日本語テキストの文字校正を試してみた</a> とかで、lint 系の記事を目にしたので
そろそろ導入してみるか、と思い立った。</p>

<p>RuboCop はRuby の静的コードアナライザ。
<a href="https://github.com/bbatsov/rubocop">bbatsov/rubocop</a></p>

<p><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide</a> に沿ったコーディングスタイルに矯正(注意)してくれる。
無駄なスペースが入力されている、とか、無駄な改行が入っている、とか、
この変数1度も使われてないよ?とかクラスの中の行数が多すぎる、とか、
1行の文字数が長すぎる、とか。</p>

<p>大人数で開発していると細かなコーディングスタイルを合わせるだけでも面倒なので
こういうツールによって人間が矯正されると AI 時代に思いを馳せることができて良い感じですね。</p>

<!-- more -->


<h2>RuboCop インストール</h2>

<p>gem でインストールする。</p>

<p><code>sh
$ gem install rubocop
$ rubocop -v
0.40.0
</code></p>

<p>実行は<code>rubocop</code> コマンドにチェックしたいスクリプトを渡す。
例えば、以下のような Ruby スクリプトを</p>

<p>```ruby</p>

<h1>conding: utf-8</h1>

<p>require &ldquo;date&rdquo;</p>

<p>class SampleRubocop
  def initialize( key )</p>

<pre><code>@key = key
</code></pre>

<p>  end</p>

<p>  def hey</p>

<pre><code>@key
</code></pre>

<p>  end
end</p>

<p>if <strong>FILE</strong> == $0
  hoge = SampleRubocop.new(&ldquo;hoge&rdquo;)
  p hoge.hey
end</p>

<p>```</p>

<p>RuboCop でチェックすると以下のような感じで注意を受ける。</p>

<p>```
$ rubocop sample_rubocop.rb
Inspecting 1 file
C</p>

<p>Offenses:</p>

<p>sample_rubocop.rb:2:9: C: Prefer single-quoted strings when you don&rsquo;t need string interpolation or special symbols.
require &ldquo;date&rdquo;</p>

<pre><code>    ^^^^^^
</code></pre>

<p>sample_rubocop.rb:4:1: C: Extra blank line detected.
sample_rubocop.rb:5:1: C: Missing top-level class documentation comment.
class SampleRubocop
^^^^^
sample_rubocop.rb:6:18: C: Space inside parentheses detected.
  def initialize( key )</p>

<pre><code>             ^
</code></pre>

<p>sample_rubocop.rb:6:22: C: Space inside parentheses detected.
  def initialize( key )</p>

<pre><code>                 ^
</code></pre>

<p>sample_rubocop.rb:15:1: C: Extra blank line detected.
sample_rubocop.rb:16:16: C: Prefer $PROGRAM_NAME over $0.
if <strong>FILE</strong> == $0</p>

<pre><code>           ^^
</code></pre>

<p>sample_rubocop.rb:17:28: C: Prefer single-quoted strings when you don&rsquo;t need string interpolation or special symbols.
  hoge = SampleRubocop.new(&ldquo;hoge&rdquo;)</p>

<pre><code>                       ^^^^^^
</code></pre>

<p>sample_rubocop.rb:20:1: C: 1 trailing blank lines detected.
```</p>

<p>無駄な改行とかスペースを注意されていますね。修正しましょう。</p>

<p><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide</a> が自分(たち) の
コーディングスタイルに合わない場合は、カスタマイズが可能。
<code>.rubocop.yml</code> を編集する。</p>

<p>いったん、今書いているものを正しいコーディングスタイルとみなした <code>.rubocop.yml</code> を生成するには
<code>--auto-gen-config</code> オプションをつけて rubocop を実行する。</p>

<p>```sh
$ cd /path/to/project
$ rubocop &mdash;auto-gen-config</p>

<h1>=> /path/to/project/.rubocp_todo.yml が出力される</h1>

<p>```</p>

<p>上記コマンドにより、プロジェクトディレクトリ(/path/to/project)配下のコードが解析されて、cop と
呼ばれるルール群が <code>.rubocp_todo.yml</code> というファイルで出力される。
<code>.rubocp_todo.yml</code> の中身は、以下のように cop 単位にそのプロジェクトに沿った設定が入ったものが
出力されている。</p>

<p>以下は、出力された <code>.rubocp_todo.yml</code> の一部を抜粋。</p>

<p>```yml
#</p>

<h1>&mdash; snip &mdash;</h1>

<p>#</p>

<h1>Offense count: 113</h1>

<h1>Configuration parameters: AllowHeredoc, AllowURI, URISchemes.</h1>

<h1>URISchemes: http, https</h1>

<p>Metrics/LineLength:
  Max: 137
#</p>

<h1>&mdash; snip &mdash;</h1>

<p>#
```</p>

<p>上記は、以下を示している。</p>

<ul>
<li>デフォルト 1 行 80 文字までがコーディング規約となっているが最大 137 文字の行がある

<ul>
<li>1 行あたり最大 137 文字まで許容する、という設定</li>
</ul>
</li>
<li>1 行 80 文字以上 (違反: offense) に該当する箇所が 113 件</li>
</ul>


<p><code>.rubocp_todo.yml</code> の修正不可能・修正困難部分のみを残したりチューニングして、<code>.rubocop.yml</code> に
リネームしたら自分たちのコーディングスタイルに沿った現実的なルールを適用できる。</p>

<p>標準のコーディング規約に沿ってコードを修正していく場合は、<code>.rubocop.yml</code> に以下の行を追加するか</p>

<p><code>yml
inherit_from: .rubocop-todo.yml
</code></p>

<p><code>rubocop --config .rubocop_todo.yml</code> を実行して、違反をつぶしていく。</p>

<p>コードの自動修正機能もある。
<code>.rubocop_todo.yml</code> に <code># Cop supports --auto-correct.</code> と記述されている cop については、以下の
コマンドにより自動修正が可能。</p>

<p>```sh
$ rubocop -a</p>

<h1>$ rubocop &mdash;auto-correct でもOK</h1>

<p>```</p>

<h2>vim と RuboCop を連携する</h2>

<p>コーディングしながら RuboCop に注意されたいので、vim と連携する。</p>

<p>vim プラグインの <a href="https://github.com/scrooloose/syntastic">scrooloose/syntastic</a> を入れる。</p>

<p>NeoBundle を使っているので、手持ちの <code>vimrc</code> を以下のように修正し、<code>:NeoBundleInstall</code> してインストールする。</p>

<p>```diff
+ NeoBundle &lsquo;scrooloose/syntastic&rsquo;</p>

<ul>
<li>&ldquo; &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</li>
<li>&ldquo; syntastic</li>
<li>let g:syntastic_mode_map = { &lsquo;mode&rsquo;: &lsquo;active&rsquo; }</li>
<li>let g:syntastic_ruby_checkers = [&lsquo;rubocop&rsquo;]
```</li>
</ul>


<p>そうすると、<code>:SyntaxCheck</code> を実行するか、保存<code>:w</code> のタイミングで RuboCop が動いてくれる。
以下のように指摘してくれる。</p>

<p><img src="/images/syntastic_ss.png" alt="syntastic_ss" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[seleniumノウハウ]]></title>
    <link href="http://momota.github.io/blog/2016/05/28/selenium-know-how/"/>
    <updated>2016-05-28T16:57:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/05/28/selenium-know-how</id>
    <content type="html"><![CDATA[<p><img src="/images/selenium.png" alt="selenium" /></p>

<p><a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a> でも書いたが、
selenium が便利すぎて、最近よくスクリプトを書くようになった。</p>

<p>以下のようなノウハウが溜まってきたので、ここらで放出する。</p>

<ul>
<li>ウィンドウサイズのリサイズ</li>
<li>ウィンドウ位置の移動</li>
<li>スクリーンショットの取得</li>
<li>要素セレクタメソッドの使い分け</li>
<li>ドロップダウンリストの選択</li>
<li>マウスオーバ (hover)</li>
<li>フレーム移動</li>
<li>ポップアップダイアログの扱い</li>
<li>コード量を減らすためのモンキーパッチ</li>
<li>よく採るプログラム構造</li>
</ul>


<p>インストール方法などは <a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a>
を参照。</p>

<p>selenium用スクリプト開発のノウハウというべきかコツといういべきかアレな感じだが、結局、
スクレイピングと同様にHTML構造を理解することが必要なのでブラウザ付属の開発ツールが
手離せない。</p>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Tools">Firefox 開発ツール</a></li>
<li><a href="https://developer.chrome.com/devtools">chrome devtools</a></li>
</ul>


<!-- more -->


<p>これ以降のサンプルコードは以下を定義しているものとする。
```ruby
require &ldquo;selenium-webdriver&rdquo;</p>

<p>driver = Selenium::WebDriver.for :firefox
```</p>

<h2>ウィンドウサイズのリサイズ</h2>

<p><code>driver.manage.window.resize_to</code>の引数にリサイズするサイズ情報(width, height)を渡す。</p>

<p><code>ruby
width  = 100
height = 100
driver.manage.window.resize_to(width, height)
</code></p>

<p>現在のサイズを取得して、相対的にリサイズしたい場合は以下のようにする。</p>

<p><code>ruby
size = driver.manage.window.size
size.width  += 100
size.height += 100
driver.manage.window.size = size
</code></p>

<h2>ウィンドウ位置の移動</h2>

<p><code>driver.manage.window.move_to</code>の引数に移動したい場所の座標情報(x, y)を渡す。</p>

<p><code>ruby
x = 100
y = 100
driver.manage.window.move_to(x, y)
</code></p>

<p>現在のウィンドウ位置を取得して、相対的にリサイズしたい場合は以下のようにする。</p>

<p><code>ruby
pos = driver.manage.window.position
pos.x += 100
pos.y += 100
driver.manage.window.position = pos
</code></p>

<h2>スクリーンショットの取得</h2>

<p>開いているページのスクリーンショットを撮りたい場合は、<code>driver.save_screenshot</code> に保存先のファイル名を指定するだけ。</p>

<p><code>ruby
driver.get("https://www.google.co.jp/")
driver.save_screenshot("/path/to/save/screenshot.png")
</code></p>

<p>ページ全体を撮りたいのに、frame 構造が邪魔をして、スクロールしなければ全体が撮れない場合がある。
ちょっと、調べたところ <code>driver.execute_script("some script")</code> で javascript を利用してスクロールをしている人がいたり、
<code>Selenium::WebDriver::Element.location_once_scrolled_into_view</code> を使ってスクロールしている人がいたり。
どちらにしても、コンテンツ表示上の高さを取得して、1スクロール分の長さをデクリメントしていっているような処理。</p>

<p>自分の場合は、めんどくさかったので、上述したリサイズ方法を使ってスクロールがいらないくらいウィンドウサイズを大きくして、
スクリーンショットを撮るという荒業を繰り広げている。</p>

<h2>要素セレクタメソッドの使い分け</h2>

<p>要素セレクタメソッドは <code>find_element</code> と <code>find_elements</code> の2種類。
そのメソッド名の単数形・複数形の通りなのだが、以下のような違いがある</p>

<ul>
<li><code>find_element</code>

<ul>
<li>指定した引数にマッチする最初の要素 (<code>WebDriver::Element</code>) を <strong>1つ</strong> 返す。</li>
<li>マッチする要素がなければ例外 (<code>NoSuchElementError</code>) を投げる。</li>
</ul>
</li>
<li><code>find_elements</code>

<ul>
<li>指定した引数にマッチする要素を詰めた配列 (<code>Array&lt;WebDriver::Element&gt;</code>) を返す。</li>
<li>マッチする要素がなければ、空の配列 (<code>Array</code>) を返す。</li>
</ul>
</li>
</ul>


<p>テーブルの <code>&lt;tr&gt;</code> 要素やリストの <code>&lt;li&gt;</code> 要素に対してイテレーション処理するときには <code>find_elements</code> が便利。
以下は、例。</p>

<p>```ruby</p>

<h1>リストのリンクをクリックしていくイテレーションの例</h1>

<p>elements = driver.find_elements(:css, &ldquo;#some-list > li&rdquo;)
elements.each { |e|
  link = e.find_element(:tag_name, &ldquo;a&rdquo;)
  link.click
}
```</p>

<p>要素セレクタメソッドの引数には、<code>find_element(:how, "what")</code> のように symbol と文字列を渡す。
渡す引数は、<code>find_elements</code> も同じ。</p>

<p>指定できるsymbolの種類は以下。</p>

<table>
<thead>
<tr>
<th>symbol             </th>
<th> 対象</th>
</tr>
</thead>
<tbody>
<tr>
<td>:class             </td>
<td> クラス名 (属性名 class)</td>
</tr>
<tr>
<td>:class_name        </td>
<td> 上記 :class と同じ</td>
</tr>
<tr>
<td>:id                </td>
<td> ID (属性名 id)</td>
</tr>
<tr>
<td>:link_text         </td>
<td> <code>&lt;a&gt;</code> タグのテキスト</td>
</tr>
<tr>
<td>:link              </td>
<td> 上記 :link_text と同じ</td>
</tr>
<tr>
<td>:partial_link_text </td>
<td> <code>&lt;a&gt;</code> タグのテキストの部分文字列</td>
</tr>
<tr>
<td>:name              </td>
<td> name (属性名 name)</td>
</tr>
<tr>
<td>:tag_name          </td>
<td> タグ名</td>
</tr>
<tr>
<td>:xpath             </td>
<td> xpath で指定</td>
</tr>
<tr>
<td>:css               </td>
<td> css セレクタ で指定</td>
</tr>
</tbody>
</table>


<p><a href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Find">参考 Module: Selenium::WebDriver::Find</a></p>

<h2>ドロップダウンリストの選択</h2>

<p>Selenium IDEでRubyコードの出力をしようとすると、ドロップダウンリストの選択をする処理部分がERRORに
なってコメントアウトされることがある。(今のSelenium IDEバージョンでは大丈夫そう)</p>

<p>ドロップダウンリストの選択は以下のように書けばOK。</p>

<p>```ruby
s = Selenium::WebDriver::Support::Select.new(driver.find_element(:tag_name, &ldquo;select&rdquo;))
s.select_by(:text, &ldquo;ほげほげ&rdquo;)  # 表示テキストで選択
s.select_by(:value, &ldquo;value1&rdquo;)   # valueの値で選択
s.select_by(:index, 0)          # index(0, 1, 2, &hellip;)で選択</p>

<p>```</p>

<h2>マウスオーバ (hover)</h2>

<p>例えば、ナビゲーションメニューなどが、通常時には折りたたまれていて、メニュー上にマウスオーバした場合に、
子メニューが展開されるようなページがある。
折りたたまれているときに、子メニューHTMLをロードできていないようなページのときは、ユーザ操作と同じように
マウスオーバしてあげる必要がある。</p>

<p>以下のようにマウスオーバしたい要素を指定して、<code>driver.mouse.move_to</code> を呼べば良い。</p>

<p><code>ruby
e = driver.find_element(:id, "menu")
driver.mouse.move_to( e )
</code></p>

<h2>フレーム移動</h2>

<p>frame や iframe 要素を使っているサイトで、そのフレーム内の要素に対して操作したい場合、当該フレームへ切り替える操作が必要となる。</p>

<p>以下のようにスイッチしたいフレーム要素を指定して、<code>driver.switch_to.frame</code> を呼べば良い。</p>

<p><code>ruby
frame = driver.find_element(:id, "frame")
driver.switch_to.frame( frame )
</code></p>

<p>フレームを移動してから、いったん最上位のフレームにに戻りたい場合は、以下。</p>

<p>```ruby
driver.switch_to.window( driver.window_handle )</p>

<p>frame = driver.find_element(:id, &ldquo;top-frame&rdquo;)
driver.switch_to.frame( frame )
```</p>

<h2>ポップアップダイアログの扱い</h2>

<p>「マジでこのページから移動する?」的なjavascriptによるポップアップダイアログを表示するページがある。
このポップアップダイアログを強制的に閉じるには以下のようにする。</p>

<p><code>.accept</code> ではい、<code>.dismiss</code>でいいえを押して閉じる。</p>

<p><code>ruby
begin
  alert_box = driver.switch_to.alert
  alert_box.accept     # 「はい」「OK」ボタンクリック
  # alert_box.dismiss  # 「いいえ」「cancel」ボタンクリック
rescue Selenium::WebDriver::Error::NoSuchAlertError =&gt; e
  # ダイアログがポップアップしない場合、例外を投げるので、何もせずにスルー
end
</code></p>

<h2>コード量を減らすためのモンキーパッチ</h2>

<p>たとえば、ログインなどの処理の際、フォームへ文字列を送る <code>send_keys</code> 前にいつも <code>.clear</code> しているので
もう <code>send_keys</code> の中に <code>.clear</code> 処理を入れ込んでしまえと思った。</p>

<p>また、<code>input</code> タグの値を取得するときは、<code>.attribute("value")</code> と長ったらしく書く必要があるので <code>.value</code>メソッドを
定義してしまおうと思った。checkbox のチェック有無も同じく。</p>

<p>そこで、<code>Selenium::WebDriver::Element</code> を拡張するため、以下のようなモンキーパッチを書く。</p>

<p>```ruby
module ElementExtension
  refine Selenium::WebDriver::Element do</p>

<pre><code>def send_keys( str )
  self.clear
  super( str )
end

def value
  self.attribute("value")
end

def checked?
  self.attribute("checked").nil? ? false : true
end
</code></pre>

<p>  end
end</p>

<p>using ElementExtension
```</p>

<p>そうすると以下のようにコード量を減らせる。</p>

<p>```diff</p>

<h1>たとえば、ログイン処理</h1>

<p>user     = &ldquo;USER&rdquo;
password = &ldquo;PASSWORD&rdquo;</p>

<ul>
<li>driver.find_element(:id, &ldquo;loginuser&rdquo;).clear
driver.find_element(:id, &ldquo;loginuser&rdquo;).send_keys( user )</li>
<li>driver.find_element(:id, &ldquo;loginpass&rdquo;).clear
driver.find_element(:id, &ldquo;loginpass&rdquo;).send_keys( password )
driver.find_element(:id, &ldquo;submit&rdquo;).click</li>
</ul>


<h1><input>の値を取得する処理</h1>

<ul>
<li>hostname = driver.find_element(:id, &ldquo;hostname&rdquo;).attribute(&ldquo;value&rdquo;)</li>
<li>hostname = driver.find_element(:id, &ldquo;hostname&rdquo;).value</li>
</ul>


<h1>チェックボックスがチェックされているかどうか</h1>

<p>checkbox = driver.find_element(:id, &ldquo;some-checkbox&rdquo;)
&ndash; do_something if checkbox.attribute(&ldquo;checked&rdquo;).nil?
+ do_something if checkbox.checked?
```</p>

<p>モンキーパッチの書き方は以下を参考にした。</p>

<ul>
<li><a href="http://melborne.github.io/2013/08/30/monkey-patching-for-prudent-rubyists/">分別のあるRubyモンキーパッチャーになるために</a></li>
</ul>


<h2>よく採るプログラム構造</h2>

<p>よく採るプログラム構造は以下。</p>

<ul>
<li>操作ターゲットとなるサイト単位にクラスを作る</li>
<li>処理の内容にしたがって、メソッドを作る。以下の様な粒度。

<ul>
<li>サインイン</li>
<li>リスト表示</li>
<li>自動入力と申請</li>
</ul>
</li>
<li>アカウント情報や入力データはYAMLファイルなどに書き出しておく</li>
</ul>


<p>```ruby</p>

<h1>conding: utf-8</h1>

<p>require &ldquo;selenium-webdriver&rdquo;</p>

<h1>その他必要に応じてrequire</h1>

<h1>Selenium::WebDriver::Element の拡張</h1>

<p>module Elementextension
  # 上記モンキーパッチの章を参照
end
using Elementextension</p>

<h1>本体</h1>

<p>class SomeSite
  def initialize</p>

<pre><code># 初期化処理
# 定数をセットしたり、webdriverを生成してアクセスしたり。
@ss_dir  = "./screenshot/"
FileUtils.mkdir_p( @ss_dir ) 

@driver  = Selenium::WebDriver.for :firefox
base_url = "http://somesite.com"
@driver.get(base_url + "/index.html")
</code></pre>

<p>  end</p>

<p>  def sign_in(user, password)</p>

<pre><code># サインイン処理
</code></pre>

<p>  end</p>

<p>  def do_something</p>

<pre><code># やりたいことを書く
</code></pre>

<p>  end</p>

<p>  def close</p>

<pre><code># 終了時に実行する処理を書く
</code></pre>

<p>  end</p>

<p>  private
  # privat method を定義する
  def get_screenshot( str )</p>

<pre><code>now = DateTime.now.strftime("%Y%m%d%H%M%S")
@driver.save_screenshot(@ss_dir + "_" + str + "_" + now + ".png")
</code></pre>

<p>  end
end</p>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h1>

<h1>main</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h1>

<p>if <strong>FILE</strong> == $0
  # サインインに必要なアカウント情報はYAMLなどに書いておいて、それを読む
  y        = YAML.load_file(&ldquo;/path/to/yaml.yml&rdquo;)
  user     =  y[&ldquo;account&rdquo;][&ldquo;user&rdquo;]
  password =  y[&ldquo;account&rdquo;][&ldquo;password&rdquo;]</p>

<p>  hoge = SomeSite.new
  hoge.sign_in(user, password)
  hoge.do_something
  hoge.close
end
```</p>

<h2>関連</h2>

<ul>
<li><a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザ操作の自動化: selenium と ruby]]></title>
    <link href="http://momota.github.io/blog/2016/02/26/selenium/"/>
    <updated>2016-02-26T10:41:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/02/26/selenium</id>
    <content type="html"><![CDATA[<p>selenium と ruby を使ってブラウザ GUI 操作を自動化する。</p>

<p><a href="http://www.seleniumhq.org/">selenium</a> は、Web アプリケーションの自動テストのためのツール。
レグレッションテストによく使われているようだ。</p>

<p>selenium は、ブラウザ操作シナリオを事前に設定して、シナリオ通りに実行してくれる。
シナリオ設定といっても、Firefoxプラグインの Selenium IDE などを使うと操作を
記録してくれる機能があるのでそこまで大変ではない。
詳細は、<a href="http://www.ruby.or.jp/ja/tech/development_tool/reg_test/">Ruby アソシエーション &ndash; selenium</a> の &ldquo;1.2 テストの作成&rdquo;
あたりを参照してほしい</p>

<p>selenium は、クロスブラウザのツールで、IE を使って IE限定みたいなサイトでも使える。
IE や Chrome で使うには各 Selenium WebDriver が必要となる。</p>

<p>テスト用と言いつつ、使い道はいろいろとある。</p>

<ul>
<li>社内のもろもろの web 申請は、入力項目が多いのに、毎回ほぼ同じ内容を入力させるので
フォーム入力の省力化として利用している。</li>
<li>hp さんの iLO や日立さんストレージ、F5 さんのBIG-IP みたいな web 画面から設定変更するような機器の
自動構築なんかもできそう。

<ul>
<li>スクリーンショットも撮れるので、エビデンスもついでに取得可能。</li>
<li>vCenter とかも操作できないかという思惑はある。</li>
<li>AWS とかも操作できるけど、そもそも API が豊富に備わっているから不要か。</li>
</ul>
</li>
<li>あえて selenium を使わなくてもいいけど、クローリングやスクレイピングとかもできる</li>
</ul>


<p>この selenium は、Java や Python, Ruby などのプログラミング言語からシナリオ操作が可能で
ループ処理などするにはめちゃくちゃ便利。</p>

<p>いままでは Firefox プラグインだけで利用していたが、Ruby と絡めると便利すぎて感謝しかなかった。
ここでは、サンプルとして、はてなブックマークのホットエントリトップ5を一括で開くことを
やってみたい。</p>

<p>ちなみに似たツールに iMacro がある。</p>

<p>関連記事: <a href="http://momota.github.io/blog/2016/05/28/selenium-know-how/">seleniumノウハウ</a></p>

<!-- more -->


<p>環境は、以下。</p>

<table>
<thead>
<tr>
<th>モノ         </th>
<th> バージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td>OS           </td>
<td> Windows 8.1 Pro</td>
</tr>
<tr>
<td>ブラウザ     </td>
<td> Firefox ESR 38.6.1</td>
</tr>
<tr>
<td>Selenium IDE </td>
<td> 2.9.0</td>
</tr>
<tr>
<td>Ruby         </td>
<td> 2.2.4p230 (2015-12-16 revision 53155) [x64-mingw32]</td>
</tr>
<tr>
<td>gem          </td>
<td> selenium-webdriver (2.52.0)</td>
</tr>
</tbody>
</table>


<h1>準備</h1>

<p>Windows に Rubyをインストールする。</p>

<p><a href="http://rubyinstaller.org/downloads/">RubyInstaller</a> の RubyInstallers からインストーラをダウンロードし、実行する。
インストール時、 PATH を通すチェックボックスにチェックを入れる。</p>

<p>続いてDevelopment Kitをインストールする。<a href="http://www.rubylife.jp/railsinstall/rails/index4.html">この辺を参考に。</a>
これも RubyInstaller の Development Kit からダウンロードして、解凍する。
解答したファイルに <code>dk.rb</code> があるのでコマンドプロンプトから以下のように実行する。</p>

<p>```sh</p>

<blockquote><p>cd {DEVELOPMENT KIT の解凍ディレクトリ}
ruby dk.rb init
ruby dk.rb install
```</p></blockquote>

<p>次に、<code>selenium-webdriver</code> をインストールする。
Ruby をインストールしたことで、一緒に gem も使えるようになっているはずなので、
コマンドプロンプトから以下を打鍵。</p>

<p>```sh</p>

<blockquote><p>gem install selenium-webdriver
```</p></blockquote>

<p>インストールの確認。irb (もしくは pry) とかで require できることを確認する。</p>

<p>```sh</p>

<blockquote><p>irb
irb(main):001:0> require &ldquo;selenium-webdriver&rdquo;
=> true
```</p></blockquote>

<h1>はてなホットエントリのトップ5エントリーを開く</h1>

<p>ここではサンプルとして、はてなブックマークのホットエントリからトップ5 をブラウザで
次々に開くよう <code>hatena.rb</code> を書く。</p>

<p>```ruby
require &ldquo;selenium-webdriver&rdquo;</p>

<p>class Hatena
  def initialize</p>

<pre><code># ブラウザの起動
@driver = Selenium::WebDriver.for :firefox

# ベース URL
@base_url = "http://b.hatena.ne.jp"
</code></pre>

<p>  end</p>

<p>  def open_top5</p>

<pre><code># ベースURL を開く
@driver.get(@base_url + "/hotentry")

# CSS セレクタで要素を特定してクリックする
5.times { |i|
  @driver.find_element(:css, "a[data-entryrank='#{i + 1}']").click
  sleep 1
}
</code></pre>

<p>  end
end</p>

<p>if <strong>FILE</strong> == $0
  hatena = Hatena.new
  hatena.open_top5
end
```</p>

<p>コマンドプロンプトからこのスクリプトを実行すると次々とブラウザが起動してくる。
```sh</p>

<blockquote><p>ruby hatena.rb
```</p></blockquote>

<p>こんな感じ。</p>

<p><img src="/images/20160226_selenium.gif" alt="hatena_screenshot" /></p>

<p><code>find_element</code> メソッドは、CSSセレクタやxpath、タグ名、タグのID、class名などを指定できる。</p>

<p>フォームになにか値を突っ込みたいときは、<code>@driver.find_element(~~~~~).send_keys "VALUE"</code> みたいな感じで
要素を特定したあと、<code>send_keys</code> で文字列を渡してあげればよい。
POST は、ボタンを find_element してあげて<code>.click</code> (<code>.submit</code> でも良さ気) でOK。</p>

<p>スクリーンショットを撮るときは、<code>@driver.save_screenshot "./screenshot.png"</code> みたいな感じ。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.ruby.or.jp/ja/tech/development_tool/reg_test/">Ruby アソシエーション &ndash; selenium</a></li>
<li><a href="http://qiita.com/kkakizaki/items/5a0e6f753193f2a1514f">Selenium 入門 &ndash; Qiita</a></li>
<li>関連記事: <a href="http://momota.github.io/blog/2016/05/28/selenium-know-how/">seleniumノウハウ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lita で Slack Bot (on heroku) をつくる]]></title>
    <link href="http://momota.github.io/blog/2015/01/11/lita/"/>
    <updated>2015-01-11T21:36:00+09:00</updated>
    <id>http://momota.github.io/blog/2015/01/11/lita</id>
    <content type="html"><![CDATA[<p><img src="https://www.lita.io/assets/lita-94f070fbb79e8ec62cc7a21ca39f8448.png" alt="lita" /></p>

<p>チャットツール <a href="https://slack.com/">slack</a> に常駐する bot をつくったので、そのときの導入メモ。
bot 開発には <a href="https://www.lita.io/">lita</a> を利用した。lita は Ruby で書かれた chat bot フレームワーク。hubot にインスパイアされて開発されたようだ。
js (coffee script) よりも ruby のほうがとっつきやすかったので採用した。</p>

<p>環境は、ubuntu 14.04, ruby 2.1.5, lita 4.0.4.</p>

<p>ゆくゆくは、<a href="http://www.amazon.co.jp/gp/product/B00H91KK26/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00H91KK26&amp;linkCode=as2&amp;tag=mmtmkt-22">iRKit</a> とか使って家電と連携したりしたい。</p>

<!-- more  -->


<p><img src="https://dl.dropboxusercontent.com/u/28495046/octopress/20150111_lita/lita.png" alt="network" /></p>

<p>今回の構成図を上記に示す。</p>

<h2>1. 事前準備: もろもろインストールする</h2>

<h3>1.1 lita をインストール</h3>

<p>lita は gem でインストールできる。</p>

<p><code>sh
$ gem install lita
</code></p>

<h3>1.2 redis をインストール</h3>

<p>lita はデータ永続化ストレージとして redis を使うことが前提となっている。
つまり、ローカル環境で lita を実行するには(開発するには)、redis が必要なため、redis をインストールする。</p>

<p><code>sh
$ sudo apt-get update
$ sudo apt-get install redis-server
</code></p>

<p>redis を起動する。</p>

<p>```sh
$ sudo service redis-server start
$ sudo service redis-server status</p>

<h1>=> redis の起動状態確認</h1>

<h1>=> ps aux | grep redis とかで確認してもいい</h1>

<p>```</p>

<h2>2. lita プロジェクト作成、起動</h2>

<p>lita プロジェクト"sample"を作成する。</p>

<p>```sh
$ lita new sample</p>

<h1>=> sample ディレクトリが生成される</h1>

<p>$ cd sample
```</p>

<p>ruby のバージョンを rbenv で指定しておく。</p>

<p><code>sh
$ rbenv local 2.1.5
$ rbenv rehash
$ ruby -v
</code></p>

<p>bundler でインストールする。</p>

<p><code>
$ bundle install --path vendor/bundle
</code></p>

<p><code>lita start</code> で lita をローカル環境で起動してみる。
<code>lita help</code> で返ってくればOK。</p>

<p><code>sh
$ bundle exec lita start
Type "exit" or "quit" to end the session.
Lita &gt; lita info
Lita 4.0.4 - https://www.lita.io/
Redis 2.8.4 - Memory used: 414.04K
Lita &gt; lita help
Lita: help - Lists help information for terms and command the robot will respond to.
Lita: help COMMAND - Lists help information for terms or commands that begin with COMMAND.
Lita: info - Replies with the current version of Lita.
Lita &gt; exit
$
</code></p>

<p><a href="https://www.lita.io/plugins">lita プラグイン</a> もたくさんあるので、適当に <code>Gemfile</code> に追加して <code>bundle install</code> するとよい。</p>

<h2>3. herokuへデプロイして Slack と連携する</h2>

<p>lita bot を heroku へデプロイする。
また、アダプタ <a href="https://github.com/kenjij/lita-slack">lita-slack</a> を利用して Slack と連携する。</p>

<h3>3.1 事前準備</h3>

<p>heroku へのデプロイは、git push して行うので、git でバージョン管理を開始する。</p>

<p><code>sh
$ git init
$ git add .
$ git commit -m "first commit"
</code></p>

<p>heroku で ruby バージョンを指定するには、<code>Gemfile</code>で<code>ruby "VERSION"</code>と記述する。
また、Slack と連携するため、<code>lita-slack</code> アダプタもインストールする。
この時点で、<code>Gemfile</code>は以下の通り。</p>

<p>```ruby
source &ldquo;<a href="https://rubygems.org">https://rubygems.org</a>&rdquo;
ruby &ldquo;2.1.5&rdquo;</p>

<p>gem &ldquo;lita&rdquo;
gem &ldquo;lita-slack&rdquo;
```</p>

<p>bundler でインストールする。</p>

<p><code>sh
$ bundle install --path vendor/bundle
</code></p>

<p>slack とつなげたり、Redis To Go を利用するために、<code>lita_config.rb</code> を以下のように修正する。</p>

<p>```ruby
Lita.configure do |config|
  config.robot.name      = &ldquo;lita&rdquo;
  config.robot.log_level = :info</p>

<p>  # アダプタの指定。Slack とつなげるので、:slack と修正する
  config.robot.adapter   = :slack</p>

<p>  # Slack のAPIキーを指定する
  # 後述する heoku コマンドで heroku の環境変数を設定する
  config.adapters.slack.token = ENV[&ldquo;SLACK_API_KEY&rdquo;]</p>

<p>  # heroku の redis アドオン Redis To Go 関連の設定
  config.redis[:url] = ENV[&ldquo;REDISTOGO_URL&rdquo;]
  config.http.port   = ENV[&ldquo;PORT&rdquo;]
end
```</p>

<p>heroku でのアプリケーション起動には foreman でのアプリケーション起動が必要となる。
以下の <code>Procfile</code> を作成する。</p>

<p><code>ruby
web: bundle exec lita
</code></p>

<h3>3.2 heroku の設定</h3>

<p>新規に heroku アプリケーションを作成する。
ここでは、<code>lita-sample</code> という名前にした。</p>

<p><code>sh
$ heroku apps:create lita-sample
</code></p>

<p>heroku の redis アドオン Redis To Go をアプリケーションへ追加する。
事前に heroku へクレジットカードの登録が必要。</p>

<p><code>sh
$ heroku addons:add redistogo --app lita-sample
</code></p>

<p>heroku の環境変数を設定する。
設定するのは、Slack APIキーのみでOK。
Slack API キーは、<a href="https://YOUR-DOMAIN.slack.com/services/new/lita">https://YOUR-DOMAIN.slack.com/services/new/lita</a> から Integration の設定をしたら入手可能。</p>

<p><code>REDISTOGO_URL</code> などは、アドオン追加時に自動で設定されている。</p>

<p>```sh
$ heroku config:set SLACK_API_KEY=&ldquo;your-slack-api-key&rdquo;
$ heroku config</p>

<h1>=> heroku 上で設定されている環境変数が出力されるので正しく設定されているか確認する</h1>

<p>```</p>

<h3>3.3 heroku へデプロイする</h3>

<p>git commit して git push してあげる。
そうすると heoku アプリケーションが起動する。</p>

<p><code>sh
$ git commit -m "make it better"
$ git push heroku master
</code></p>

<p>Slack に lita さんが見えるはずなので 適当なチャンネルに招待して <code>@lita help</code> とか声をかけると答えてくれる。</p>

<h3>3.4 heroku アプリケーションをたたき起こす</h3>

<p>heroku を無料で使う 1 web dyno (webサーバインスタンス) のときは、1時間アクセスがないとアプリケーションがスリープする。つまり、せっかくデプロイした bot も眠ってしまうため、定期的にhttpアクセスさせてたたき起こしておく。
なお、<code>lita-cron</code> で bot に定期的に投稿させてもだめだったので、heroku アプリケーションへの http アクセスが必要なもよう。</p>

<p>定期的な http アクセスには <a href="http://uptimerobot.com/">Uptime Robot</a> を利用した。</p>

<h2>4. handler 作成</h2>

<p>以下のように handler のひな形を生成する。
<code>lita-</code> というプレフィックスが自動で付与される。</p>

<p>```sh
$ mkdir handlers
$ cd handlers
$ bundle exec lita hello_handler</p>

<h1>=> lita-hello_handler ディレクトリが生成される</h1>

<p>```</p>

<p><code>handlers/lita-hello_handler/lib/lita/handlers/hello_hundler.rb</code> を修正する。
<code>route</code> で正規表現にマッチした場合の処理へルーティングする。</p>

<p>```ruby
module Lita
  module Handlers</p>

<pre><code>class HelloHandler &lt; Handler
  route /^java\s+(.+)/, :with_java, help: { "java TEXT" =&gt; "reply back with java." }

  def with_java( response )
    word = response.matches[0][0]
    response.reply("!!! #{word} とジャバ !!!")
  end
end

Lita.register_handler(HelloHandler)
</code></pre>

<p>  end
end
```</p>

<p><code>Gemfile</code> に以下を追記し、 <code>bundle install</code> する。</p>

<p><code>ruby
gem "lita-hello_handler", path: "handlers/lita-hello_handler"
</code></p>

<p>commit して再度 heroku へ push してデプロイする。</p>

<p><code>sh
$ git commit -a -m "make it better"
$ git push heroku master
</code></p>

<p>slack 上で <code>@lita java あなた</code> とかつぶやくとサイコーにジャバな気分になる。</p>

<p><img src="https://dl.dropboxusercontent.com/u/28495046/octopress/20150111_lita/slack_lita.png" alt="lita java" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails じゃなくても ActiveRecord を使う]]></title>
    <link href="http://momota.github.io/blog/2014/05/10/activerecord/"/>
    <updated>2014-05-10T14:54:00+09:00</updated>
    <id>http://momota.github.io/blog/2014/05/10/activerecord</id>
    <content type="html"><![CDATA[<p>rails には挫折したおれが、rails アプリケーション以外で ActiveRecord を使うようになった件について。</p>

<p>ActiveRecord は O/Rマッパーで RDB のテーブルエントリをオブジェクトとして扱えるようにするやつ。1インスタンスが、テーブルの1レコードに相当する。
Ruby on Rails 標準で、モデル層で使われる。</p>

<p>環境は以下。</p>

<ul>
<li>Mac OSX</li>
<li>ruby 2.1.1p76</li>
<li>MySQL mysqld5.6.17</li>
</ul>


<p>最終的なディレクトリ構成は以下のようになる。</p>

<p>```sh
.
├── Gemfile
├── Gemfile.lock
├── README.md
├── Rakefile
├── app
│   └── models
│       └── hoges.rb
├── app.rb
├── config
│   └── database.yml
├── db
│   └── migrate
│       └── 20140510_create_hoges.rb
├── log
│   ├── database.log
│   └── trace.log
└── vendor</p>

<pre><code>└── bundle
        └── (略)
</code></pre>

<p>```</p>

<ul>
<li><a href="https://github.com/momota/activerecord_sample">https://github.com/momota/activerecord_sample</a></li>
</ul>


<!-- more -->


<h2>前準備</h2>

<h3>ruby</h3>

<p>rbenv で ruby 2.1.1 をインストールする。</p>

<p><code>sh
$ rbenv install 2.1.1
$ rbenv local 2.1.1
$ rbenv rehash
$ ruby -v
ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-darwin13.0]
</code></p>

<h3>gem</h3>

<p>bundler で gem をインストールする。
まず、bundler をインストールする。</p>

<p><code>sh
$ gem install bundle
$ bundle -v
Bundler version 1.6.2
</code></p>

<p>以下の <code>Gemfile</code> をつくって<code>bundle install --path vendor/bundle</code> して gem をインストールする。</p>

<p>```ruby
source &ldquo;<a href="https://rubygems.org">https://rubygems.org</a>&rdquo;</p>

<p>gem &ldquo;activerecord&rdquo;
gem &ldquo;rake&rdquo;
gem &ldquo;mysql2&rdquo;
gem &ldquo;pry&rdquo;
```</p>

<p><code>mysql2</code> はDBアダプタ。MySQLと接続するために必要。</p>

<p><code>pry</code> はなくてもよい。<code>irb</code> の便利バージョン。</p>

<h3>mysql</h3>

<p>homebrew でインストールした。</p>

<p><code>my.cnf</code>はよしなに。</p>

<p><code>create database</code> とか <code>grant</code> でユーザやデータベースなどはあらかじめ作っておく。</p>

<h2>create table: rake タスクを使ってテーブルを作成する</h2>

<p><code>rake</code> (makeみたいなもん) でテーブルを作成する。(マイグレーション)</p>

<p>マイグレーションは、SQLを使わずにデータベースのテーブルやカラムなどの構造を変更できる仕組みで、移行と解釈するとややこしい。データベース移行をしやすくする仕組み、くらいに捉えておくとよい。</p>

<h3>マイグレーション用ファイルを作成する</h3>

<p><code>db/migrate</code> ディレクトリを作ってマイグレーション用ファイルを作る。</p>

<p>ここでは hoges テーブルを作ることにする。
マイグレーション用ファイルには、テーブル定義を書く。ここでは <code>db/migrate/20140510_create_hoges.rb</code> を作成する。</p>

<p>このファイル名が大事で <code>20140510</code> の部分がバージョンとして管理される。<code>schema_migrations</code> テーブルが自動生成され、そこで管理される。また、マイグレーション用ファイル中に class 名を<code>CreateHoges</code> のようにキャメルケースで定義した場合は、ファイル名は <code>VERSION_create_hoge.rb</code> のようにスネークケースとして命名する必要がある。ファイル名がこの命名規約に反するとマイグレーションがこける。</p>

<p>rails文化の「設定より規約」(CoC: Convention over Configuration)ってやつですね。</p>

<p><code>ActiveRecord::Migration</code> を継承したクラス <code>Createhoges</code> を定義する。
シンボル <code>:hoges</code> がテーブル名。カラム定義は見ての通りだと思う。
主キーは自動的に <code>id</code> というカラム名で生成されるので書かない。(書くとエラーになる)</p>

<p>```ruby
class CreateHoges &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>create_table :hoges do |t|
  t.string  :name
  t.string  :url
  t.timestamps  # =&gt; これでcreated_atとupdated_atカラムが定義される
end
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>drop_table :hoges
</code></pre>

<p>  end
end
```</p>

<p>書き方の詳細は、<a href="http://guides.rubyonrails.org/migrations.html">Active Record Migrations</a> を見れば良いと思う。</p>

<h3>データベース接続情報を yaml に書き出す</h3>

<p>MySQL への接続情報(DBユーザ名とかパスワードとか使うDB名とか)を yaml ファイルに書き出しておく。めんどくさい、かつ、使い捨てのコードならハードコーディングしといてもOK。</p>

<p>ここでは、以下の内容で <code>config/database.yml</code> を作成した。</p>

<p>```erb
db:
  production:</p>

<pre><code>adapter:  mysql2
host:     localhost
username: &lt;%= ENV['DATABASE_USERNAME'] %&gt;
password: &lt;%= ENV['DATABASE_PASSWORD'] %&gt;
database: &lt;%= ENV['DATABASE_NAME']%&gt;
</code></pre>

<p>  development:</p>

<pre><code>adapter:  mysql2
host:     localhost
username: &lt;%= ENV['DEV_DATABASE_USERNAME'] %&gt;
password: &lt;%= ENV['DEV_DATABASE_PASSWORD'] %&gt;
database: &lt;%= ENV['DEV_DATABASE_NAME']%&gt;
</code></pre>

<p>```</p>

<p>パスワードなどの秘匿情報は環境変数から読み込むようにする。(ここではERB形式で書いた)
パスワードをべた書きしといて、間違えて github とかで公開しちゃうと大変なので。</p>

<p><code>~/.zshrc</code> とか <code>~/.bashrc</code> にあらかじめ作っておいたデータベース名とかユーザ名を以下のように足して <code>source ~/.zshrc</code> で読み込めばいいと思う。</p>

<p><code>sh
export DEV_DATABASE_NAME="hoge_db"
export DEV_DATABASE_USERNAME="hoge_user"
export DEV_DATABASE_PASSWORD="hoge_password"
</code></p>

<h3>Rakefile をつくって rakeタスクを実行する</h3>

<p>以下の内容で <code>Rakefile</code> を作る。
DB接続用の設定や環境指定(development/production) やバージョン指定の設定を書いてます。</p>

<p>```ruby
require &ldquo;active_record&rdquo;
require &ldquo;yaml&rdquo;
require &ldquo;erb&rdquo;
require &ldquo;logger&rdquo;</p>

<p>task :default => :migrate</p>

<p>desc &ldquo;Migrate database&rdquo;
task :migrate => :environment do
  ActiveRecord::Migrator.migrate(&lsquo;db/migrate&rsquo;, ENV[&ldquo;VERSION&rdquo;] ? ENV[&ldquo;VERSION&rdquo;].to_i : nil)
end</p>

<p>task :environment do
  db_conf = YAML.load( ERB.new( File.read(&ldquo;./config/database.yml&rdquo;) ).result )</p>

<p>  # <code>rake ENV=development</code>/<code>rake ENV=production</code>で切り替え可能
  ActiveRecord::Base.establish_connection( db_conf[&ldquo;db&rdquo;][ENV[&ldquo;ENV&rdquo;]] )
  ActiveRecord::Base.logger = Logger.new(&ldquo;log/database.log&rdquo;)
end
```</p>

<p>以下を参考。</p>

<ul>
<li><a href="http://qiita.com/foloinfo/items/6ecfe3c5fd1b56f1dceb">非Rails AppでActiveRecord::Migrationを使う + Rakeでバージョン管理する</a></li>
</ul>


<h3>rake タスクを実行する</h3>

<p>まずは rake タスクの確認。</p>

<p><code>sh
$ bundle exec rake -T
rake migrate  # Migrate database
</code></p>

<p>開発環境設定で実行する。(ENV=development)</p>

<p>```sh</p>

<h1>debug 用に&mdash;traceオプションをつけ、標準エラーをlog/trace.txtへリダイレクト。</h1>

<h1>bundle exec rake ENV=development でもOK</h1>

<p>$ bundle exec rake ENV=development &mdash;trace 2> log/trace.txt
== 20140510 CreateHoges: migrating ============================================
&mdash; create_table(:hoges)
   &ndash;> 0.1159s
== 20140510 CreateHoges: migrated (0.1160s) ===================================
```</p>

<p>問題なければテーブルが作成されているはず。</p>

<p>```
mysql> show tables;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| Tables_in_dev_********** |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| hoges                    |
| schema_migrations        |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
2 rows in set (0.00 sec)</p>

<p>mysql> desc schema_migrations;
+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| Field   | Type         | Null | Key | Default | Extra |
+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
| version | varchar(255) | NO   | PRI | NULL    |       |
+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&ndash;+
1 row in set (0.00 sec)</p>

<p>mysql> select * from schema_migrations;
+&mdash;&mdash;&mdash;&mdash;&mdash;+
| version  |
+&mdash;&mdash;&mdash;&mdash;&mdash;+
| 20140510 |
+&mdash;&mdash;&mdash;&mdash;&mdash;+
1 row in set (0.00 sec)</p>

<p>mysql> desc hoges;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| Field      | Type         | Null | Key | Default | Extra          |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| id         | int(11)      | NO   | PRI | NULL    | auto_increment |
| name       | varchar(255) | YES  |     | NULL    |                |
| url        | varchar(255) | YES  |     | NULL    |                |
| created_at | datetime     | YES  |     | NULL    |                |
| updated_at | datetime     | YES  |     | NULL    |                |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
5 rows in set (0.01 sec)</p>

<p>mysql> select * from hoges;
Empty set (0.00 sec)
```</p>

<h2>CRUD 操作について</h2>

<p>ActiveRecordを使って CRUD 操作する。(insert/select/update/delete)</p>

<p>ActiveRecord では、<code>ActiveRecord::Base</code> を継承したクラスがDBの1テーブルに対応し、そのクラスの属性がテーブルの各カラムに対応する。
このクラスのことを一般的に「モデル」と呼ぶ。
Rails では、Rails アプリを生成した段階で MVC 別にディレクトリが生成されるので、<code>app/models</code> 以下にこの <code>ActiveRecord::Base</code> 継承クラスを作る。
今回は Rails ではないのでそれに従う必要はない。が、モデルが増えた場合を考慮すると <code>app/models</code> 以下に整理できておいたほうがコードの可読性とかメンテナンスはしやすそうなので、<code>app/models/hoges.rb</code> ファイルを作ることにする。
Rails って理にかなっているんだな。</p>

<p><code>ruby
class Hoges &lt; ActiveRecord::Base
end
</code></p>

<p>この <code>Hoges</code> は対応するテーブル名にあわせる。これもCoC。
レコードを単数形で扱うため、テーブル名を複数形にすることが多いみたい。</p>

<h3>Create: テーブルへ insert する</h3>

<p>CRUD の C。</p>

<p><code>app.rb</code> をつくる。</p>

<p>モデルを <code>new</code> して属性値をセットしてあげればOK。</p>

<p>```ruby
require &ldquo;active_record&rdquo;
require &ldquo;yaml&rdquo;
require &ldquo;erb&rdquo;
require &ldquo;./app/models/hoges&rdquo;</p>

<p>db_conf = YAML.load( ERB.new( File.read(&ldquo;./config/database.yml&rdquo;) ).result )</p>

<h1>開発用DB接続パラメータ読み込み, 接続する</h1>

<p>ActiveRecord::Base.establish_connection(db_conf[&ldquo;db&rdquo;][&ldquo;development&rdquo;])</p>

<p>test_name = &ldquo;momota.txt&rdquo;
test_url  = &ldquo;<a href="http://momota.github.io/">http://momota.github.io/</a>&rdquo;</p>

<p>hoge = Hoges.new { |h|
  h.name = test_name
  h.url  = test_url
}
p hoge
hoge.save
p hoge
```</p>

<p>なお、<code>save</code> しないと insert されない。</p>

<p>こんな感じで生成時にハッシュを渡してもOK。</p>

<p><code>ruby
hoge = Hoges.new(:name =&gt; test_name, :url =&gt; test_url)
hoge.save
</code></p>

<p>それでは実行してみる。</p>

<p>```sh
$ bundle exec ruby app.rb</p>

<h1><Hoges id: nil, name: "momota.txt", url: "http://momota.github.io/", created_at: nil, updated_at: nil></h1>

<h1><Hoges id: 1, name: "momota.txt", url: "http://momota.github.io/", created_at: "2014-05-10 23:50:46", updated_at: "2014-05-10 23:50:46"></h1>

<p>```</p>

<p>上記から、saveしないと <code>id</code> や <code>created_at</code> などの値が空なので insert されていないことが分かる。</p>

<p>実際にテーブルの内容を見てみよう。ちゃんと insert されている。</p>

<p><code>
mysql&gt; select * from hoges;
+----+------------+--------------------------+---------------------+---------------------+
| id | name       | url                      | created_at          | updated_at          |
+----+------------+--------------------------+---------------------+---------------------+
|  1 | momota.txt | http://momota.github.io/ | 2014-05-10 23:50:46 | 2014-05-10 23:50:46 |
+----+------------+--------------------------+---------------------+---------------------+
1 row in set (0.00 sec)
</code></p>

<h3>Read: レコードを select する</h3>

<p>CRUD の R。</p>

<p>主キーで select する場合は、<code>find</code> メソッドを使う。</p>

<p><code>ruby
hoges = Hoges.find( 1 )
</code></p>

<p>これは以下の SQL と同じ。</p>

<p><code>sql
SELECT * FROM hoges where hoges.id = 1 LIMIT 1;
</code></p>

<p>主キー以外だと、<code>find_by</code> メソッドを使う。</p>

<p>該当するレコードがなければ <code>nil</code> が返ってくる。</p>

<p><code>ruby
hoges = Hoges.find_by name: "momota.txt"
</code></p>

<p>これは以下のような書き方もできる。</p>

<p><code>ruby
hoges = Hoges.where(name: "momota.txt").take
</code></p>

<p>これらは以下の SQL と同じ。</p>

<p><code>sql
SELECT * FROM hoges where hoges.name = "momota.txt" LIMIT 1;
</code></p>

<p><code>find_by</code> メソッドを使ってレコードが存在しないときにだけ insert するように <code>app.rb</code> を書き変えてみよう。</p>

<p>```diff
-hoge = Hoges.new { |h|
&ndash;  h.name = test_name
&ndash;  h.url  = test_url
&ndash;}
-p hoge
-hoge.save
-p hoge
+rec = Hoges.find_by url: test_url
+unless rec
+  hoge = Hoges.new { |h|
+    h.name = test_name
+    h.url  = test_url
+  }
+  hoge.save
+  puts &ldquo;すでにデータは insert 済みなのでここには入らない&rdquo;
+end</p>

<p>+p rec
```</p>

<p>実行すると最終行の <code>p rec</code> が呼ばれていることが分かる。</p>

<p><code>sh
$ bundle exec ruby app.rb
&lt;Hoges id: 1, name: "momota.txt", url: "http://momota.github.io/", created_at: "2014-05-10 23:50:46", updated_at: "2014-05-10 23:50:46"&gt;
</code></p>

<p><code>find_or_create_by</code> メソッドによりさらにスマートな書き方ができる。</p>

<p><code>diff
-rec = Hoges.find_by url: test_url
-unless rec
-  hoge = Hoges.new { |h|
-    h.name = test_name
-    h.url  = test_url
-  }
-  hoge.save
+rec = Hoges.find_or_create_by( url: test_url ) do |h|
+  h.name = test_name
  puts "すでにデータは insert 済みなのでここには入らない"
end
</code></p>

<p>その他いろいろと以下のページが参考になる。</p>

<ul>
<li><a href="http://edgeguides.rubyonrails.org/active_record_querying.html">Active Record Query Interface</a></li>
</ul>


<h3>Update: レコードを update する</h3>

<p>CRUD の U。</p>

<p>これはオブジェクトの属性を更新して <code>save</code> するだけ。</p>

<p><code>ruby
changed_name = "momota.log"
hoges = Hoges.find_by url: test_url
hoges.name = changed_name
hoges.save
</code></p>

<h3>Delete: レコードを delete する</h3>

<p>CRUD の D。</p>

<p>これも簡単でモデルオブジェクトから <code>destroy</code> or <code>delete</code> メソッドを呼ぶだけ。<code>save</code> は不要。</p>

<p><code>delete</code> はレコードの削除のみなので高速。<code>destroy</code> はレコードとオブジェクトも削除してくれるが、<code>delete</code> に比べて低速。</p>

<p><code>ruby
hoges = Hoges.find( 1 )
hoges.destroy
</code></p>

<p><code>where</code> で複数のレコードをひっかけて全部削除したい場合は、<code>destroy_all</code> or <code>delete_all</code> メソッドを呼ぶ。</p>

<p><code>ruby
hoges = Hoges.destroy_all(url: test_url)
</code></p>

<p><code>find_by</code> してからでもOK。</p>

<p><code>ruby
hoges = Hoges.find_by url: test_url
hoges.destroy_all
</code></p>

<p><code>app.rb</code> を書き換えてみる。</p>

<p>```ruby
-rec = Hoges.find_or_create_by( url: test_url ) do |h|
+hoges = Hoges.find_or_create_by( url: test_url ) do |h|
   h.name = test_name
&ndash;  puts &ldquo;すでにデータは insert 済みなのでここには入らない&rdquo;
 end</p>

<p>-p rec
+puts &ldquo;[before delete]record count: #{Hoges.count}&rdquo;
+Hoges.delete_all(url: test_url)
```</p>

<p>実行すると、確かにレコードが削除されている。</p>

<p><code>sh
$ bundle exec ruby app.rb
[before delete]record count: 1
[after delete] record count: 0
</code></p>

<p>sqlでも確認できる。</p>

<p>```
mysql> select * from hoges;
Empty set (0.00 sec)</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
