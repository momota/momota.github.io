<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2013-09-18T01:30:26+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails から外れた僕らは sinatra で i did it my way]]></title>
    <link href="http://momota.github.io/blog/2013/09/16/sinatra/"/>
    <updated>2013-09-16T17:37:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/09/16/sinatra</id>
    <content type="html"><![CDATA[<p><img src="http://www.sinatrarb.com/images/logo.png" alt="sinatra" /></p>

<p><a href="http://www.sinatrarb.com/">sinatra</a> は ruby の web アプリケーションフレームワーク。rails よりもシンプルで柔軟なプログラムが可能となる。つまり、しかれた rails に乗り切れない人のためのフレームワーク。
本稿では以下について書く。</p>

<ol>
<li>sinatra インストール</li>
<li>hello world アプリケーション</li>
<li>ルーティング</li>
<li>フィルタ</li>
<li>ヘルパー</li>
<li>テンプレートの呼び出し</li>
</ol>


<!-- more -->


<h2>前準備: インストール</h2>

<p>ruby 2.0 を rbenv でインストールする。
以下、作業は <code>/Users/momota/dev/sinatra/</code> で行う。</p>

<p><code>sh
$ rbenv install 2.0.0-p247
$ rbenv local 2.0.0-p247
$ rbenv rehash
$ rbenv version
2.0.0-p247 (set by /Users/momota/dev/sinatra/.ruby-version)
$ ruby -v
ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]
</code></p>

<p>bundler で sinatra と関連 gem をインストールする。</p>

<p><code>sh
$ gem install bundler
$ bundle -v
Bundler version 1.3.5
$ bundle init
Writing new Gemfile to /Users/momota/dev/sinatra/Gemfile
$ cat &lt;&lt; EOF &gt;&gt; ./Gemfile
heredoc&gt; gem "activerecord", "3.2.13"
heredoc&gt; gem "sqlite3", "1.3.7"
heredoc&gt; gem "sinatra", "1.4.3"
heredoc&gt; gem "sinatra-contrib", "1.4.0"
heredoc&gt; EOF
$ bundle install --path vendor/bundle
Fetching gem metadata from https://rubygems.org/...........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Installing i18n (0.6.1)
Installing multi_json (1.8.0)
Installing activesupport (3.2.13)
Installing builder (3.0.4)
Installing activemodel (3.2.13)
Installing arel (3.0.2)
Installing tzinfo (0.3.37)
Installing activerecord (3.2.13)
Installing backports (3.3.4)
Installing eventmachine (1.0.3)
Installing rack (1.5.2)
Installing rack-protection (1.5.0)
Installing rack-test (0.6.2)
Installing tilt (1.4.1)
Installing sinatra (1.4.3)
Installing sinatra-contrib (1.4.0)
Installing sqlite3 (1.3.7)
Using bundler (1.3.5)
Your bundle is complete!
It was installed into ./vendor/bundle
</code></p>

<h2>hello world を返す sinatra アプリケーションを書く</h2>

<p>サイトのルートへアクセスが遇ったときに &ldquo;hello world&rdquo; を返す <code>main.rb</code> を作成する。適当なエディタで以下を書いて保存する。</p>

<p>```ruby
require &lsquo;sinatra&rsquo;</p>

<p>get &lsquo;/&rsquo; do
  &ldquo;hello world&rdquo;
end
```</p>

<p>アプリケーションを実行する。</p>

<p><code>sh
$ bundle exec ruby main.rb
</code></p>

<p>動作確認をする。</p>

<p><code>sh
$ curl http://localhost:4567/
hello world%
</code></p>

<p>ちゃんと返ってきている。簡単。
ここでは、 <code>curl</code> で確認したが、もちろん web ブラウザで <a href="http://localhost:4567/">http://localhost:4567/</a> へアクセスして確認してもOK。
アプリケーションの終了は <code>Ctrl-c</code> でOK。</p>

<h2>ルーティング: 複数のリクエストをさばく</h2>

<p>sintra では、以下のように HTTP メソッド (GET, POST, &hellip;)とURLがペアでルーティングされる。</p>

<p>```ruby
get &lsquo;/&rsquo; do
  # show something
end</p>

<p>post &lsquo;/&rsquo; do
  # create something
end</p>

<p>put &lsquo;/&rsquo; do
  # replace something
end</p>

<p>patch &lsquo;/&rsquo; do
  # modify something
end</p>

<p>delete &lsquo;/&rsquo; do
  # annihilate something
end</p>

<p>options &lsquo;/&rsquo; do
  # appease something
end</p>

<p>link &lsquo;/&rsquo; do
  # affiliate something
end</p>

<p>unlink &lsquo;/&rsquo; do
  # separate something
end
```</p>

<p>先ほど書いた <code>main.rb</code> を修正していろいろな HTTP GET リクエストに対応する。
ここでは <a href="http://localhost:4567/about">http://localhost:4567/about</a> にアクセスが有った場合、 &ldquo;about this site&rdquo; 文字列を返すように追記する。
以下は、<code>git diff</code> の結果を示す。</p>

<p>```diff
diff &mdash;git a/main.rb b/main.rb
index 713861d..9423680 100644
&mdash;&ndash; a/main.rb
+++ b/main.rb
@@ -1,5 +1,11 @@
 require &lsquo;sinatra&rsquo;
+require &lsquo;sinatra/reloader&rsquo;</p>

<p> get &lsquo;/&rsquo; do
   &ldquo;hello world&rdquo;
 end
+
+get &lsquo;/about&rsquo; do
+  &ldquo;about this site&rdquo;
+end
+
```</p>

<p>通常、スクリプトの修正をアプリケーションへ反映するためには、アプリケーションの再起動が必要となる。<code>require 'sinatra/reloader'</code> により、その必要がなくなる。</p>

<h2>URL からのパラメータを扱う</h2>

<p>以下のメソッドを書くことにより、<a href="http://localhost:4567/hello/SOME_NAME">http://localhost:4567/hello/SOME_NAME</a> へアクセスすると SOME_NAME 部分を扱うことができる。</p>

<p><code>ruby
get '/hello/:name' do
  "hello #{params[:name]}"
end
</code></p>

<p>これは以下のようにも書ける。</p>

<p>```ruby
get &lsquo;/hello/:name&rsquo; do |n|
  &ldquo;hello #{n}&rdquo;
end</p>

<p>```</p>

<p>複数のパラメータを扱うときは以下のように書く。
<a href="http://localhost:4567/hello/FAMILY_NAME/LAST_NAME">http://localhost:4567/hello/FAMILY_NAME/LAST_NAME</a> へアクセスすると、FAMILY_NAME と LAST_NAME を扱える。</p>

<p><code>ruby
get '/hello/:fname/?:lname?' do |f, l|
  "hello #{f} #{l}"
end
</code></p>

<p>パラメータは、ワイルドカードや正規表現で扱うことができる。</p>

<p><code>ruby
get '/from/*/to/*' do |f, t|
  "from #{f} to #{t}"
end
</code></p>

<p>結果は以下のとおり。</p>

<p><code>sh
$ curl http://localhost:4567/from/fukuoka/to/tokyo
from fukuoka to tokyo%
</code></p>

<p>正規表現で扱う場合は、以下。ここでは、<code>/users/</code> 以下がすべて数字であるアクセスの場合にマッチングさせている。</p>

<p><code>ruby
get %r{/users/([0-9]+)} do |i|
  "user id = #{i}"
end
</code></p>

<p>結果は以下のとおり。</p>

<p><code>sh
$ curl http://localhost:4567/users/12345
user id = 12345%
</code></p>

<h2>before/after filter</h2>

<p>sinatra のフィルタは、ルーティングされたコンテキストを実行する前後(before / after)で、リクエストとレスポンスを変更することができる。</p>

<p>```ruby
before do
  @before_value = &ldquo;foo&rdquo;
end</p>

<p>get &lsquo;/&rsquo; do
  &ldquo;before_value has been set to #{@before_value}&rdquo;
end</p>

<p>after do
 puts &ldquo;After filter called to perform some task.&rdquo;
end
```</p>

<p>以下のように記述することで、フィルタは特定パスのリクエストにのみ評価される。</p>

<p><code>ruby
before '/path/you/want/*'
  # execute only before the '/path/you/want/*' route
  authenticate
end
</code></p>

<h2>helper</h2>

<p>ヘルパーメソッドを定義して、ルートハンドラーやテンプレートとして使える。</p>

<p>```ruby
helpers do
  # 共通関数を書ける
  def say_hello( name )</p>

<pre><code>"hello, #{name}"
</code></pre>

<p>  end
end</p>

<p>get &lsquo;/:name&rsquo; do |n|
  say_hello( n )
end
```</p>

<p>上記は、モジュールとしても記述できる。</p>

<p>```ruby
module Hello
  def say_hello( name ) &ldquo;hello, #{name}&rdquo; end
end</p>

<p>module Goodbye
  def say_goodbye( name ) &ldquo;goodbye, #{name}&rdquo; end
end</p>

<p>helpers Hello, Goodbye
```</p>

<h2>テンプレートエンジンを扱う</h2>

<p>sinatra では様々なテンプレートエンジンを扱うことができる。
例えば、haml, erb, sass, markdown, slim, coffescript など。詳細は <a href="http://www.sinatrarb.com/intro.html#Available%20Template%20Languages">http://www.sinatrarb.com/intro.html#Available%20Template%20Languages</a> このあたりを参照。</p>

<p>ここでは、erb の例を示す。</p>

<p><code>views/index.erb</code> を作成する。スクリプトからは以下のように呼び出せばOK。</p>

<p><code>ruby
get '/' do
  erb :index
end
</code></p>

<h3>テンプレートエンジンにパラメータを渡す</h3>

<p>インスタンス変数に渡して、テンプレート側からコールする。</p>

<p><code>ruby
get '/:name' do |n|
  @name  = n
  @title = 'sinatra sample'
  erb :index
end
</code></p>

<p><code>views/index.erb</code> は以下。</p>

<p>```erb
&lt;!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="urf-8">
  <title>&lt;%= @title %></title>
</head>
<body></p>

<h1>hello <%= @name %></h1>


<p></body>
</html>
```</p>

<p>実行結果は以下のとおり。</p>

<p>```sh
$ curl <a href="http://localhost:4567/taro">http://localhost:4567/taro</a>
&lt;!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="urf-8">
  <title>sinatra sample</title>
</head>
<body></p>

<h1>hello taro</h1>


<p></body>
</html>
```</p>

<h3>layout テンプレート</h3>

<p>テンプレートが複数存在するときに、ヘッダーやフッターなど、共通部分が出てくる。
そのような共通部分を <code>views/layout.erb</code> 切り出すことができる。(erb以外のときはファイル拡張子を変えればよい。)
<code>views/layout.erb</code> は優先的に読み込まれる。</p>

<p>共通部分を <code>layout.erb</code> に記述し、個別記述部分を <code>yield</code> で呼び出す。以下に <code>layout.erb</code> の例を示す。</p>

<p><code>erb
&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
  &lt;meta charset="urf-8"&gt;
  &lt;title&gt;test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;%= yield %&gt;
&lt;/body&gt;
</code></p>

<p>この時、以下のような <code>index.erb</code> テンプレートと</p>

<p><code>erb
  &lt;h1&gt;test&lt;/h1&gt;
  &lt;h2&gt;&lt;%= @name%&gt;&lt;/h2&gt;
</code></p>

<p>以下のルーティングにより</p>

<p>```ruby
require &lsquo;sinatra&rsquo;
require &lsquo;sinatra/reloader&rsquo;</p>

<p>get &lsquo;/:name&rsquo; do |n|
  @name = n
  erb :index
end
```</p>

<p>以下の様な結果になる。</p>

<p>```sh
$ curl <a href="http://localhost:4567/hanako">http://localhost:4567/hanako</a>
&lt;!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="urf-8">
  <title>test</title>
</head>
<body></p>

<pre><code>&lt;h1&gt;test&lt;/h1&gt;
</code></pre>

<p>  <h2>hanako</h2></p>

<p></body></p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv でrubyバージョンにはもう泣かされない]]></title>
    <link href="http://momota.github.io/blog/2013/08/25/rbenv/"/>
    <updated>2013-08-25T22:06:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/08/25/rbenv</id>
    <content type="html"><![CDATA[<p>ソフトウェアバージョンの差異に悩まされる人は多いと思う。</p>

<p>同じOS上で違うバージョンのrubyを動かしたいことはまあある。
<code>/home/you/foo</code>以下は既存コードがあるから1.8系のままでで動かしたいし、<code>/home/you/bar</code>以下は新しい試みとして2.0系を動かしたいとか。
そこでrbenvという便利なrubyバージョン管理ツールがある。
rbenvにより、あるディレクトリ以下のrubyバージョンを任意に指定できる。</p>

<!-- more -->


<h1>rbenv をインストールする</h1>

<p>詳細はgithubの<code>README.md</code>参照。<a href="https://github.com/sstephenson/rbenv">https://github.com/sstephenson/rbenv</a></p>

<h2>1. 最新コードをローカルにチェックアウトする</h2>

<p>githubから最新版を <code>~/.rbenv</code> にチェックアウトする</p>

<p><code>sh
$ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
</code></p>

<h2>2. pathを通すため、shellの設定を変更する</h2>

<ul>
<li><code>~/.rbenv/bin</code> を <code>$PATH</code> に追加する</li>
</ul>


<p><code>sh
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.zshrc
</code></p>

<ul>
<li>shim と 自動補完を有効にする</li>
</ul>


<p><code>sh
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.zshrc
</code></p>

<p>bash ユーザは <code>~/.zshrc</code> の代わりに <code>~/.bash_profile</code> へ。
ubuntu ユーザは <code>~/.zshrc</code> の代わりに <code>~/.profile</code> へ。</p>

<h2>3. 設定変更内容を反映するため、shell を再起動する</h2>

<p><code>sh
$ exec $SHELL -l
</code></p>

<h2>(番外編) rbenv を最新版にアップグレードする</h2>

<p><code>sh
$ cd ~/.rbenv
$ git pull
</code></p>

<h1>rbenv で任意バージョンの ruby インストールしたり、切り替えたり</h1>

<p>```sh</p>

<h1>インストール可能な ruby バージョンを一覧表示する</h1>

<h1>&ldquo;install&rdquo; command require that install ruby-build</h1>

<h1>&ndash;> <a href="https://github.com/sstephenson/ruby-build">https://github.com/sstephenson/ruby-build</a></h1>

<p>$ rbenv install -l</p>

<h1>List all Ruby versions known by rbenv</h1>

<p>$ rbenv versions</p>

<h1>install</h1>

<p>$ rbenv install 1.9.3-pxx</p>

<h1>switch version</h1>

<p>$ rbenv global 1.9.3-pxx</p>

<h1>back to system default</h1>

<p>$ rbenv global system</p>

<h1>特定のディレクトリ以下のRubyバージョンを切り替え</h1>

<p>$ rbenv local 1.9.3-p327</p>

<h1>ローカル設定を解除</h1>

<p>$ rbenv local &mdash;unset</p>

<h1>get the latest ruby versions for rbenv</h1>

<p>$ brew install ruby-build
$ brew link -f ruby-build</p>

<h1>path to installed ruby or gem</h1>

<p>$ rbenv rehash
```</p>
]]></content>
  </entry>
  
</feed>
