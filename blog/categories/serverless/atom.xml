<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: serverless | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/serverless/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2020-08-22T12:41:27+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Apps Script で LINE ボットを作る]]></title>
    <link href="http://momota.github.io/blog/2020/08/22/line-bot/"/>
    <updated>2020-08-22T08:40:00+09:00</updated>
    <id>http://momota.github.io/blog/2020/08/22/line-bot</id>
    <content type="html"><![CDATA[<p><a href="https://script.google.com/home">Google Apps Script</a> (GAS) は、Google が提供する JavaScript プラットフォームで、Google apps (Calendar, Docs, Drive, Gmail, Sheets, and Slides) に対して処理する JavaScript を簡単に書ける。</p>

<p>GAS から HTTP GETリクエストを出したり、受け付けたりできるので、この仕組みを使って、無料で LINE ボットをつくってみる。</p>

<p>LINE ボットは、LINE Messaging API を利用すると簡単に作ることが可能。</p>

<ul>
<li>公式ドキュメント <a href="https://developers.line.biz/ja/services/messaging-api/">Messaging API | LINE Developers</a></li>
</ul>


<p><img src="/images/20200822_line-bot/line_01_diagram.png" alt="line bot diagram" /></p>

<p>出所: <a href="https://developers.line.biz/ja/docs/messaging-api/overview/">Messaging APIの概要 | LINE Developers</a></p>

<!-- more -->


<p>LINE ボット開発の流れは以下。</p>

<ol>
<li>LINE Developers コンソールからチャネル作成</li>
<li>ボットの開発・デプロイ (GAS)</li>
<li>LINE Developers コンソールでのボット設定</li>
</ol>


<h2>1. LINE Developers コンソールからチャネル作成</h2>

<p>流れは以下。</p>

<ol>
<li>LINE Developers 登録 (登録していない人のみ)</li>
<li>新規プロバイダー登録

<ul>
<li>プロバイダーはアプリ提供者。個人でも、組織でも。</li>
</ul>
</li>
<li>チャネル作成

<ul>
<li>チャネルは、LINEプラットフォームが提供する機能を、プロバイダーが開発するサービスで利用するための通信路</li>
</ul>
</li>
</ol>


<p>詳細は <a href="https://developers.line.biz/ja/docs/messaging-api/getting-started/#using-console">Messaging APIを始めよう | LINE Developers</a> を参照。</p>

<p>チャネルが作成できたら、「Messaging API設定」からチャネルアクセストークン★を発行してメモっておく。
後述のボット開発時に必要となる。</p>

<h2>2. ボットの開発・デプロイ (GAS)</h2>

<p>今回は、以下の機能をボットに持たせる。</p>

<ul>
<li>翻訳機能: 日本語を英訳する</li>
<li>ロギング機能: 履歴を Google Sheets に保存する</li>
</ul>


<p>まずは、新規 GAS プロジェクトを作る。
<a href="https://script.google.com/home">自分のプロジェクト &ndash; Apps Script</a> から「新しいプロジェクト」で作成可能。</p>

<p>一つの <code>.gs</code> ファイルでも良いが、ここでは以下のファイル構成で開発する。</p>

<p><code>
├── main.gs
├── class.gs
└── test.gs
</code></p>

<p>話が逸れるが、2020年に入ってから GAS は V8 ランタイムをサポートし始めたので、<code>const</code> とかクラス定義、アロー関数が使えるようになった。
<a href="https://developers.google.com/apps-script/guides/v8-runtime">V8 Runtime Overview  |  Apps Script  |  Google Developers</a></p>

<h3>翻訳機能</h3>

<p>LINE で投稿された文を英訳する。LINE から Webhook で受け取った日本語文字列を英語に翻訳し、レスポンス用のJSONを返すためのクラスを作る。</p>

<p>翻訳には、GAS にビルトインされている <code>LanguageApp</code> を使う。
<a href="https://developers.google.com/apps-script/reference/language/language-app">Class LanguageApp  |  Apps Script  |  Google Developers</a></p>

<p>LINE Messaging APIレスポンスの認可には、上でメモったチャネルアクセストークン★が必要となる。トークンのハードコーディングを避けるため、<code>Script properties</code> へ事前に設定しておく。</p>

<p><code>Script properties</code> は、GAS コンソールのメニュー [File] > [Project properties] > [Script properties] から設定できる。ここでは、<code>LINE_ACCESS_TOKEN</code> で登録している。</p>

<p><img src="/images/20200822_line-bot/line_02_project-properties.png" alt="GAS script properties" /></p>

<p><code>class.gs</code>  に以下を書く。</p>

<p>```javascript
class TranslateAPI {
  // コンストラクタ
  constructor(sourceLang=&lsquo;ja&rsquo;, destLang=&lsquo;en&rsquo;) {</p>

<pre><code>// 日本語 → 英語に翻訳する
this.sourceLang = sourceLang;
this.destLang   = destLang;

// Script properties からチャネルアクセストークンを取得する
this.LINE_ACCESS_TOKEN = PropertiesService.getScriptProperties().getProperty('LINE_ACCESS_TOKEN');
if (!this.LINE_ACCESS_TOKEN) {
  throw 'You should set "LINE_ACCESS_TOKEN" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

// LINE Messaging API 応答メッセージ用のエンドポイント
this.REPLY_ENDPOINT = 'https://api.line.me/v2/bot/message/reply';
</code></pre>

<p>  }</p>

<p>  // 翻訳機能
  translate(text) {</p>

<pre><code>return LanguageApp.translate(text, this.sourceLang, this.destLang);
</code></pre>

<p>  }</p>

<p>  // レスポンス用メッセージ成形
  getResponseJSON(data, replyToken) {</p>

<pre><code>return {
  'headers': {
    'Content-Type': 'application/json; charset=UTF-8',
    'Authorization': 'Bearer ' + this.LINE_ACCESS_TOKEN,
  },
  'method': 'post',
  'payload': JSON.stringify({
    'replyToken': replyToken,
    'messages': [{
      'type': 'text',
      'text': data,
    }],
  }),
};
</code></pre>

<p>  }
}
```</p>

<h3>ロギング機能</h3>

<p>LINE ボットとの会話履歴を Google Sheets に保存する。</p>

<p><a href="https://sheets.new">https://sheets.new</a> から Google Sheets を新規作成する。
作成したシートの URL から spreadsheetIDを取得する。</p>

<pre>
ttps://docs.google.com/spreadsheets/d/<span style="color: #d33682; ">spreadsheetId</span>/edit#gid=0
</pre>


<p>チャネルアクセストークンを <code>Script properties</code> に設定したのと同様に、<code>SHEET_ID</code> として登録する。</p>

<p><code>class.gs</code>  に以下を追記する。</p>

<p>```javascript
class TranslateLogger {
  // コンストラクタ
  constructor() {</p>

<pre><code>// Script properties から spreadsheetID を取得する
const SHEET_ID = PropertiesService.getScriptProperties().getProperty('SHEET_ID');

if (!SHEET_ID) {
  throw 'You should set "SHEET_ID" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

let sheets = SpreadsheetApp.openById(SHEET_ID);
this.sheet = sheets.getActiveSheet();
</code></pre>

<p>  }</p>

<p>  // 日付、翻訳前文字列、翻訳後文字列を Sheets に記録する
  logToSheet(text, translated_text) {</p>

<pre><code>let col     = 1,
    new_row = this.sheet.getLastRow() + 1;

this.sheet.getRange(new_row, col++).setValue(new Date());
this.sheet.getRange(new_row, col++).setValue(text);
this.sheet.getRange(new_row, col++).setValue(translated_text);
</code></pre>

<p>  }
}
```</p>

<h3>メイン処理</h3>

<p>メイン処理は、LINE から日本語文を Webhook (HTTP POST) で受け取り、上述した翻訳処理、ログ処理を経て応答する。</p>

<p><code>main.gs</code> に書く。</p>

<p>```javascript
const doPost = e => {
  const t = new TranslateAPI(&lsquo;ja&rsquo;, &lsquo;en&rsquo;);
  const l = new TranslateLogger();</p>

<p>  // WebHookで受信した応答用Token
  const replyToken     = JSON.parse(e.postData.contents).events[0].replyToken;</p>

<p>  // 受信した文字列を翻訳し、レスポンス用JSONに成形する
  let text            = JSON.parse(e.postData.contents).events[0].message.text,</p>

<pre><code>  translated_text = t.translate(text),
  json            = t.getResponseJSON(translated_text, replyToken);
</code></pre>

<p>  // LINE Messaging APIへ応答する
  UrlFetchApp.fetch(t.REPLY_ENDPOINT, json);</p>

<p>  // ロギング
  l.logToSheet(text, translated_text);</p>

<p>  let response = ContentService.createTextOutput();
  response.setMimeType(ContentService.MimeType.JSON);
  response.setContent(JSON.stringify({&lsquo;content&rsquo;: &lsquo;post ok&rsquo;}));
  return response;
}
```</p>

<p>テストは省略。</p>

<h3>GAS を Web アプリとしてデプロイ (公開) する</h3>

<p>開発したボットを、GAS コンソールメニューの [Publish] > [Deploy as Web app&hellip;] からデプロイする。
「Who has access to the app:」 は「Anyone, even anonymous」に設定しておく。</p>

<p>[Deploy] ボタンを押すと、Authorization requiredダイアログが出てくるので許可してあげる。</p>

<p>許可すると、「Current web app URL:」で GAS のエンドポイント URL ☆が取得できるのでメモっておく。後ほど、LINE Developers コンソールで Webhook URL にこのエンドポイントを指定する。
<a href="https://script.google.com/macros/s/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/exec">https://script.google.com/macros/s/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/exec</a> 形式の URL。</p>

<h2>3.  LINE Developers コンソールでのボット設定</h2>

<p>以下を設定する。</p>

<ul>
<li>Webhook URL の設定 (ボットのエンドポイント URL を指定)</li>
<li>応答メッセージの無効化</li>
<li>ボットの QR コード確認</li>
</ul>


<p>詳細は <a href="https://developers.line.biz/ja/docs/messaging-api/building-bot/">ボットを作成する | LINE Developers</a> を参照。</p>

<p>LINE Developersコンソールから、先に作ったチャンネルの Messaging API 設定 > Webhook 設定の Webhook URL に先程デプロイした GAS のエンドポイント URL ☆ を設定する。</p>

<p>次に、「Webhook の利用」を有効化する。</p>

<p>応答メッセージの無効化もしておく。
「応答メッセージ設定」の「編集」リンクから、「詳細設定」 > 「応答メッセージ」 をオフにしておく。</p>

<p><img src="/images/20200822_line-bot/line_03_response-settings.png" alt="bot response settings on LINE Developers Console" /></p>

<p>最後に、ボットの QR コードを取得し、LINE の友達に追加する。</p>

<h2>動作確認</h2>

<p>以下の日本語入力に対して、</p>

<ul>
<li>1997年にスタートして以来、毎年7月下旬頃に行われてきた国内最大規模のロックフェス「FUJI ROCK FESTIVAL」。今年は東京オリンピック開催の影響もあって8月21～23日に行われる予定だったが、新型コロナウイルスの感染拡大の影響により残念ながらそれも見送られることになった。</li>
</ul>


<p>以下の英訳分を返してくれている。</p>

<ul>
<li>&ldquo;FUJI ROCK FESTIVAL&rdquo;, the largest rock festival in Japan, has been held around late July every year since it started in 1997. This year it was scheduled to be held on August 21-23, partly due to the Tokyo Olympics, but unfortunately it was also postponed due to the spread of the new coronavirus infection.</li>
</ul>


<p><img src="/images/20200822_line-bot/line_04_test_conversation.png" alt="bot conversation" /></p>

<p>会話のログも Google Sheets に取得できている。</p>

<p><img src="/images/20200822_line-bot/line_05_log.png" alt="logging bot conversation" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ねこの画像をランダムに表示する slack command]]></title>
    <link href="http://momota.github.io/blog/2019/04/13/slack-command/"/>
    <updated>2019-04-13T19:06:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/04/13/slack-command</id>
    <content type="html"><![CDATA[<p>心の平穏のために、猫の画像をランダムに表示してくれる Slack command <code>/neko</code> を作った。</p>

<p>Slack で <code>/neko</code> と打つと、Cloud Functions にリクエストが飛び、Functions が <a href="https://thecatapi.com/">TheCatAPI</a> からランダムに猫画像 URL を取得するもの。</p>

<p><img src="/images/20190413_neko-slack-command/neko-command.png" alt="slack neko command" /></p>

<ul>
<li>参考

<ul>
<li><a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a></li>
<li><a href="http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions/">Google cloud functions で slack (slash) commands をつくる &ndash; momota.txt</a></li>
</ul>
</li>
</ul>


<table>
<thead>
<tr>
<th> 使ったもの                  </th>
<th> 用途                </th>
</tr>
</thead>
<tbody>
<tr>
<td> Google Cloud Functions      </td>
<td> バックエンド        </td>
</tr>
<tr>
<td> Python 3.7                  </td>
<td> Functionsの実装言語 </td>
</tr>
<tr>
<td> Serverless framework 1.40.0 </td>
<td> GCPへのデプロイ     </td>
</tr>
</tbody>
</table>


<!-- more -->


<h2>Serverless framework の初期設定</h2>

<p>```sh</p>

<h1>create new service</h1>

<p>$ serverless create &mdash;template google-python &mdash;path neko</p>

<h1>go to the service directory</h1>

<p>$ cd neko</p>

<h1>install provider plugins</h1>

<p>$ npm install
```</p>

<p><code>serverless.yml</code> を自分の GCP 環境に合わせて編集する。</p>

<p>```yaml
service: neko</p>

<p>provider:
  name: google
  stage: dev
  runtime: python37
  region: YOUR-REGION
  project: YOUR-GCP-PROJECT-ID
  credentials: ~/.gcloud/YOUR-KEYFILE.json</p>

<p>plugins:
  &ndash; serverless-google-cloudfunctions</p>

<p>package:
  exclude:</p>

<pre><code>- node_modules/**
- .gitignore
- .git/**
</code></pre>

<p>functions:
  neko-command:</p>

<pre><code>handler: neko
events:
  - http: path
memorySize: 256
timeout: 60s
labels: {
    application: slack-slash-command,
    environment: development,
    owner: momota
</code></pre>

<p>}
```</p>

<h2>neko コマンドの実装</h2>

<p>まず <a href="https://thecatapi.com/">TheCatAPI</a> の API エンドポイントをコードの中に埋め込みたくないので、 <code>config.json</code> という外部ファイルに書き出し、実行時にそこから読み込むことにする。</p>

<p>以下のような感じ。</p>

<p>```json
{</p>

<pre><code>"API_URL": "https://api.thecatapi.com/v1/images/search?format=json"
</code></pre>

<p>}
```</p>

<p>Functions 用のコードは以下のような感じ。</p>

<p>```python
import json
import requests
from flask import jsonify</p>

<h1>外部ファイル config.json の読み込み</h1>

<p>with open(&lsquo;config.json&rsquo;, &lsquo;r&rsquo;) as f:</p>

<pre><code>data = f.read()
</code></pre>

<p>config = json.loads(data)</p>

<h1>TheCatAPI を叩いて、レスポンス (JSON) から 猫画像 URL を取得</h1>

<p>def neko_url():</p>

<pre><code>res = requests.get(config['API_URL'])
json_res = json.loads(res.text)
return json_res[0]['url']
</code></pre>

<h1>Slackへの応答フォーマットに整形</h1>

<p>def format_slack_message(message):</p>

<pre><code>return {
    'response_type': 'in_channel',
    'text': message
}
</code></pre>

<h1>Handler: Functions がリクエストを受けたときに実行する関数</h1>

<p>def neko(request):</p>

<pre><code>message = neko_url()
response = format_slack_message('ねこです ' + message)
return jsonify(response)
</code></pre>

<p>```</p>

<p>あとは GCP にデプロイして、Slack の Slash command の設定をすれば使える。</p>

<p><code>sh
$ serverless deploy -v
</code></p>

<h2>ちょっと頑張る： Slack トークン認証とエラーハンドリング</h2>

<p>Slack の Verification Token による簡易的な認証処理を追加する。</p>

<p>Slack command のApp設定から、Basic Information > App Credentials > Verification Token からトークンを取得して、<code>config.json</code> に書く。</p>

<p>```json
{</p>

<pre><code>"API_URL": "https://api.thecatapi.com/v1/images/search?format=json",
"SLACK_TOKEN": "YOUR-VERIFICATION-TOKEN"
</code></pre>

<p>}
```</p>

<p>以下のような処理を追加し、認証処理とエラーハンドリング処理を追加する。</p>

<p>とりあえず意図しないリクエストがバックエンド (Functions) にきたら、例外を投げる。</p>

<p>```python
def verify_request(request):</p>

<pre><code># POSTメソッドじゃない
if request.method != 'POST':
    raise Exception(405, 'Only POST requests are accepted')

# データが POST されていない
if not request.form:
    raise Exception(422, 'POST form is empty')

# POST データに ’token’ フィールドにない
if 'token' not in request.form:
    raise Exception(422, 'POST form is invalid')

# トークンがマッチしない
if request.form['token'] != config['SLACK_TOKEN']:
    raise Exception(403, 'Permission denied')
</code></pre>

<p>```</p>

<p>メイン処理側では、例外を補足したら、それに応じたエラーを返すように変更する。</p>

<p>```python
def neko(request):</p>

<pre><code>try:
    # validate request
    verify_request(request)

    message = neko_url()
    response = format_slack_message('ねこです ' + message)
    return jsonify(response)
except Exception as e:
    code, msg = e.args
    print('Exception occured: &lt;{}&gt; {}'.format(code, msg))
    return (msg, code)
</code></pre>

<p>```</p>

<h2>もうちょっと頑張る: 非同期処理</h2>

<p><a href="http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions/">前回</a>も述べたが、
Slack command は 3000 ms (3秒) 以内に応答しないとタイムアウトになってしまう。</p>

<p><a href="https://thecatapi.com/">TheCatAPI</a> のような外部 API に依存している場合、3 秒以内のレスポンスを保証できない可能性が高くなる。
そこで、バックエンドの Functions がリクエストを受けたら即時にレスポンスを返し、スレッドにより非同期で応答する。
Slack としても、そのような仕組みを支援するためにレスポンス用 URL を付与して、バックエンド側にリクエストを投げてくれる。</p>

<p>以下のようなイメージ。</p>

<p><img src="/images/20190413_neko-slack-command/seq.png" alt="change async sequence" /></p>

<p>スレッド処理のため、メイン処理を関数化し、レスポンス用 URL へ返答するよう書き換える。</p>

<p>```python
from threading import Thread</p>

<p>def neko_async(response_url):</p>

<pre><code>message = neko_url()
response = format_slack_message('ねこです ' + message)
post_data = json.dumps(response)

post_response = post_to_slack(response_url, post_data)
return
</code></pre>

<p>def neko(request):</p>

<pre><code>try:
    # validate request
    verify_request(request)

    # レスポンス用 URL の取得
    response_url = request.form['response_url']

    # スレッドで猫画像 URL処理を取得
    thread = Thread(target=neko_async, kwargs={'response_url': response_url})
    thread.run()

    return ''
except Exception as e:
    code, msg = e.args
    print('Exception occured: &lt;{}&gt; {}'.format(code, msg))
    return (msg, code)
</code></pre>

<p>```</p>

<p>最終的には以下のような感じになる。</p>

<p>```python
import json
import requests
from threading import Thread</p>

<h1>外部ファイル config.json の読み込み</h1>

<p>with open(&lsquo;config.json&rsquo;, &lsquo;r&rsquo;) as f:</p>

<pre><code>data = f.read()
</code></pre>

<p>config = json.loads(data)</p>

<h1>エラーハンドリングと簡易認証処理</h1>

<p>def verify_request(request):</p>

<pre><code># POSTメソッドじゃない
if request.method != 'POST':
    raise Exception(405, 'Only POST requests are accepted')

# データが POST されていない
if not request.form:
    raise Exception(422, 'POST form is empty')

# POST データに ’token’ フィールドにない
if 'token' not in request.form:
    raise Exception(422, 'POST form is invalid')

# トークンがマッチしない
if request.form['token'] != config['SLACK_TOKEN']:
    raise Exception(403, 'Permission denied')
</code></pre>

<h1>スレッド処理用関数</h1>

<p>def neko_async(response_url):</p>

<pre><code>message = neko_url()
response = format_slack_message('ねこです ' + message)
post_data = json.dumps(response)

post_response = post_to_slack(response_url, post_data)
return
</code></pre>

<h1>TheCatAPI を叩いて、レスポンス (JSON) から 猫画像 URL を取得</h1>

<p>def neko_url():</p>

<pre><code>res = requests.get(config['API_URL'])
json_res = json.loads(res.text)
return json_res[0]['url']
</code></pre>

<h1>Slackへの応答フォーマットに整形</h1>

<p>def format_slack_message(message):</p>

<pre><code>return {
    'response_type': 'in_channel',
    'text': message
}
</code></pre>

<h1>Slack レスポンス用 URL への POST処理</h1>

<p>def post_to_slack(url, post_data):</p>

<pre><code>post_headers = {
    'Content-type': 'application/json; charset=utf-8'
}

return requests.post(
    url,
    data=post_data,
    headers=post_headers
)
</code></pre>

<h1>Handler: Functions がリクエストを受けたときに実行する関数</h1>

<p>def neko(request):</p>

<pre><code>try:
    # validate request
    verify_request(request)

    response_url = request.form['response_url']
    thread = Thread(target=neko_async, kwargs={'response_url': response_url})
    thread.run()

    return ''
except Exception as e:
    code, msg = e.args
    print('Exception occured: &lt;{}&gt; {}'.format(code, msg))
    return (msg, code)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google cloud functions で slack (slash) commands をつくる]]></title>
    <link href="http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions/"/>
    <updated>2019-04-06T09:19:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions</id>
    <content type="html"><![CDATA[<p>Slack commands を Google Cloud Functions で実装する。</p>

<p>Slack commands は slack 上で <code>/command arguments</code> 形式で入力すると何かしらの応答を返す仕組み。<code>/</code> から始まるのでSlack Slash command とも呼ばれるようだ。
詳細は公式 API ページを参照: <a href="https://api.slack.com/slash-commands">Slash Commands | Slack</a></p>

<p><a href="http://momota.github.io/blog/2015/01/11/lita/">過去につくった Slack Bot</a> が動かなくなったので、GCP を利用して作り直そうというのが背景。</p>

<p>クラウドへのデプロイについては serverless framework を利用した。</p>

<ul>
<li>参考

<ul>
<li><a href="http://momota.github.io/blog/2015/01/11/lita/">lita で Slack Bot (on heroku) をつくる &ndash; momota.txt</a></li>
<li><a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a></li>
</ul>
</li>
</ul>


<p>今回は、slack で <code>/ping</code> というコマンドを実行したら、<code>pong</code> と返すような slack command を作る。
できあがりは以下のような感じ。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-ping-command.gif" alt="slack command screenshot" /></p>

<!-- more -->


<h3>事前設定</h3>

<p>serverless framework のインストール方法は <a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a> を参照。</p>

<p>今回は、AWS Lambda (Javascript) ではなく GCP Cloud Functions (Python) を使う。</p>

<p>事前に GCP のクレデンシャル設定が必要となる。</p>

<ul>
<li>GCP クレデンシャル設定の詳細は公式を参照してほしい: <a href="https://serverless.com/framework/docs/providers/google/guide/credentials/">Serverless Framework &ndash; Google Cloud Functions Guide &ndash; Credentials</a></li>
<li>概要は以下。

<ol>
<li>請求先アカウントを作成</li>
<li>新規の Google Cloudプロジェクトを作成 (プロジェクトIDを控える)</li>
<li>必要な API を有効化。以下。

<ul>
<li>Google Cloud Functions</li>
<li>Google Cloud Deployment Manager</li>
<li>Google Cloud Storage</li>
<li>Stackdriver Logging</li>
</ul>
</li>
<li>クレデンシャルを入手する

<ul>
<li>サービスアカウントを作成</li>
<li>ロールの付与

<ul>
<li>Deployment Manager Editor</li>
<li>Storage Admin</li>
<li>Logging Admin</li>
<li>Cloud Functions Developer</li>
</ul>
</li>
<li>クレデンシャルキーファイルの作成 (keyfile.json)</li>
<li>キーファイルのデプロイ: <code>~/.gcloud/keyfile.json</code> など</li>
</ul>
</li>
</ol>
</li>
</ul>


<h3>serverless サービスの作成</h3>

<p>ここでは <code>ping</code> という名前でサービス (プロジェクトのようなもの) を作成する。</p>

<p>```sh
$ serverless create &mdash;template google-python &mdash;path ping
Serverless: Generating boilerplate&hellip;
Serverless: Generating boilerplate in &ldquo;/path-you-want/ping&rdquo;</p>

<hr />

<p>|   _   .&mdash;&mdash;&ndash;.&mdash;&mdash;.&mdash;.&mdash;.&mdash;&mdash;&ndash;.&mdash;&mdash;|  .&mdash;&mdash;&ndash;.&mdash;&mdash;&ndash;.&mdash;&mdash;&ndash;.
|   |<em><strong>|  &ndash;</strong>|   </em>|  |  |  &ndash;<strong>|   _|  |  &ndash;</strong>|<strong> &mdash;|</strong> &mdash;|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.40.0
 &mdash;&mdash;&mdash;&ndash;'</p>

<p>Serverless: Successfully generated boilerplate for template: &ldquo;google-python&rdquo;
```</p>

<p>作成したサービス名と同名のディレクトリが作成されるので、移動する。</p>

<p><code>sh
$ cd ping
</code></p>

<p>以下のファイルが自動生成されている。</p>

<p><code>sh
$ ls -la
合計 24
drwxr-xr-x 2 momota momota 4096  4月  2 22:45 .
drwxr-xr-x 5 momota momota 4096  4月  2 22:45 ..
-rw-r--r-- 1 momota momota  597  4月  2 22:45 .gitignore
-rw-r--r-- 1 momota momota  362  4月  2 22:45 main.py
-rw-r--r-- 1 momota momota  303  4月  2 22:45 package.json
-rw-r--r-- 1 momota momota 1431  4月  2 22:45 serverless.yml
</code></p>

<h3>プロバイダプラグインのインストール</h3>

<p>プロジェクトディレクトリで <code>npm install</code> する。</p>

<p><code>sh
$ npm install
</code></p>

<h3>プロバイダプロパティの更新</h3>

<p><code>serverless.yml</code> を編集する。</p>

<p><code>project</code> フィールドにGCP プロジェクト ID の指定するのと、<code>credentials</code> フィールドにcredentials ファイルの相対パスを指定する。
<code>functions</code> 以下の memorySize, timeout, labels はお好みで設定する。</p>

<p><code>handler</code> フィールドで指定している ping が後述する Python コードの関数名になっており、Cloud Functions 起動時に当該関数が呼び出される。</p>

<p>```yaml
service: ping</p>

<p>provider:
  name: google
  stage: dev
  runtime: python37
  region: us-central1
  project: YOUR-GCP-PROJECT-ID
  credentials: ~/.gcloud/YOUR-KEYFILE.json</p>

<p>plugins:
  &ndash; serverless-google-cloudfunctions</p>

<p>package:
  exclude:</p>

<pre><code>- node_modules/**
- .gitignore
- .git/**
</code></pre>

<p>functions:
  ping-command:</p>

<pre><code>handler: ping
events:
  - http: path
memorySize: 256
timeout: 60s
labels: {
    application: slack-slash-command,
    environment: production,
    owner: momota
}
</code></pre>

<p>```</p>

<h3>Functions コードの実装</h3>

<p>Slack から ping を受けたら pong を返す Python コードを書く。</p>

<p>Slack command が実行されとき Slack から送信されるリクエストは以下のようなフォーマットになっている。</p>

<p><code>
token=gIkuvaNzQIHg97ATvDxqgjtO
&amp;team_id=T0001
&amp;team_domain=example
&amp;enterprise_id=E0001
&amp;enterprise_name=Globular%20Construct%20Inc
&amp;channel_id=C2147483705
&amp;channel_name=test
&amp;user_id=U2147483697
&amp;user_name=Steve
&amp;command=/weather
&amp;text=94070
&amp;response_url=https://hooks.slack.com/commands/1234/5678
&amp;trigger_id=13345224609.738474920.8088930838d88f008e0
</code></p>

<p>これに対して、以下のような Json フォーマットでレスポンスを返す必要がある。</p>

<p>```json
{</p>

<pre><code>"response_type": "in_channel",
"text": "It's 80 degrees right now.",
"attachments": [
    {
        "text":"Partly cloudy today and tomorrow"
    }
]
</code></pre>

<p>}
```</p>

<p><code>main.py</code> を編集する。以下のようなコードになる。</p>

<p>```python
import json
from flask import jsonify</p>

<h1>ping を受けたら pong を返す関数</h1>

<p>def ping_command(query):</p>

<pre><code>return 'pong :table_tennis_paddle_and_ball:'
</code></pre>

<p>def format_slack_message(message):</p>

<pre><code>return {
    'response_type': 'in_channel',
    'text': message,
    'attachments': []
}
</code></pre>

<h1>Cloud Functions で起動される関数: メイン関数</h1>

<p>def ping(request):</p>

<pre><code># validate request
if request.method != 'POST':
    return 'Only POST requests are accepted', 405

message = ping_command(request.form['text'])
response = format_slack_message(message)

return jsonify(response)
</code></pre>

<p>```</p>

<p>Flask ライブラリに依存しているので、<code>requirements.txt</code> を作る。</p>

<p><code>sh
$ echo "Flask==1.0.2" &gt;&gt; requirements.txt
</code></p>

<h3>GCP へのデプロイ</h3>

<p><code>serverless deploy</code> により、GCS にソースコードがアップロードされ、Cloud Functions が Python 3.7 で起動する。
これはマネジメントコンソールからも確認できる。</p>

<p>```sh
$ serverless deploy -v                                <br/>
Serverless: Packaging service&hellip;
Serverless: Excluding development dependencies&hellip;
Serverless: Compiling function &ldquo;ping-command&rdquo;&hellip;
Serverless: Uploading artifacts&hellip;
Serverless: Artifacts successfully uploaded&hellip;
Serverless: Updating deployment&hellip;
Serverless: Checking deployment update progress&hellip;
&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..
Serverless: Done&hellip;
Service Information
service: ping
project: YOUR-GCP-PROJECT-ID
stage: dev
region: us-central1</p>

<p>Deployed functions
ping-command
  <a href="https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping">https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping</a>
```</p>

<h3>slack の設定</h3>

<p><a href="https://api.slack.com/apps">Slack API： Applications | Slack</a> から <code>Create New App</code> ボタンをクリックしコマンドを作成する。</p>

<p>設定のやり方はこのあたりを参考にしたら良いと思う。: <a href="https://qiita.com/t-mimura/items/d6541ec596bdebea5a7b">Slackのコマンドを作ろう！！ &ndash; Qiita</a></p>

<p>command 作成時の <code>Request URL</code> に作成した Cloud Functions のエンドポイント <a href="https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping">https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping</a> を指定する。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-config.png" alt="slack command config" /></p>

<p>Slack の設定が終わると、Slack から使えるようになる。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-ping-command.gif" alt="slack command screenshot" /></p>

<p>Functions は初回起動時に少し時間がかかる。
Slack command は 3000 ms (3秒) 以内に応答しないとタイムアウトになってしまう。
タイムアウト時は Slack command を再実行してみたら良い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[serverless framework による AWS Lambda ローカル開発]]></title>
    <link href="http://momota.github.io/blog/2018/11/05/serverless-framework/"/>
    <updated>2018-11-05T20:11:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/11/05/serverless-framework</id>
    <content type="html"><![CDATA[<p><img src="/images/20181105_serverless-framework/serverless-framework-logo.png" alt="serverless framework logo" /></p>

<p><a href="https://serverless.com/">Serverless Framework</a> を使うことにより、FaaS (AWS Lambda, GCP Cloud Functions, Azure functions, など) の開発をローカルで実施できる。
ローカル環境で自分の好きなエディタ・IDEで開発やテストが可能になるし、デプロイも容易になる。</p>

<p>AWS には AWS SAM もあるが、他のクラウドプロバイダでも開発物やノウハウが使い回せることが期待できるので、3rd パーティ製の Serverless Framework を選ぶ。</p>

<p>本稿では、Serverless Framework の導入と、Hello Worldアプリ (AWS Lambda) のデプロイについて書く。</p>

<h2>環境</h2>

<p><code>sh
$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION="Ubuntu 18.04.3 LTS"
</code></p>

<!-- more -->


<h2>Serverless framework のインストール</h2>

<p>まず Node.js (v6.5.0以降) と npm をインストールする。</p>

<p>```sh
$ sudo apt-get update</p>

<p>$ sudo apt-get install nodejs
$ nodejs &mdash;version
v8,10,0</p>

<p>$ sudo apt-get install npm
$ npm &mdash;version
3.5.2
```</p>

<p>npm で serverless framework をインストールする。</p>

<p><code>sh
$ sudo npm install -g serverless
$ serverless --version
1.32.0
</code></p>

<h2>AWS アクセスキーを設定する</h2>

<ol>
<li>AWSアカウントを作り、マネージドコンソールからIAMページにアクセスする</li>
<li>ペインのユーザをクリックし、「ユーザを追加」をクリックする

<ul>
<li>適切なユーザ名を入力する</li>
<li>アクセスの種類の、「プログラムによるアクセス」にチェックをいれ、次へ</li>
<li>アクセス許可の設定は、「既存のポリシーを直接アタッチ」で、「AdministratorAccess」を選択し、次へ</li>
<li>レビューして、問題なければ作成する</li>
</ul>
</li>
<li>アクセスキーIDとシークレットアクセスキーをコピーする</li>
<li>Serverless framework に設定する
```sh

<h1>パターン1: 環境変数に設定</h1>

<p>$ export AWS_ACCESS_KEY_ID=&lt;your-key-here>
$ export AWS_SECRET_ACCESS_KEY=&lt;your-secret-key-here></p></li>
</ol>


<h1>パターン2: serverless config credentials コマンドで設定</h1>

<p>$ serverless config credentials &mdash;provider aws &mdash;key &lt;your-key-here> &mdash;secret &lt;your-secret-key-here></p>

<h1>=> ~/.aws/credentials が生成される</h1>

<p>```</p>

<h2>Serverless framework で Hello World</h2>

<p>まず、作業ディレクトリの作成と、<code>package.json</code> を作成する。</p>

<p><code>sh
$ mkdir my-express-application &amp;&amp; cd my-express-application
$ npm init -f
</code></p>

<p>いくつかのライブラリをインストールする。</p>

<p><code>sh
$ npm install --save express serverless-http
</code></p>

<p>アプリケーションを <code>index.js</code> に書く。</p>

<p>```javascript
const serverless = require(&lsquo;serverless-http&rsquo;);
const express = require(&lsquo;express&rsquo;);
const app = express();</p>

<p>app.get(&lsquo;/&rsquo;, function (req, res) {
  res.send(JSON.stringify({</p>

<pre><code>id: '00001',
message: 'Hello World!',
</code></pre>

<p>  }));
});</p>

<p>module.exports.handler = serverless(app);
```</p>

<p>これはルートパス <code>/</code> にアクセスがあった場合に、 <code>{ id: '00001', message: 'Hello World!' }</code> を返す単純なアプリ。</p>

<p>これをデプロイするため、以下の <code>serverless.yml</code> を作成する。</p>

<p>```yaml
service: my-express-application</p>

<p>provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-1</p>

<p>functions:
  app:</p>

<pre><code>handler: index.handler
events:
  - http: ANY /
  - http: 'ANY {proxy+}'
</code></pre>

<p>```</p>

<p>関数をデプロイする。</p>

<p><code>sh
$ serverless deploy
...snip...
Service Information
service: my-express-application
stage: dev
region: ap-northeast-1
stack: my-express-application-dev
api keys:
  None
endpoints:
  ANY - https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/dev
  ANY - https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/dev/{proxy+}
functions:
  app: my-express-application-dev-app
</code></p>

<p>数分後にデプロイが完了し、<code>endpoints</code> の情報が出力される。
この URL へアクセスし、動作確認する。</p>

<p><code>sh
$ curl -X GET https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/dev
{"id":"00001","message":"Hello World!"}
</code></p>

<p>アプリケーションで定義した JSON が返ってくる。</p>

<h2>参考</h2>

<ul>
<li><a href="https://serverless.com/framework/docs/providers/aws/guide/quick-start/">Serverless Framework &ndash; AWS Lambda Guide &ndash; Quick Start</a></li>
<li><a href="https://serverless.com/framework/docs/providers/aws/guide/credentials/">Serverless Framework &ndash; AWS Lambda Guide &ndash; Credentials</a></li>
<li><a href="https://serverless.com/blog/serverless-express-rest-api/">Deploy a REST API using Serverless, Express and Node.js</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Script でサーバレスな為替レート取得クローラをつくる]]></title>
    <link href="http://momota.github.io/blog/2018/06/25/apps-script/"/>
    <updated>2018-06-25T14:35:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/06/25/apps-script</id>
    <content type="html"><![CDATA[<p><a href="https://script.google.com/home">Google Apps Script</a> (GAS) は、Google が提供する JavaScript プラットフォームで、Google apps (Calendar, Docs, Drive, Gmail, Sheets, and Slides) に対して処理する JavaScript を簡単に書ける。
Excel マクロのすごい版みたいな感覚。</p>

<p>このスクリプトからHTTP GETリクエストを出したり、受け付けたりできる。</p>

<p>今回は、この GAS を使って、無料の Web クローラをサーバレスでつくってみる。</p>

<!-- more -->


<h2>処理の流れ</h2>

<ol>
<li>GAS から為替レート API をたたく</li>
<li>取得した為替レートデータを Google Sheets へ出力する</li>
<li>上記を1分間隔で実行する。</li>
</ol>


<h2>1. GAS から為替レート API をたたく</h2>

<h3>為替レート API の確認</h3>

<p>API は <a href="https://www.gaitameonline.com/rateaj/getrate">https://www.gaitameonline.com/rateaj/getrate</a> を利用する。
ここへ HTTP GET すると以下のような JSON フォーマットが返ってくる。 (整形済み)</p>

<p>```json
{
  quotes=[</p>

<pre><code>{
  high=1.9196,
  low=1.9162,
  ask=1.9212,
  bid=1.9195,
  currencyPairCode=GBPNZD,
  open=1.9167
},
{
  high=82.83,
  low=82.35,
  ask=82.41,
  bid=82.36,
  currencyPairCode=CADJPY,
  open=82.76
},
// ... (snip) ...
</code></pre>

<p>```</p>

<p>JSON の quotes は各通貨ペアの配列になっており、各要素に high, low, &hellip; などのフィールドがある構造になっている。</p>

<p><a href="https://www.gaitameonline.com/robots.txt">robots.txt</a> には特に言及されていないが、非常識なアクセスはしないように注意。</p>

<h3>GAS の作成</h3>

<p><a href="https://script.google.com/home">Apps Script</a> のメニューから <code>+ 新規スクリプト</code> をクリックすると、新規プロジェクトが立ち上がる。
プロジェクト名やスクリプト名は適当に変更する。 (デフォルト <code>Code.gs</code>)</p>

<p>GAS で API をたたく処理は以下のように書ける。</p>

<p>```javascript
function callExchangeAPI() {</p>

<pre><code>var now      = new Date(),
    url      = "https://www.gaitameonline.com/rateaj/getrate",
    response = UrlFetchApp.fetch(url),
    content  = response.getContentText(),
    fx       = JSON.parse(content);

fx.date = now;
Logger.log(fx);
return fx;
</code></pre>

<p>}
```</p>

<p><code>UrlFetchApp.fetch(url)</code> で API の URL をたたきにいける。
<code>fx.date = now</code> で、取得した JSON に取得日時フィールド <code>date</code> を足している。</p>

<p>上記をコピペして実行する (▶ボタンを押す) と初回実行時には以下のような確認ダイアログがでるので <code>Review Permissions</code> を押して許可する。</p>

<p><img src="/images/20180625_gas/01_notice_initial_run.png" alt="01_notice_initial_run" /></p>

<p>その後、Choose an account画面で自分のアカウントを選ぶと、確認画面 <code>YOUR-PROJECT-NAME wants to access your Google Account</code> が出てくるので <code>ALLOW</code> ボタンを押す。そうすると実行できる。</p>

<p><code>Logger.log(fx)</code> 部分でログ出力しているので、メニュー <code>View</code> > <code>Logs</code> からログ出力できていることが確認できる。
ログは以下のように出力される。</p>

<p><code>
[18-06-24 23:24:06:486 PDT] {date=Mon Jun 25 15:24:06 GMT+09:00 2018, quotes=[{high=1.9224, low=1.9162, ask=1.9223, bid=1.9206, currencyPairCode=GBPNZD, open=1.9167}, {high=82.83, low=82.22, ask=82.45, bid=82.40, currencyPairCode=CADJPY, open=82.76}, {high=1.7870, low=1.7817, ask=1.7855, bid=1.7846, currencyPairCode=GBPAUD, open=1.7817},
... snip ...
</code></p>

<h2>2. 取得した為替レートデータを Google Sheets へ出力する</h2>

<p>取得した為替レートを以下のように Google sheetsに出力する。</p>

<p><img src="/images/20180625_gas/03_sheet.png" alt="03_sheet" /></p>

<p>シートの 1 行目はヘッダ、列の定義は以下。通貨ペア種別すべての Ask や Bid などを取得したタイミングごとに1行で表現する。</p>

<p><code>
date, currencyPairCode1, high1, low1, ask1, bid1, open1, currencyPairCode2, high2, ...
</code></p>

<p>まずは、出力先にあたる Google sheets を新規作成し、その URL をコピーする。</p>

<p>個別の URL をコードに埋め込みたくないので、<code>Script properties</code> に値をセットしてそれをコードの中から利用する。</p>

<p>GAS のメニュー <code>File</code> > <code>Project properties</code> から <code>Script properties</code> タブへ移動する。
<code>+ Add row</code> のリンクから行をエントリーする。
<code>Property</code> に SHEET_URL、<code>Value</code> に先程コピーした Google sheets の URLを登録する。
登録するURL は <code>https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxx/edit</code> のような形式。</p>

<p>上述した <code>Script properties</code> から値を参照して、Sheet オブジェクトを取得する処理は以下。</p>

<p>```javascript
  function() {</p>

<pre><code>if(this.getSheet.sheet) { return this.getSheet.sheet; }

var SHEET_URL = PropertiesService.getScriptProperties().getProperty('SHEET_URL');
if (!SHEET_URL) {
  throw 'You should set "SHEET_URL" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

var sheets = SpreadsheetApp.openByUrl(SHEET_URL);
this.getSheet.sheet = sheets.getActiveSheet();
return this.getSheet.sheet;
</code></pre>

<p>  }
```</p>

<p>API から取得してきた JSON データをシートに出力する。</p>

<p>シートに対して入力するには、<code>sheet.getRange(row, column).setValue(something)</code> のようにシートの行 (row) と列 (column) を指定して setValue を呼べば良い。</p>

<p>```javascript
  function(ex_json) {</p>

<pre><code>var sheet = this.getSheet();

// データ追加行 (Sheetの最終行 + 1) を取得する
var last_row = sheet.getLastRow() + 1;

var col = 1;
sheet.getRange(last_row, col++).setValue(ex_json.date);

for each(var quote in ex_json.quotes) {
  sheet.getRange(last_row, col++).setValue(quote.currencyPairCode);
  sheet.getRange(last_row, col++).setValue(quote.high);
  sheet.getRange(last_row, col++).setValue(quote.low);
  sheet.getRange(last_row, col++).setValue(quote.ask);
  sheet.getRange(last_row, col++).setValue(quote.bid);
  sheet.getRange(last_row, col++).setValue(quote.open);
}
</code></pre>

<p>  }
```</p>

<p>上記をまとめると以下。
以下をコピペして実行する (▶ボタンを押す) と Google sheets に為替データが挿入される。
初回実行時に権限の確認ダイアログがでると思うが許可してあげる。</p>

<p>```javascript
// Main
function scrapeExchangeToSheet() {
  var ex_json = exchange.callExchangeAPI();
  exchange.writeSheets(ex_json);
}</p>

<p>var exchange = {
  getSheet: function() {</p>

<pre><code>if(this.getSheet.sheet) { return this.getSheet.sheet; }

var SHEET_URL = PropertiesService.getScriptProperties().getProperty('SHEET_URL');
if (!SHEET_URL) {
  throw 'You should set "SHEET_URL" property from [File] &gt; [Project properties] &gt; [Script properties]';
}

var sheets = SpreadsheetApp.openByUrl(SHEET_URL);
this.getSheet.sheet = sheets.getActiveSheet();
return this.getSheet.sheet;
</code></pre>

<p>  },</p>

<p>  // call exchange API
  callExchangeAPI: function() {</p>

<pre><code>var now      = new Date(),
    url      = "https://www.gaitameonline.com/rateaj/getrate",
    response = UrlFetchApp.fetch(url),
    content  = response.getContentText(),
    fx       = JSON.parse(content);

fx.date = now;
return fx;
</code></pre>

<p>  },</p>

<p>  // Write exchange data (JSON) to the Google Sheet
  writeSheets: function(ex_json) {</p>

<pre><code>var sheet = this.getSheet();

// get last row to add exchange data
var last_row = sheet.getLastRow() + 1;

var col = 1;
sheet.getRange(last_row, col++).setValue(ex_json.date);

for each(var quote in ex_json.quotes) {
  sheet.getRange(last_row, col++).setValue(quote.currencyPairCode);
  sheet.getRange(last_row, col++).setValue(quote.high);
  sheet.getRange(last_row, col++).setValue(quote.low);
  sheet.getRange(last_row, col++).setValue(quote.ask);
  sheet.getRange(last_row, col++).setValue(quote.bid);
  sheet.getRange(last_row, col++).setValue(quote.open);
}
</code></pre>

<p>  }
}
```</p>

<h2>3. 上記を1分間隔で実行する。</h2>

<p>上記の処理を定期的に実行する。</p>

<p>時計マークのアイコンをクリックする。もしくは、メニュー <code>Edit</code> > <code>Current project's trigger</code> を選択する。
そうするとダイアログが出てくるので、<code>No triggers set up. Click here to add one now.</code> をクリックする。</p>

<p><code>Run</code> にはメイン処理の <code>scrapeExchangeToSheet</code>, <code>Events</code> には好きな起動時間を設定できる。
ここでは1分間隔で実行するため、<code>Time-driven : Minutes timer: Every minute</code> を選択する。</p>

<p>1分間隔で Google sheets にデータが挿入されていることが確認できる。</p>
]]></content>
  </entry>
  
</feed>
