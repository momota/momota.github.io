<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kubernetes | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/kubernetes/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2019-03-27T14:42:42+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[参加レポート]Google Cloud Kubernetes Day]]></title>
    <link href="http://momota.github.io/blog/2019/03/27/gc_k8sday/"/>
    <updated>2019-03-27T13:42:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/03/27/gc_k8sday</id>
    <content type="html"><![CDATA[<ul>
<li>2019/03/26(火)、渋谷で行われた <a href="https://cloudplatformonline.com/2019-google-cloud-kubernetes-day-0326.html">Google Cloud Kubernetes Day</a> への参加レポート。</li>
<li>会場の約半数が k8s をすでに利用、サービスメッシュは1割程度という感じで、プロダクション環境での採用をやっていかないとまずいという雰囲気だった。</li>
<li>ハッシュタグ: <a href="https://twitter.com/hashtag/gc_k8sday">#gc_k8sday</a></li>
<li>資料が公開されたらリンクを張ったりアップデートする予定。</li>
</ul>


<!-- more -->


<h1>「Kubernetes/Container による開発」の導入難易度とメリット</h1>

<ul>
<li>株式会社サイバーエージェント　青山 真也 氏</li>
<li><p><a href="https://twitter.com/amsy810">@amsy810</a></p></li>
<li><p>サイバーエージェントとk8s</p>

<ul>
<li>2016年頃からk8sを採用</li>
<li>GKEとオンプレの採用が多い (半々くらい)</li>
<li>新規事業の多くがk8s/Containerを利用している</li>
<li>レガシーシステムからコンテナへの移行も実施中</li>
</ul>
</li>
<li>k8s

<ul>
<li>コンテナオーケストレーションシステムの一つ</li>
<li>Borgベースなので、Googleの経験がk8sに引き継がれている</li>
<li>現在はCNCFが中立的にホスト。コミュニティによって改良されている</li>
</ul>
</li>
<li>オーケストレーションとは

<ul>
<li>プロビジョニングの一つ

<ol>
<li>ブートストラッピング: サーバの準備、OSのインストール

<ul>
<li>Terraform</li>
</ul>
</li>
<li>コンフィグレーション: サーバのセットアップ、ミドルウェアのインストール、セットアップ

<ul>
<li>Chef, Ansible, Puppet, Salt</li>
</ul>
</li>
<li>オーケストレーション: アプリケーションの配置

<ul>
<li>Fabric, Capistrano</li>
</ul>
</li>
</ol>
</li>
<li>イメージ化による高い再現性を保つようになってきた

<ul>
<li>Packer, Cloud Image, OpenStack Heat, CloudFormation</li>
</ul>
</li>
<li>容易なイメージ化、軽量なイメージ、高速な起動と停止。特定クラウドへの依存がない。

<ul>
<li>Docker, k8s</li>
</ul>
</li>
</ul>
</li>
<li>Cloud Nativeとは

<ul>
<li>疎結合なシステム</li>
<li>復元力がある</li>
<li>管理しやすい</li>
<li>可観測である</li>
<li>堅牢な自動化により、頻繁かつ期待通りに最小限の労力で大きな変更が可能</li>
</ul>
</li>
<li>CNCF が Cloud Native の進め方をTRAIL MAPとして定義: <a href="https://github.com/cncf/landscape">cncf/landscape</a></li>
</ul>


<p><img src="/images/20190327_gc_k8sday/cncf-trail-map.png" alt="CNCF trail map" /></p>

<h2>Containerization</h2>

<p>レガシーシステムのマイグレーションもスタート地点はここから。実行環境込みのアプリケーションをSystemdに置き換えるイメージ</p>

<ol>
<li>容易なイメージかと再現性 by Docker

<ul>
<li>アプリケーションと実行環境のイメージ化: 再現性の高い環境</li>
<li>ローカル環境でも同等の動作が保証される</li>
</ul>
</li>
<li>軽量なイメージ by Docker

<ul>
<li>VMイメージと比べて軽量</li>
<li>単一プロセスのみを可動させるため、軽量OSの選定もしやすい: Alpine</li>
</ul>
</li>
<li>高速な起動と停止 by Docker

<ul>
<li>VMよりも起動停止が高速: プロセスの起動停止に相当</li>
<li>高速なスケールアウトや障害時の復旧が可能</li>
</ul>
</li>
</ol>


<h2>Orchestration</h2>

<ol>
<li>高い抽象度とクラウド非依存 by k8s

<ul>
<li>Load BalancerやStorageなども抽象化</li>
<li>利用者から見るとクラウド固有の知識がほぼ不要 vs Terraform, OpenStack heat, AWS CloudFormation</li>
<li>ベンダーニュートラルな実行基盤</li>
<li>基本的にはポータビリティがある</li>
</ul>
</li>
<li>宣言的なAPIとCode by k8s

<ul>
<li>構成情報はManifestsで宣言的に記述してAPIに登録: Infrastructure as Code</li>
<li>Control LoopとReconciliation</li>
</ul>
</li>
<li>洗練された自動化 by k8s

<ul>
<li>障害時のセルフヒーリング</li>
<li>アプリケーションのアップグレード</li>
<li>コンテナ単位のヘルスチェック</li>
<li>コンテナ起動前の初期化処理</li>
<li>コンテナ停止時のSIGNAL</li>
<li>コンテナ開始直後、停止直前のフック</li>
</ul>
</li>
<li>豊富なエコシステムと拡張性 by k8s

<ul>
<li><img src="/images/20190327_gc_k8sday/cncf-landscape.png" alt="CNCF landscape" /></li>
<li>例) Managed Service via Kubernetes (Cloud SQL)</li>
</ul>
</li>
</ol>


<h2>Cloud Nativeの難しさ</h2>

<ol>
<li>アプリケーションのアーキテクチャ

<ul>
<li>マイクロ/ミニサービスに適した技術</li>
<li>いつでも停止できるようにSIGTERMのハンドリングは必須: ノードのアップグレード、コンテナイメージのアップデート</li>
<li>Service Discovery経由で通信</li>
<li>ネットワークに一部制約がある (Source IPが消失する、など)</li>
</ul>
</li>
<li>セキュリティと分離性

<ul>
<li>仮想化の分離性: gVisorなどを利用する</li>
<li>ネットワークの分離性</li>
</ul>
</li>
<li>k8sの学習コスト

<ul>
<li>学習コストは小さくないものの懸念するほどではない</li>
</ul>
</li>
<li>k8sクラスタの管理

<ul>
<li>GKEを利用することでだいぶ楽できる</li>
</ul>
</li>
</ol>


<h2>マネージドk8sの選定基準</h2>

<ul>
<li>マネージドの範囲</li>
<li>クラスタマネジメントの自動化機能</li>
<li><p>k8sバージョンの追随スピード</p></li>
<li><p>サイバーエージェントでは、アドテク分野やアベマTVなどいろいろなヘビーワークロードにもk8sで実装し、耐えうるシステムを構築</p></li>
<li>ステートフル部分はマネージドサービスを利用する: Cloud SQL、BigQuery、…</li>
</ul>


<h1>コンテナ開発プラットフォームに GKE を選択すべき 7 つの理由</h1>

<ul>
<li>Google Cloud Japan　田中 宏樹氏、岩成 祐樹氏</li>
</ul>


<h2>Security</h2>

<ul>
<li>セキュリティがクラウドの長所に</li>
<li>GCPでは、徹底的な防御がデフォルトでON

<ul>
<li>通信の暗号化</li>
<li>ストレージの暗号化</li>
<li>認証・認可</li>
<li>ハードウェア</li>
</ul>
</li>
<li>コンテナのセキュリティ

<ul>
<li>インフラストレクチャセキュリティ

<ul>
<li>インフラはコンテナを開発するのに安全か</li>
<li>GKE: Use RBAC and IAM</li>
<li>プライベートクラスタと承認済みネットワーク</li>
<li>Cloud Armor: スケーラブルなDDoS対策</li>
<li>BackendConfg</li>
</ul>
</li>
<li>ソフトウェアサプライチェーン

<ul>
<li>作成したコンテナはビルド、デプロイして問題ないか</li>
<li>CI/CDパイプラインは信頼できないデプロイを止めてくれない

<ul>
<li>イメージのメタデータ</li>
<li>Binary Authorization: QAされたコードだけを実行</li>
</ul>
</li>
<li>Container Registry: 脆弱性スキャン</li>
<li>Binary Authorization: 信頼されたコンテナイメージのみをGKE上にデプロイすることを保証するセキュリティコントロール機能</li>
</ul>
</li>
<li>ランタイムセキュリティ

<ul>
<li>作成したコンテナは実行して問題ないか</li>
<li>Container Optimized OS: GCE, GKEで利用可能な軽量なイメージ

<ul>
<li>runcの脆弱性 CVE-2019-5736の影響を受けなかった</li>
</ul>
</li>
<li>3rdパーティツールの利用: aqua. sysdig, stackrock&hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Network</h2>

<ul>
<li>さまざまなGCPサービスとの統合</li>
<li>Google Cloud Load Bakancing</li>
<li>世界中のCloud CDNとLB</li>
<li>Container Native Load Balancing

<ul>
<li>LBからVM(Node)を介さずPodへ直接トラフィックを転送</li>
<li>Double-hop問題を解決</li>
<li>レイテンシーとルーティング問題を解決</li>
</ul>
</li>
</ul>


<h2>Hybrid Cloud</h2>

<ul>
<li>ゴール: コードをどこでも実行できる環境を整える</li>
<li>GKE On-prem

<ul>
<li>オンプレミスのクラスタをGoogle Cloud Consoleから一元的に管理</li>
<li>クラスタ集中管理のメリット: GKEとGKE On-Premで同じツールを使ってクラスタの構築、構成、管理を実施</li>
<li>同一のクラスタ環境</li>
</ul>
</li>
<li>事例

<ul>
<li>メルカリ: オンプレミスからの移行</li>
</ul>
</li>
</ul>


<h2>Observability</h2>

<ul>
<li>ロギング

<ul>
<li>GCP内部の情報に加えて、GCPの外部で発生するログについても収集できる基盤が必要</li>
</ul>
</li>
<li>モニタリング</li>
<li>統合管理プラットフォーム

<ul>
<li>DevOpe/SRE</li>
<li>Developer</li>
<li>SecOps</li>
</ul>
</li>
<li>Stackdriver: アプリケーション開発者と運用担当者にLoggingとMonitoring機能を提供する</li>
<li>Stackdriver Kubernetes Monitoring

<ul>
<li>k8sのワークロードに最適化されたStackdriverのツール</li>
</ul>
</li>
<li>work with Open Source: Prometheus</li>
</ul>


<h2>Contribution</h2>

<ul>
<li>Open source is free like a puppy</li>
<li>GKE is going to ..

<ul>
<li>To be Reliable

<ul>
<li>Regional clusters</li>
<li>Regional Persistent Disks</li>
</ul>
</li>
<li>To be Scalable

<ul>
<li>HPA: 水平スケーリング</li>
<li>VPA: Podの垂直スケーリング</li>
<li>CA: Nodeの水平スケーリング</li>
<li>Node Auto-Provisioning</li>
</ul>
</li>
<li>To be Open

<ul>
<li>OSS Friendly ecosystem

<ul>
<li>Skaffold</li>
<li>Kanico</li>
<li>Knative</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>GKE を用いたレガシー システムからのリプレース事例</h1>

<ul>
<li>富士フイルム株式会社　小林 大助 氏</li>
</ul>


<h2>プロジェクト概要</h2>

<ul>
<li>FUJIFILM Prints &amp; Gifts

<ul>
<li><a href="https://pg-ja.fujifilm.com/photo-print">写真プリント | FUJIFILMプリント＆ギフト | 富士フイルムの公式ストア</a></li>
<li><a href="https://fujifilmmall.jp/walldecor/?_ga=2.101125698.254826136.1553583454-463832683.1553583454">WALL DECOR（ウォールデコ）｜富士フイルム</a></li>
</ul>
</li>
<li>レガシーシステム運用10年超え

<ul>
<li>保守・運用コスト大</li>
<li>機能改善スピード低</li>
</ul>
</li>
<li>ユーザの消費動向の変化

<ul>
<li>モノ消費からコト消費へ</li>
</ul>
</li>
</ul>


<h2>GKE利用までの経緯</h2>

<ul>
<li>S→T→P→D→C→A

<ul>
<li>PDCAに加えて See + Think</li>
<li>富士フィルムではSTを重視</li>
</ul>
</li>
<li>モノリシックなアプリケーションにより影響範囲の見定めが難しい</li>
<li>特に苦労しているのは季節イベント、キャンペーン

<ul>
<li>負荷量の変動に対してシステムが追随しにくい</li>
<li>スケーラビリティを確保しやすい仕組みを最優先にする</li>
<li>コンテナを利用</li>
</ul>
</li>
<li>保守面を意識すれば、オーケストレーションツールは使いたい。課題が2つ

<ul>
<li>何が標準か

<ul>
<li>流行度</li>
<li>[社内の]覇権争い</li>
<li>仕様策定中</li>
</ul>
</li>
<li>自分たちで運用できるか

<ul>
<li>使いこなせないと意味がない</li>
<li>運用環境に耐えうるレベルか</li>
</ul>
</li>
</ul>
</li>
<li>k8sがデファクトスタンダードになった: 規格争いによる技術の陳腐化懸念が後退</li>
<li>主要ベンダがk8sマネージドサービスを展開</li>
<li>2018年1月時点で日本国内GAしているのはGoogeのみ</li>
<li>動作安定性</li>
</ul>


<h2>取り組む上での課題: 組織面</h2>

<ul>
<li>周囲の理解

<ul>
<li>技術的優位性を説明できないといけない</li>
<li>総論は賛成、各論は？</li>
<li>リスクを背負えるか: 納期遵守のPrj</li>
</ul>
</li>
<li>技術学習、解説資料作成、説明行脚</li>
<li>現場レベルでは味方は多かった</li>
<li>リスクに対しては、バックアッププランの準備、技術習得状況の説明、Googleエンジニアのバックアップ</li>
</ul>


<h2>取り組む上での課題: 開発面</h2>

<ul>
<li>技術習得: 独学とハンズオン</li>
<li>事前調査</li>
<li>運用: ログ出力やアラート関連は、メトリクスの書き方が困難だった</li>
<li>設計・設定: マニフェストファイルの書き方、永続データの取扱いに関する適切なサービス選定がむずい</li>
<li>基本設計: サービス分割はアトミックにすると障害復旧が難しいので、意味のある塊に</li>
<li>商用利用に向けての課題: PaaSの特徴や仕様についてGoogleエンジニアのサポートを受けながら選定、確認を進める</li>
<li>レガシーシステムとの連携: 基本は新システム側が全面降伏で対応</li>
</ul>


<h2>効果</h2>

<ul>
<li>スケーラビリティの確保はできた。ただし、今後悪化しないように管理していく必要がある</li>
<li>保守運用コストは改善された

<ul>
<li>ランニングコスト 3/5</li>
<li>導入8ヶ月でサービスダウンタイムなし。安定稼働中。</li>
</ul>
</li>
<li>機能改善スピードは向上できた

<ul>
<li>対応速度が約2倍に</li>
</ul>
</li>
<li>学習コストは小さくなかったが、リターンが大きかった</li>
<li>アプリ開発に集中できる環境を整えることができた</li>
<li>組織の壁は高い、乗り越えるには熱意が必要。仲間がいれば突破しやすい</li>
<li>クラウドベンダエンジニアの協力は偉大</li>
</ul>


<h1>コンテナによる開発と運用の進化</h1>

<ul>
<li><p>Google Cloud Japan　篠原 一徳氏、村上 大河氏</p></li>
<li><p>3つのポイント</p>

<ul>
<li>人 (ビジネス・技術)

<ul>
<li>CxO</li>
<li>Manager</li>
<li>Business</li>
<li>Tech</li>
</ul>
</li>
<li>プロセス

<ul>
<li>DevOps</li>
<li>SRE</li>
<li>Scrum (アジャイル開発)</li>
<li>Waterfall</li>
</ul>
</li>
<li>テクノロジー

<ul>
<li>クラウド</li>
<li>マイクロサービスアーキテクチャ</li>
<li>CI/CD</li>
</ul>
</li>
</ul>
</li>
<li>マイクロサービスとは

<ul>
<li>2014年にJames LewisとMartin Fowlerが提唱</li>
<li>機能ごとに独立したアプリケーションに分割</li>
<li>各サービスは単一の目的を持つ</li>
<li>分散システム、サービス間は疎結合、軽量なAPIなどでやりとり</li>
</ul>
</li>
<li>AsIs to ToBe: Monolith to Microservice

<ul>
<li>新規サービスからやる (新規機能から抜き出す)</li>
<li>既存のサービスを部分的に置き換える

<ul>
<li>Domain (専門領域) を抜き出し、マイクロサービス化する</li>
<li>チームも抜き出していくことが重要</li>
</ul>
</li>
</ul>
</li>
<li>マイクロサービス化を進めていくと、カオス化</li>
<li>The problem

<ul>
<li>分散アーキテクチャへの移行により、今までのアーキテクチャ向けに最適化された方法では監視、管理、保護が困難</li>
</ul>
</li>
<li>4 challenges of Microservices

<ul>
<li>プロセス内のコミュニケーションから、プロセス外コミュニケーションへの置き換え: RPC + APIゲートウェイ</li>
<li>分散システム導入により複雑化するシステムの効率的な管理: サービスメッシュ</li>
<li>マイクロサービス協会が引き起こすデータサイロの解決: データレイク</li>
<li>アプリケーションコード以外のコーディングを少なくする: 自動化 (CI/CD)</li>
</ul>
</li>
<li>課題と2つの実現方法

<ul>
<li>呼び出し先マイクロサービスのトラッキングが困難

<ul>
<li>REST API (HTTP1.1)

<ul>
<li>Open APIでメッセージフォーマットを定義</li>
<li>互換性管理のためのガイドラインの作成を推奨</li>
</ul>
</li>
<li>gRPC (HTTP2.0)

<ul>
<li>Protocol Buffersでメッセージフォーマットを定義</li>
<li>Language Guideに従うと、下位互換性の担保が容易</li>
</ul>
</li>
</ul>
</li>
<li>バージョン管理ガイド

<ul>
<li><a href="https://cloudplatform-jp.googleblog.com/2017/07/versioning-APIs-at-Google.html">Google Cloud Platform Japan 公式ブログ： Google における API のバージョニング</a></li>
<li>Google 内部のAPIバージョニング手法を公開</li>
<li>Cloud Endpointで実現をサポート</li>
</ul>
</li>
<li>API設計ガイド

<ul>
<li><a href="https://cloud.google.com/apis/design/">API 設計ガイド | Cloud API | Google Cloud</a></li>
<li>Google内部のAPI設計のスタンダードを公開</li>
<li>Cloud Endpointで簡単に実現</li>
</ul>
</li>
<li>Cloud Endpointsによるマイクロサービスの実現

<ul>
<li>内部はgRPC、外部はRESTで公開も可能</li>
</ul>
</li>
</ul>
</li>
<li>サービスメッシュ

<ul>
<li>マイクロサービス環境において、サービスディスカバリ、トラフィックコントロール、認証・認可、メトリクス収集などの機能を担うソフトウェア</li>
<li>アプリケーション自体に手を入れるのではなく、サイドカーで実現</li>
<li>Istio: GoogleとIBMが中心に開発しているサービスメッシュ実装のOSS

<ul>
<li>ProxyとしてEnvoyを利用</li>
<li>トラフィックコントロール

<ul>
<li>これまでトラフィックコントロールはインフラストラクチャと結びついていた</li>
<li>トラフィックスプリッティング</li>
</ul>
</li>
<li>セキュリティ

<ul>
<li>サービス間のセキュリティを強化</li>
<li>RBAC</li>
</ul>
</li>
<li>可観測性

<ul>
<li>Istioの監視

<ul>
<li>Mixer: テレメトリの収集</li>
<li>Prometheus</li>
<li>Grafana</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Istio on GCP</li>
</ul>
</li>
<li>データレイク

<ul>
<li>マイクロサービスにより、データのサイロ化が進む</li>
</ul>
</li>
<li>CSM (Managed Istio) の Alphaユーザを募集中: <a href="https://docs.google.com/forms/d/1Qhj4qViWgaSAf9KUfowWRdVS6OHwg9cgEdYX2xbpLeM/viewform?edit_requested=true">https://docs.google.com/forms/d/1Qhj4qViWgaSAf9KUfowWRdVS6OHwg9cgEdYX2xbpLeM/viewform?edit_requested=true</a></li>
</ul>


<h1>事例セッション： FreakOut の広告プロダクトでの GKE 活用事例と GKE 新機能の導入について</h1>

<ul>
<li><p>株式会社フリークアウト　西口 次郎 氏</p></li>
<li><p>RED: Freakout DSP</p></li>
<li>ASE: 位置情報マーケティングプラットフォーム</li>
<li>RED for Publishers: アドネットワーク基盤</li>
<li>LayApp: アプリエンゲージメントプラットフォーム</li>
</ul>


<h2>プロダクション環境でのGKE運用</h2>

<ul>
<li><a href="https://cloudplatform-jp.googleblog.com/2018/09/freakout-kubernetes-engine.html">Google Cloud Platform Japan 公式ブログ： 株式会社フリークアウトの導入事例： フルマネージドな Kubernetes Engine を駆使して、大規模アドプラットフォームをプレミアム メディア向けに提供</a></li>
<li>GKE

<ul>
<li>サービスごとにクラスタを分割</li>
<li>広告配信、UI、バッチ</li>
<li>CronJobを利用</li>
<li>カナリーリリース環境を用意</li>
<li>Stackdriverを活用</li>
</ul>
</li>
<li>Stackdriver

<ul>
<li>Monitoring

<ul>
<li>Prometheusと併用</li>
</ul>
</li>
<li>Logging

<ul>
<li>コンテナのエラーログなどを集約</li>
<li>アラート: Pub/Sub → Cloud Functions → Slack</li>
</ul>
</li>
<li>Profiler

<ul>
<li>常に最新のコーdンのプロファイルを可視化、比較</li>
</ul>
</li>
</ul>
</li>
<li>BigQuery

<ul>
<li>すべてのアクセスログ、アプリケーションログを集約

<ul>
<li>数十億レコード/日</li>
</ul>
</li>
<li>fluentd (Sidecar Container)からStreaming insert</li>
<li>可視化はre:dash</li>
<li>MySQLのマスタデータもインポートしている</li>
</ul>
</li>
<li>Vulnerability scanning

<ul>
<li>GCRの機能</li>
<li>Debian, Ubuntu, Alpineが対象</li>
<li>過去30日間にpullされたイメージが対象</li>
<li>脆弱性が見つかった際、Pub/SubにPublishされる (Cloud FunctionsでSlack通知)</li>
</ul>
</li>
<li>kustomise

<ul>
<li>k8s のYAMLファイルのカスタマイズ</li>
<li>kubectrlのサブコマンドとしてマージされた</li>
<li>Production/Staging/Cannaryなど環境ごとの設定を上書き</li>
</ul>
</li>
<li>Other tools

<ul>
<li>stern

<ul>
<li>複数のコンテナのログをすばやく確認できる</li>
</ul>
</li>
<li>kubectx

<ul>
<li>クラスタ切り替え</li>
<li>複数クラスタ/開発・本番環境の切り替えに</li>
<li>ネームスペースの切り替えも可能</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>GKEでのCI/CD</h2>

<ul>
<li>Github</li>
<li>CircleCI</li>
<li>Cloud Build</li>
<li>Cloud Container Registry</li>
<li>Cloud Pub/Sub: ビルド通知</li>
<li>Cloud Functions: Slack通知</li>
<li>Slack: エンジニア通知</li>
</ul>


<h3>CIのフロー</h3>

<ol>
<li>GithubへのPush</li>
<li>テスト・ビルド

<ul>
<li>CircleCIでのテスト</li>
<li>CloudBuildでのビルド</li>
</ul>
</li>
<li>カナリアリリース</li>
</ol>


<h2>CDのフロー</h2>

<ol>
<li>GithubでPRをマージ</li>
<li>ビルド&amp;デプロイ

<ul>
<li>docker build</li>
<li>docker push</li>
<li>kubectrl set image</li>
</ul>
</li>
<li>notification

<ul>
<li>Pub/SubへのPublish</li>
<li>Cloud FunctionsでSlackツウイ</li>
</ul>
</li>
</ol>


<h2>GKE 新機能の利用</h2>

<ul>
<li>VPC-native cluster (alias IP)</li>
<li>Cloud NAT

<ul>
<li>マネージドNATサービス</li>
<li>アウトバウンドアクセスのゲートウェイ</li>
<li>外部アクセスするIPアドレスを限定する用途で使用

<ul>
<li>IPアドレスの事前登録が必須な外部API</li>
</ul>
</li>
</ul>
</li>
<li>Network Endpoint Groups

<ul>
<li>コンテナネイティブの負荷分散</li>
<li>Instance Groupはiptablesを介してPodへルーティングしていたが、Podへ直接ルーティング可能</li>
<li>ネットワークパフォーマンス改善</li>
</ul>
</li>
<li>BackendConfig Custom resource</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[参加レポート]Developers Summit 2019]]></title>
    <link href="http://momota.github.io/blog/2019/02/15/devsumi/"/>
    <updated>2019-02-15T21:21:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/02/15/devsumi</id>
    <content type="html"><![CDATA[<p><img src="/images/20190214_devsumi/devsumi_logo.png" alt="devsumi logo" /></p>

<ul>
<li>2019/02/14(木)～02/15(金)、目黒で行われた<a href="https://event.shoeisha.jp/devsumi/20190214">Developers Summit 2019</a>への参加レポート。</li>
<li>CodeZineさんが発表資料をまとめてくれている > <a href="https://codezine.jp/article/detail/11383">デブサミ2019、講演関連資料まとめ：CodeZine（コードジン）</a></li>
</ul>


<!-- more -->


<h1>2/14(木)</h1>

<h2>イノベーションを支えるアマゾン文化</h2>

<ul>
<li>AWS 西谷 圭介さん</li>
<li><a href="https://twitter.com/Keisuke69">Keisuke Nishitani(@Keisuke69)さん | Twitter</a></li>
</ul>


<h3>The culture of innovation</h3>

<ul>
<li>ジェフ・ベゾス「イノベーションはクリエイティビティを開放する」</li>
<li>Amazon: 地球上で最もお客様を大切にする企業であること

<ul>
<li>お客様の生活を楽にする</li>
</ul>
</li>
</ul>


<h3>Our culture of Innovation</h3>

<ul>
<li>Customer Obsession: お客様への執心

<ul>
<li>Always work BACKWORDS from the customer: 常にお客様を起点に行動する</li>
</ul>
</li>
<li>Long Term Thinking: 顧客重視と長期的視点

<ul>
<li>1997年の株主へのレターで「お客様への徹底的なフォーカス」と「長期的視点での投資を継続」と言及</li>
<li>Amazon Flex: ライドシェアドライバーを集めるシェアリングサービス</li>
</ul>
</li>
<li>If you want to be inventive, you have to be willing to fail

<ul>
<li>Kindle: 初代Kindleは大抵の本より重くださかった</li>
<li>Amazonはさまざまな領域でイノベーションを起こし続けている

<ul>
<li>配送センターのロボット、ドローン</li>
<li>Amazon Go</li>
</ul>
</li>
</ul>
</li>
<li>You have to be willing to be misunderstood for a long time</li>
</ul>


<h3>イノベーションのための組織づくり</h3>

<ul>
<li>メカニズム

<ul>
<li>Working Backwards &ndash; PR and FAQs

<ul>
<li>Press Release

<ul>
<li>主題、副題、サマリ、課題、解決、引用、使い方、ユーザからの声の引用、次のアクション</li>
<li>PRがDecisionを後押しする</li>
<li>内部で何度もレビューして成熟させていく</li>
</ul>
</li>
<li>FAQ

<ul>
<li>具体的なアイデアとデータを提供するFAQの準備</li>
<li>顧客とステークホルダー両方のFAQを含める</li>
<li>聞かれたら嫌なハードな質問を含める</li>
<li>質問を集めるためにもPRは早めにシェアする</li>
</ul>
</li>
<li>User Manual</li>
<li>The 5 Questions

<ol>
<li>顧客は誰か</li>
<li>顧客の機会・課題はなにか</li>
<li>最も顧客の利益に成るものは</li>
<li>どう顧客のニーズやウォンツを知るのか</li>
<li>UX</li>
</ol>
</li>
<li>Visuals

<ul>
<li>ラフアイデア</li>
</ul>
</li>
<li>(参考) 6 pager / 1 pager

<ul>
<li>アマゾンでは会議でのプレゼンテーションツールの利用はほとんどない

<ul>
<li>プレゼンは話し手の話術に依存する</li>
<li>聞き手にとって捉え方が変わってしまう恐れがある</li>
</ul>
</li>
<li>会議は6 pager と呼ばれる形式のレポートで行われ、最初の数分は 6 pager を静かに読むことから始まる</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>アーキテクチャー

<ul>
<li>Self-service Platform without Gatekeeper を重視</li>
<li>2001年頃、アプリは巨大なモノリスだった。2001-2009からDvelopment transformation</li>
<li>マイクロサービス化

<ul>
<li>単一目的のサービス</li>
<li>お互いブラックボックス</li>
</ul>
</li>
</ul>
</li>
<li>カルチャー

<ul>
<li>社員一人ひとりがリーダーであり、そう振る舞うことが求められる</li>
<li>Our Leadership Principles: <a href="https://www.amazon.jobs/principles">https://www.amazon.jobs/principles</a>

<ul>
<li>Customer Obsession

<ul>
<li>すべてお客様から</li>
</ul>
</li>
<li>Ownership

<ul>
<li>長期的な視野</li>
<li>DevOps: 開発・テスト・運用

<ul>
<li>テスト重視: Automate Everything! (テスト自動化、CI)</li>
<li>運用重視: Automate Everything!</li>
</ul>
</li>
</ul>
</li>
<li>Dive Deep / Learn and Be Curious

<ul>
<li>Root cause analysis</li>
<li>運用: 5whys</li>
<li>Brownbag session</li>
</ul>
</li>
<li>Frugality

<ul>
<li>倹約</li>
<li>お客様にとって重要でないことにはお金を使わない</li>
<li>発明を育てる源</li>
<li>Door Desk: 社員のワークデスクはドア用の板に木の足を付けた簡素なものを利用 (創業時)</li>
</ul>
</li>
<li>Think Big

<ul>
<li>お客様に貢献するために従来と異なる新たな視点を持つ</li>
</ul>
</li>
<li>Bias for Action

<ul>
<li>スピード</li>
<li>やり直しのきくことも多い</li>
<li>過剰な分析をやめる</li>
</ul>
</li>
<li>Hire and Develop the Best

<ul>
<li>高いバー</li>
<li>カルチャーフィット (LP)</li>
<li>メンタリング</li>
<li>ピアフィードバック</li>
</ul>
</li>
<li>Have Backbone; Disagree and Commit

<ul>
<li>経緯を持って異議</li>
<li>安易に妥協しない</li>
<li>決定には全面的コミット</li>
</ul>
</li>
<li>Deliver Result

<ul>
<li>結果を出す</li>
<li>あきらめない</li>
</ul>
</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>組織

<ul>
<li>2-Pizza Teams

<ul>
<li>チームを小さく</li>
<li>作るものに対するすべてを負う

<ul>
<li>プロダクト計画の策定</li>
<li>開発</li>
<li>運用/カスタマーサポート</li>
</ul>
</li>
<li>大きな組織の一部</li>
</ul>
</li>
<li>You build it, you run it. in 2006</li>
<li>QAはだれが？オンコールはだれが？ → Two-Pizza team</li>
<li>すべてはサービスチームに存在し、自身の役割に集中する</li>
<li>高い水準を維持する

<ul>
<li>チームには権限が与えられ、多くの自由が認められている</li>
<li>オンボーディング/トレーニング</li>
</ul>
</li>
<li>イテレーション</li>
<li>Minimum Viable Product</li>
<li>Everyday is still Day One

<ul>
<li>毎日が最初の一日 (一歩)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>GitHub Actionsはどのような未来を描くのか : コンテナ技術が開くワークフローのOSS化</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="0c63161e473e435ea921b37af23488f6" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Takafumi Ikedaさん</li>
<li><a href="https://twitter.com/ikeike443">Takafumi Ikeda(@ikeike443)さん | Twitter</a></li>
<li><p>発表資料: <a href="https://speakerdeck.com/ikeike443/github-actionshadofalseyounawei-lai-womiao-kufalseka">GitHub Actionsはどのような未来を描くのか &ndash; Speaker Deck</a></p></li>
<li><p>2008年にGithub社創業</p></li>
<li>Pull Requestの登場。OSSから始まり大きなムーブメントとなった</li>
<li>ソフトウェア開発にはさまざまな障壁がある</li>
<li>便利なツール・ライブラリ・テクノロジー・ベンダがたくさんあふれている
<img src="https://landscape.cncf.io/images/landscape.png" alt="Interactive landscape at cncf.io" /></li>
<li>Github Actionsでソフトウェア開発に関する課題を解決したい

<ul>
<li>ワークフローはモジュラー化されるべき → Github Actionsの誕生</li>
<li>コンテナをActionと呼ぶ

<ul>
<li>Actionの実態はDockerfile</li>
</ul>
</li>
<li>ワークフローはHashicorp のHCLで記述可能。ビジュアルエディタもある。

<ul>
<li>26のイベントに対応

<ul>
<li>Repository Dispatch: 外から任意にトリガーできるイベント。長いジョブなどを外部で実行、OKならこのイベントを発火、などの使い方が可能</li>
<li>gollum (wiki)</li>
<li>Vulnerability</li>
<li>Project関連</li>
<li>Issue / Label / Milestone 関連</li>
<li>その他</li>
</ul>
</li>
</ul>
</li>
<li>まとめ

<ul>
<li>コンテナ技術ベース</li>
<li>ワークフロー as Code</li>
<li>ワークフローのモジュラー化、再利用</li>
<li>Pull Requestに続く進化の触媒</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>現状の仕様、制限など</h3>

<ul>
<li>詳細はヘルプドキュメント参照</li>
<li>ワークフローの実行時間はMAX 58分</li>
<li>ワークフロー1つに付きアクションは100個まで呼び出し可能</li>
<li>1ファイル内に複数ワークフローを定義可能だが、並列実行されるのは1リポあたり2つまで</li>
<li>アクションは他のワークフローをトリガーできない</li>
<li>APIコールは1リポジトリあたりトータルで1000回/時間まで</li>
<li>プロダクションのSecretを格納したないこと (ベータ中はログにそのまま出ます)</li>
<li>ActionはDockerfileなのでDockerでできることはたいていできるが、制限あり</li>
<li>Action実行環境について

<ul>
<li>1vCPU、3.75GB RAM</li>
</ul>
</li>
</ul>


<h3>デモ</h3>

<ul>
<li><a href="https://github.com/actions/example-aws">actions/example-aws： Example Workflow to deploy a static website to an existing Amazon EKS cluster</a></li>
</ul>


<h3>便利なActions</h3>

<ul>
<li>各種クラウドActions

<ul>
<li>GCP, AWS, Azure, Herokuに対応。</li>
</ul>
</li>
<li><a href="https://github.com/actions/bin">https://github.com/actions/bin</a> 以下に基本的なものを提供

<ul>
<li>bats</li>
<li>curl</li>
<li>debug</li>
<li>filter</li>
<li>sh</li>
<li>shellcheck</li>
</ul>
</li>
<li>HTTP client: HTTPiesラッパー。Marketplace で入手可能。</li>
<li>Add an issue reference: ブランチ名からIssueを探し出してクロスリンク</li>
<li>All in one project: Issue / PR を常に Project へ追加</li>
<li>Delete Merged branch: マージ済みブランチ削除。Probot app / Actions どちらでも利用可能</li>
</ul>


<h3>リソース</h3>

<ul>
<li><a href="https://github.com/actions">https://github.com/actions</a></li>
<li>github marketplace</li>
<li><a href="https://github.com/sdras/awsome-actions">https://github.com/sdras/awsome-actions</a></li>
<li>community forum</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="https://github.blog/jp/2018-10-24-action-demos/">GitHub Actions： みなさんが開発し、GitHubで実行 &ndash; The GitHub Blog &ndash; Japan</a></li>
</ul>


<h2>GCPに恋してHashiCorpを愛して起業したエンジニアのお話</h2>

<ul>
<li>長谷川 祐介さん</li>
</ul>


<h3>HahiCorp Stack</h3>

<ul>
<li>HashiCorp Suite

<ul>
<li>Nomad</li>
<li>Vault、…</li>
</ul>
</li>
<li>Terraform: あらゆるパブリッククラウドやクラウドサービスのプロビジョニングをCode化

<ul>
<li>Enterprise版: TF構成ファイルのロールバックとバージョンコントロール、監査ログ、CIとの統合、チームマネジメント、TF Versionの管理簡易化、SentinelによるPolicy検証</li>
<li>Firewall</li>
<li>DNS</li>
<li>Load Balancer</li>
<li>いわゆる依存関係についてBackupと再現性も含め非常に便利</li>
</ul>
</li>
<li>Vault

<ul>
<li>Secure Secret Storage</li>
<li>Dynamic Secret</li>
<li>Data Encryption</li>
<li>Lease &amp; Renewal</li>
<li>Revocation</li>
<li>Enterprise版: Read Replica, Performance</li>
<li>Grasysでの活用方法

<ul>
<li>GCPとAWSのLinuxUserのSSH Keyの共有と管理</li>
</ul>
</li>
</ul>
</li>
<li>Consul

<ul>
<li>Service Discovery</li>
<li>Health Check</li>
<li>KVS</li>
<li>Configration consul-template連携</li>
<li>オーケストレーション</li>
<li>Grasysでの活用方法

<ul>
<li>システムセントラルとして利用</li>
</ul>
</li>
</ul>
</li>
<li>Nomad

<ul>
<li>スケジューラ: K8sの薄いやつ</li>
<li>Grasysでは利用していない</li>
</ul>
</li>
</ul>


<h3>システムに対する考え方</h3>

<ul>
<li>運用設計重視</li>
<li>継続的改善</li>
</ul>


<p>上記の考え方なので、以下も大事</p>

<ul>
<li>運用コスト削減</li>
<li>更新の容易さ</li>
<li>障害復旧性</li>
<li>安定性向上</li>
</ul>


<h3>Grasys Stack</h3>

<ul>
<li>beatsを多用</li>
</ul>


<h3>GCPのススメ</h3>

<ul>
<li>Global Launchが多い</li>
<li>更にNetwork要件が厳しいものが多い</li>
<li>世界中の場所を含めた通信事業者の品質</li>
<li>全部ひっくるめて管理することは不可能</li>
<li>これらをすべてGoogleにおまかせ</li>
</ul>


<h3>起業について、大事なこと</h3>

<ul>
<li>何を守り、何を捨てるかを決め、よく考え、よく相談する</li>
<li>変化に対応する</li>
<li>金は道具、使い方を考える</li>
<li>自分のやりたいことを持ち続け、あきらめない</li>
<li>一人の時間は大切、いつでもいける自分が心地よい場所を作っておく</li>
<li>ときどき振り返り、確認をする</li>
<li>迷ったときの嫁の言葉は強烈! 嫁は旦那の直感をよく知っている</li>
<li>欲は大切!</li>
<li>褒められたときは全力で喜べ!</li>
<li><strong>恵比寿でIT社長やってももてない</strong></li>
</ul>


<h2>Cloud Native時代における Docker / Kubernetes による開発</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="8a5f6ba5eb1b4506bc0dead39fab0766" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>青山 真也さん</li>
<li><a href="https://twitter.com/amsy810">MasayaAoyama（青山 真也）(@amsy810)さん | Twitter</a></li>
<li><p>発表資料: <a href="https://speakerdeck.com/masayaaoyama/devsumi2019-amsy810-k8s">Cloud Native時代における Docker / Kubernetes による開発 developers Summit 2019 at 02/14 / devsumi2019_amsy810_k8s &ndash; Speaker Deck</a></p></li>
<li><p>Cloud Native</p>

<ul>
<li>疎結合なシステム</li>
<li>復元力がある</li>
<li>管理しやすい</li>
<li>可観測である</li>
<li>堅牢な自動化により、頻繁かつ期待通りに最小限の労力で大きな変更が可能</li>
</ul>
</li>
<li><p>Cloud Native Ecosystem</p>

<ul>
<li>k8sを中心としたOSS</li>
</ul>
</li>
<li><p>Cloud Nativeに適したアーキテクチャ? 大規模な開発に適したアーキテクチャ?</p>

<ul>
<li>マイクロサービスアーキテクチャ

<ul>
<li>マイクロサービスごとに技術選定可能</li>
<li>大規模な開発を加速させる</li>
<li>デプロイが容易</li>
<li>スケーリングが容易</li>
<li>障害が全体に波及しづらい</li>
</ul>
</li>
<li>500+ microservices: 大規模なシステムのマイクロサービス間を可視化するとデス・スターのようになる。個別マイクロサービスの管理がつらくなっていく。</li>
<li>サービスメッシュアーキテクチャ

<ul>
<li>従来アプリケーション側で制御していた機能を分離、開発者はアプリケーションロジックに集中可能</li>
<li>プロキシを必ず通るので、マイクロサービス間のモニタリングが可能</li>
<li>他にも以下のようなことが実現可能

<ul>
<li>Traffic Shifting (ex: Canary release)</li>
<li>Circuit Break</li>
<li>Fault Injection</li>
<li>Rate Limit</li>
<li>Retry</li>
<li>mTLS</li>
</ul>
</li>
</ul>
</li>
<li>Container

<ul>
<li>System ContainerとApplication Containerがある。DockerはApplication Container。</li>
<li>コンテナで起動するプロセスは1つにする</li>
<li>一時的なコンテナを作成するようにする (Immutable Insfrastructure)</li>
<li>VMに比べて

<ul>
<li>イメージ化が容易</li>
<li>起動が拘束</li>
<li>オーバヘッドが少ない</li>
<li>機能ごとに分離 (1機能 = 1プロセス)</li>
</ul>
</li>
</ul>
</li>
<li>複数のコンテナの管理をどうするか: Container Orchestration Engine: k8s

<ul>
<li>複数のDockerホストの管理</li>
<li>コンテナのスケジューリング</li>
<li>スケーリング/オートスケーリング</li>
<li>ローリングアップデート</li>
<li>コンテナの死活監視</li>
<li>障害時のセルフヒーリング</li>
<li>サービスディスカバリ</li>
<li>ロードバランシング</li>
<li>データや機密情報の管理</li>
</ul>
</li>
<li>CNCFとStandardization: k8sは完成度が高かったのと中立だったので流行った</li>
<li>Kubernetesがもたらすもの

<ul>
<li>Declarative Code and APIs

<ul>
<li>すべてYAMLで宣言的に記述してAPIに登録: Infrastructure as Code</li>
</ul>
</li>
<li>Self Healing

<ul>
<li>ReplicaSetとSelf-Healing

<ul>
<li>ReplicaSetではコンテナのReplica数を維持し続ける</li>
</ul>
</li>
</ul>
</li>
<li>Automation &amp; Immutable Infrastructure

<ul>
<li>ReplicaSetとRolling Update (Automation)

<ul>
<li>ロードバランサからの除外</li>
<li>コンテナイメージのアップデート</li>
<li>ロードバランサへの追加</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>k8sはフレームワークと分散システム

<ul>
<li>分散システムとしてのk8s

<ul>
<li>Control Loop

<ul>
<li>現在の状態を観測</li>
<li>現在の状態と理想状態を比較</li>
<li>差分に対処する処理を実施</li>
</ul>
</li>
</ul>
</li>
<li>Custom Resource Definition

<ul>
<li>AWS/GCP/Acureのマネージドサービスインスタンスの作成が可能</li>
<li>k8s上にNatsクラスタのQueueクラスタを展開可能</li>
<li>Controllerは、KubebuilderやOperator Frameworkなどにより比較的容易に作成可能</li>
</ul>
</li>
<li>拡張: Knative, Kubeflow, Operator Framework</li>
</ul>
</li>
<li>CI/CD

<ul>
<li>GitOps

<ul>
<li>MasterやStagingなどのブランチごとに、コンテナレジストリとマニフェストレポジトリを用意</li>
<li>PRによる差分チェックが可能</li>
</ul>
</li>
</ul>
</li>
<li>イギリスの銀行 Monzo Bankでk8s + Linkerdを採用</li>
</ul>
</li>
</ul>


<h2>APIを活用したフォントの使い方 ～MR（Mixed Reality）の実例紹介</h2>

<script async class="speakerdeck-embed" data-id="60fa5751802b4ae18fbe52ab343778ea" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>相川 晴俊さん</li>
<li>堀尾 風仁さん</li>
</ul>


<h3>フォント紹介</h3>

<ul>
<li>UD Font

<ul>
<li>文字のかたちがわかりやすいことにこだわったフォント</li>
</ul>
</li>
<li>フォントのデザインは、手書きから始まる。65.2mmの方眼紙に1文字ずつ書いて、500文字くらい作る。一日20文字くらい。新人フォントデザイナーはこれから始めて3年くらい続ける。営業含め、入社時研修でやらされる。</li>
<li>「永」という文字をまず作る。「永」には書に必要な技法8種がすべて含まれているから。</li>
</ul>


<h3>フォント製品</h3>

<ul>
<li>MORISAWA PASSPORT

<ul>
<li>書籍、漫画、映画テロップ</li>
<li>組込み用フォントライセンス

<ul>
<li>スマホ: AQUOS zero: 新ゴ</li>
<li>ゲーム: Shadowverse: 解ミン月</li>
</ul>
</li>
</ul>
</li>
<li>Typesquare

<ul>
<li>サブセット配信: JavaScriptとフォントをTypesquareから配信

<ul>
<li>必要な分だけ配信することでネットワークやサーバ負荷の軽減</li>
</ul>
</li>
<li>Galaxy Mobile Japan公式サイトで採用</li>
<li>サムスン電子ジャパン</li>
<li>必要なフォントを必要な文字だけAPIから取得する: パフォーマンス重視</li>
</ul>
</li>
<li>Webサイト以外でも使えないの？ (アプリ、ゲームなど)という欲がMRにつながっていく</li>
</ul>


<h3>MR</h3>

<ul>
<li>Kobe Digital Labo</li>
</ul>


<h4>なぜ今、Font×MRに取り組んでいるか</h4>

<ul>
<li>ポスト・スマホを考える

<ul>
<li>紙 → PC → Mobile → ？</li>
<li>デジタルがディスプレイが解き放たれる未来</li>
<li>Mixed Reality</li>
</ul>
</li>
<li>注目のMRデバイスはHololens</li>
<li>文字が圧倒的に見づらい

<ul>
<li>透過型ディスプレイなのでアプリケーション起動場所によって背景が変わる</li>
<li>視野角が狭い</li>
</ul>
</li>
<li>共同研究テーマ

<ul>
<li>フォントの視認性とデザイン性</li>
<li>フォントの変化によって生じるUXの違い</li>
</ul>
</li>
</ul>


<h4>事例</h4>

<ul>
<li>営業シーン: 購買体験

<ul>
<li>Display Assistant: 商品の説明をホログラム表示</li>
<li>自転車を買いに行って、店員に説明されても、説明のパーツと実物がつながらない。パンフレットを渡されてもたいてい読まない</li>
<li>MRで現物の自転車に商品説明ホログラムをマッピング</li>
</ul>
</li>
<li><p>広告デザイン業務: デザインツール</p>

<ul>
<li>Creative Design X: 看板広告デザインの支援ツール

<ul>
<li>広告パターンの切替</li>
<li>フォントの切替</li>
<li>現地の雰囲気を感じながら、広告の検証が可能</li>
<li>複数のHololensで視野共有: クライアントとデザイナーで同じ看板を見ながら議論が可能</li>
</ul>
</li>
</ul>
</li>
<li><p>どのフォントが見やすいかユーザ調査(3種)。一般的にはスマートグラスで明朝体は字が潰れるので避けられる。</p>

<ul>
<li>見やすさ

<ol>
<li>UD新ゴ (60%)</li>
<li>黎ミン (25%)</li>
<li>メイリオ (15%)</li>
</ol>
</li>
<li>どのフォントが好きか

<ol>
<li>UD新ゴ (50%)</li>
<li>黎ミン (30%)</li>
<li>メイリオ (20%)</li>
</ol>
</li>
<li>黎ミンは、ボールドにしたとき、横線も太くなる。(普通は横線は太くならない)</li>
<li>メイリオはゴシック体なのに見やすさ、好感度が低い</li>
</ul>
</li>
<li><p>ブランディングはフォントで決まる</p></li>
</ul>


<h4>MR開発</h4>

<ul>
<li>Illustratorなどから画像出力 (書体データも)</li>
<li>画像を組み込み、Unity上で開発</li>
<li>UWP出力し、Visual Studioでビルド</li>
<li><p>Hololensへインストール</p></li>
<li><p>毎回illustratorを起動し、修正も大変だった→TypeSquare APIの利用</p></li>
</ul>


<h4>MR開発</h4>

<ul>
<li>フォントにこだわると顧客の反応もよい</li>
<li>顧客満足度向上→案件化率UP</li>
<li>エンジニアこそフォントにこだわれ</li>
</ul>


<h2>ヤフー株式会社におけるフロントエンドの取り組み</h2>

<iframe src="http://momota.github.io//www.slideshare.net/slideshow/embed_code/key/gm44OplSwyg9IZ" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://momota.github.io//www.slideshare.net/techblogyahoo/devsumi2019-14b6-devsumib-131748750" title="ヤフー株式会社におけるフロントエンドの取り組み #devsumi #devsumiB" target="_blank">ヤフー株式会社におけるフロントエンドの取り組み #devsumi #devsumiB</a> </strong> from <strong><a href="https://www.slideshare.net/techblogyahoo" target="_blank">Yahoo!デベロッパーネットワーク</a></strong> </div></p>

<ul>
<li>向井 咲人さん</li>
<li>森本 恭平さん</li>
<li><p>平山 涼也さん</p></li>
<li><p>発表資料: <a href="https://www.slideshare.net/techblogyahoo/devsumi2019-14b6-devsumib-131748750">ヤフー株式会社におけるフロントエンドの取り組み #devsumi #devsumiB</a></p></li>
<li>参考資料: <a href="https://techblog.yahoo.co.jp/advent-calendar-2018/yahoo-frontend/">ヤフー株式会社におけるWebフロントエンドの技術選定 &ndash; Yahoo! JAPAN Tech Blog</a></li>
</ul>


<h3>メディアカンパニー</h3>

<ul>
<li>広告入稿管理のフロントエンド。</li>
<li>Yahoo!ディスプレイアドネットワーク、スポンサードサーチ、Twitter広告を担当</li>
<li>jQuery+PHPからReact + Redux + TypeScript + Node.jsのモダンなフロントエンドへ刷新中

<ul>
<li>その他、Redux-Form, Sass, Webpackなど</li>
</ul>
</li>
<li>大規模開発の課題

<ul>
<li>刷新を進めながらも、ビジネス要件の機能開発を進めなければならない</li>
<li>並行して3～4個の機能開発が進む</li>
<li>コードレビューの時間が爆増</li>
<li>どんどん増えていく開発メンバー</li>
<li>コードの足並みが揃わない</li>
</ul>
</li>
<li>課題への立ち向かい方

<ul>
<li>規約の導入

<ul>
<li>LintやPrittierを導入し、コーディング規約を設けた</li>
<li>上記でカバーできない部分のコーディングガイドをGitBookで作成

<ul>
<li>規約追加時にはPRレビューを出すことで全員に見てもらえる</li>
</ul>
</li>
<li>Dangerの導入: PRを出すときに行うことを自動化

<ul>
<li>レビューメンバーの自動アサインやラベル紐づけなど</li>
</ul>
</li>
<li>TypeScriptの導入

<ul>
<li>静的型付けによりｍコンパイル時にエラーが出る</li>
<li>機能修正時に漏れがなく、バグを事前に防げている</li>
</ul>
</li>
</ul>
</li>
<li>Atomic Designの導入

<ul>
<li>コンポーネントの粒度を揃える</li>
<li>Atoms, Molecules, Organismsという共通言語を作る</li>
<li>レビューの際に指摘をしやすいように</li>
</ul>
</li>
<li>コンポーネントガイドの導入

<ul>
<li>コンポーネントの見える化: Storybook、docz</li>
<li>新規メンバーの再開発を防ぐ</li>
<li>コンポーネント有無の確認による既存メンバー、新規メンバーのコミュニケーションコスト削減</li>
</ul>
</li>
<li>Redux層の分割

<ul>
<li>ファイル構成にre-ducksを採用</li>
<li>Reduxのデータ層にDomain層、UI層を設ける (App層も追加予定)</li>
</ul>
</li>
<li>日々素振りを続けて課題に挑む

<ul>
<li>この先、まだ未知な課題も出てくる。</li>
<li>日々の素振りを続けて、課題に挑める状況を作り出す。</li>
<li>チーム勉強会などのインプット・アウトプットの習慣づけ</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>コマースカンパニー</h3>

<ul>
<li>YahooショッピングではABテストを回しまくっている</li>
<li>企画 (1週間)→制作(1週間) → 開発 (2週間)</li>
<li>上記サイクルの並列度が高い。つらい。</li>
<li>工数削減したい</li>
<li>UIをアップデートしやすくしたい</li>
<li>UIパーツ集を社内限定でnpmパッケージを公開</li>
<li>完成したらどんな未来が待っているか

<ul>
<li>デザイナーが内政したUIパーツ集を使える</li>
<li>エンジニアも気軽にABテストのデザインが作れる</li>
<li>簡単なデザインならモックすらいらない</li>
<li>デザイナーは「デザインリサーチ」に時間をかけられる</li>
<li>いい結果のデザインをパッケージに反映できる</li>
<li>数字によって証明された室の高いデザインで全出面を統一できる</li>
<li>作り途中なのでどこまで効果があるかは不明…</li>
</ul>
</li>
</ul>


<h3>Webフロント技術室</h3>

<ul>
<li>サービス区切りの組織→縦の組織</li>
<li>その縦の組織に特化したほうが成長も早いし、効率も良い</li>
<li>ただし、個別最適化されてしまう

<ul>
<li>リソースがないところは、モダン化されない可能性</li>
<li>人材流動ができなくなる</li>
<li>エースが転職してナレッジが会社に残らない</li>
<li>ヤフーのWebフロントエンドが見えなくなる</li>
</ul>
</li>
<li><p>ある程度全社的な判断や横断的な視点の組織が必要となる</p></li>
<li><p>どういうメンバーで挑むか</p>

<ul>
<li>デザイナーとエンジニアの混合チーム</li>
<li>コマースチームとメディアチームの混合</li>
</ul>
</li>
<li>CTO直轄の組織なのでCTOとの距離が近い</li>
</ul>


<h4>半年間なにをやったか</h4>

<ul>
<li>よく使われているライブラリの効率化</li>
<li>統一したパフォーマンスの計測方法の検討</li>
<li>ヤフーのWebフロントエンドの健康状態の把握

<ul>
<li>全サービスにFE環境を手入力してもらって情報収集</li>
<li>統一感がないことを状況把握できた</li>
</ul>
</li>
<li>適切な技術選定とその技術の浸透

<ul>
<li>全社視点での技術選定</li>
<li>なぜフレームワークではないか

<ul>
<li>JSｈあエンジニア・デザイナー両方書く</li>
<li>React+Reduxなどを実装できない可能性がある</li>
<li>リソースもまちまちなのに、突発的なリニューアルを余儀なくされる可能性がある</li>
<li>リリースがある場合など、ビジネスを止めることに成る</li>
<li>現状バラバラすぎる</li>
<li>フレームワークの統一は現実的ではなかった</li>
</ul>
</li>
<li>スタイルを選ばなかった理由

<ul>
<li>CSS in JS系はチームによっては効率が悪い場合がある</li>
<li>エンジニア+デザイナー混合のため</li>
<li>Webpack周りの設定など苦しみを生むくらいならPostCSSである必要もない</li>
<li>Gulp+Sassはアクではない</li>
</ul>
</li>
<li>影響を抑えられ、全社にメリットのある技術: TypeScript

<ul>
<li>MS製。2017年からGoogleの標準に。</li>
<li>特徴

<ul>
<li>静的型付け

<ul>
<li>大きなバグを防げる</li>
<li>IDEとの連携によるリアルタイムチェック</li>
</ul>
</li>
<li>JSとの互換性

<ul>
<li>JSｔお互換性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>TypeScript布教にあたっての課題

<ul>
<li>スキルの差の問題</li>
<li>始める苦しみをいかにして取り除くか</li>
<li>ドキュメントの整備</li>
<li>サポート体制の構築</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>【第2部ハンズオン】GCPをさわりまくれ！スペシャリストに聞きまくれ！大QWIKLABS大会</h2>

<p><img src="/images/20190214_devsumi/gcp_cookies.jpg" alt="GCP cookies" /></p>

<ul>
<li>無料のQiklabsクレジットが配られて、GCPクエストを自習</li>
<li>電源あり、wifiあり環境。お菓子がいっぱい出た。</li>
<li>GCPのソリューションアーキテクトっぽい人がいっぱいいて、質問し放題だった。(が、するようなつまづき方はしなかった)</li>
</ul>


<h1>2/15(金)</h1>

<h2>ドラゴンクエストXを支える失敗事例</h2>

<iframe src="http://momota.github.io//www.slideshare.net/slideshow/embed_code/key/gghca2nxC2xUeS" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://momota.github.io//www.slideshare.net/devsumi/15a1x" title="【15-A-1】ドラゴンクエストXを支える失敗事例" target="_blank">【15-A-1】ドラゴンクエストXを支える失敗事例</a> </strong> from <strong><a href="https://www.slideshare.net/devsumi" target="_blank">Developers Summit</a></strong> </div></p>

<ul>
<li>青山 公士さん

<ul>
<li>ドラゴンクエストXを支える技術の著者</li>
<li>ドラゴンクエストXオンラインプロデューサ (責任者)</li>
<li>キングボンビーの生みの親というか、プログラマー

<ul>
<li>あくまで生みの親はさくまあきらさん</li>
</ul>
</li>
</ul>
</li>
<li>オンラインサービス (オンラインゲーム) はリリース後の運用・運営が本番

<ul>
<li>リリースは完了ではない。オフラインゲームはリリースで完了、手を加えられないのであきらめも付く。</li>
<li>お客様からのフィードバックが対応の始まり</li>
<li>良い設計・実装: 要望への対応が柔軟、不具合が出づらい、不具合が出ても修正しやすい</li>
<li>重要なのは運営・運用経験</li>
<li>他者の事例を共有することは重要</li>
</ul>
</li>
</ul>


<h3>ドラクエXとは</h3>

<ul>
<li>オンラインゲーム</li>
<li>6年半くらい経つ</li>
<li>MMORPG: 大規模多人数参加型オンラインゲーム</li>
<li>構成

<ul>
<li>クライアント: 見た目上の本体

<ul>
<li>バリデーションロジックくらいを置く</li>
</ul>
</li>
<li>ゲームサーバ: 真の本体

<ul>
<li>ゲームロジックは勝手にいじられないように、サーバ上で処理</li>
</ul>
</li>
<li>ゲームDB: 世界のデータ</li>
</ul>
</li>
</ul>


<h3>開発ポリシー</h3>

<ul>
<li><p>開発初期から運営・運用が重要という想定</p>

<ul>
<li>運営: 仕掛け(攻め) → 柔軟性が重要

<ul>
<li>機能拡張、期間限定イベント</li>
</ul>
</li>
<li>運用: 保守 (守り) → 継続性が重要

<ul>
<li>不具合修正・障害対応</li>
</ul>
</li>
</ul>
</li>
<li><p>例えば、ロジックは一箇所に集約すべし、など</p></li>
</ul>


<h3>失敗事例 (3つ)</h3>

<h4>キラージャグリングの音が鳴り続ける</h4>

<ul>
<li>不具合の内容

<ul>
<li>ある更新から突然演出完了後も効果音が止まらずになり続ける</li>
</ul>
</li>
<li>原因と対応

<ul>
<li>エフェクトは視覚効果を演出する</li>
<li>ドラクエでは表示形状、速度、加速度など、各種パラメータが設定されたデータドリブンで開発</li>
<li>アクション音やヒット音はデザイナー作成のデータで指定されたタイミングでC++が実行される</li>
<li>アクション効果音の停止処理のあとに、ヒット音を鳴らす処理</li>
<li>ヒット時とミス時の前段で停止処理がある</li>
<li>ミス時に効果音を停止する改修を実施したら不具合が発生</li>
<li>ミス時の効果音停止をC++で無効化したのが原因</li>
<li>他にも同様の問題があるかも: ミス時は個別対応でFIX</li>
</ul>
</li>
<li>得られた教訓

<ul>
<li>システム改修はBTSチケット(Redmine)に影響範囲を明記し、全影響範囲を再検証すべし</li>
<li>影響範囲は極力せまくすべし</li>
</ul>
</li>
</ul>


<h4>邪神の宮殿にてパーティが組めない</h4>

<ul>
<li>不具合の内容

<ul>
<li>同盟: オートマッチング</li>
<li>6/10(土) 6:00の更新以降、参加希望者が多数いてもマッチングが成立しない場合がある</li>
<li>マッチングに参加できる条件が設定されている</li>
</ul>
</li>
<li>原因と対応

<ul>
<li>条件はプランナー作成のデータで設定される

<ul>
<li>問題になりそうなデータはなかった</li>
</ul>
</li>
<li>暫定べた書きしたものを本格対応の更新し忘れ、1年後に発火してしまった</li>
<li>プログラム (雰囲気こんな感じ)
<code>
if (6/10(土) 6:00以降 &amp;&amp; ある獄) {
マッチング処理
}
</code></li>
</ul>
</li>
<li>得られた教訓

<ul>
<li>暫定対応は本格対応まで完了し、BTSシステムで管理すべし</li>
</ul>
</li>
</ul>


<h4>釣り老師に話すと、ビッグサイズやキングサイズなのにノーマルサイズと判定される</h4>

<ul>
<li>不具合の内容

<ul>
<li>魚には大きさがある</li>
<li>オウムガイも釣れる</li>
<li>魚を釣ったあと釣り老師に話すとサイズに見合った報酬をもらえる</li>
</ul>
</li>
<li>原因と対応

<ul>
<li>大きさとサイズの分類は魚ごとに設定</li>
<li>オウムガイは1023mm以上がビッグ、それ未満がノーマル</li>
<li>C++ではmm単位の情報をintで扱い、Luaではmおよびmmをdoubleで扱う: 浮動小数点の丸め処理の誤差</li>
<li>誤差補正処理は入っていた

<ul>
<li>補正処理が不十分だった</li>
</ul>
</li>
<li>行動ログから全戻しした</li>
</ul>
</li>
<li>得られた教訓

<ul>
<li>表面化していない不具合は存在する前提で対応すべし</li>
</ul>
</li>
</ul>


<h4>振り返り</h4>

<ul>
<li>リリース後の改修は要注意

<ul>
<li>影響範囲を考慮</li>
<li>BTSチケットに登録</li>
<li>確実にチケットクローズするまで</li>
<li>ドラクエX開発チームは運営中に出た問題に対して、「どうすれば事前に防げたか」を検討しパターン別にまとめている</li>
<li>BTSチケットに登録していないパターンが一番多い: 開発担当者が軽く考える案件が問題になりやすい

<ul>
<li>10万くらいチケットがある (タスクチケット含む)</li>
<li>以前のBTSにも10万くらいあったので、計20万チケットくらい</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Q&amp;A</h3>

<p>Q: 開発体制・人数は？</p>

<p>A: 秘密(人事から止められている)。スタッフロールから想像して。</p>

<p>Q: 修正の影響範囲の特定の仕方は？</p>

<p>A: あまりよくない答えだが、個別・経験値に依存している。</p>

<p>Q: チケット登録がなかなか浸透しない理由は？</p>

<p>A: 開発者がチケット登録するまでもないと思っちゃう。リファクタリングのつもりで軽く対応しちゃうときにバグが埋め込まれてしまう。油断、おごりがある。</p>

<p>Q: 運用以降が本番、というところのモチベーション維持に関しては？</p>

<p>A: 実際、飽きたと言って抜けちゃう人もいる。チーム内で異動させたりする。</p>

<h2>IBM Q &ndash; 量子コンピューターの最前線</h2>

<ul>
<li><p>小野寺 民也さん</p></li>
<li><p>そもそも量子とは</p>

<ul>
<li>とても小さな世界</li>
<li>物理法則 (ニュートン力学)では表すことができない</li>
<li>量子と波の性質を併せ持つ</li>
<li>量子重ね合わせ</li>
<li>量子もつれ</li>
</ul>
</li>
<li>CRDS-FY2019-SP-04, みんなの量子コンピュータ: <a href="https://www.jst.go.jp/crds/report/report01/CRDS-FY2018-SP-04.html">（戦略プロポーザル）みんなの量子コンピューター　～情報・数理・電子工学と拓く新しい量子アプリ～／CRDS-FY2018-SP-04</a> の図2.2 量子ビット実現手法の比較

<ul>
<li>超電導回路</li>
<li>イオントラップ</li>
</ul>
</li>
<li>量子プログラミング: 量子回路を組立てていくこと</li>
<li>Exponential growth (指数的増大): 2<sup>n</sup>

<ul>
<li>2<sup>27</sup> ～ 世界一のスパコン(IBM) 1億4千万並列 ～ 2<sup>28</sup></li>
</ul>
</li>
<li>万能量子コンピュータ

<ul>
<li><a href="https://quantumexperience.ng.bluemix.net/qx/devices">IBM Q Experience</a></li>
<li>現状、小規模</li>
<li>近似 (Noisy)</li>
<li>5量子ビット～20量子ビットが現状の量子コンピュータ</li>
<li>量子状態を保つ時間も短いので、量子計算をその時間内に納めなければならないという制約がある</li>
</ul>
</li>
<li>有望なアプリケーション領域

<ul>
<li>量子化学</li>
<li>機械学習</li>
<li>最適化</li>
</ul>
</li>
<li>IBM Q

<ul>
<li>IBM Qシステム</li>
<li>QISKitオープンソースSDK

<ul>
<li><a href="https://qiskit.org/aqua">Qiskit Aqua | Algorithms for near-term quantum applications</a></li>
</ul>
</li>
<li>IBM Qネットワーク</li>
</ul>
</li>
<li>CES2019にも出展: <a href="https://www.youtube.com/watch?v=LAA0-vjTaNY&amp;feature=youtu.be">The World’s First Integrated Quantum Computing System &ndash; YouTube</a></li>
<li>量子力学だけでなく、冷凍機、Microwave工学などの周辺技術も大切。</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="https://www.ibm.com/developerworks/jp/cloud/library/cl-quantum-computing/index.html">IBM Quantum Computing で計算してみよう</a></li>
</ul>


<p>午後は打ち合わせがあったので午前中までの参加だった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[参加レポート]GDG-Tokyo New Year Party 2019]]></title>
    <link href="http://momota.github.io/blog/2019/01/31/gdg-tokyo/"/>
    <updated>2019-01-31T10:51:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/01/31/gdg-tokyo</id>
    <content type="html"><![CDATA[<p><img src="/images/20190131_gdg-tokyo/gdg.png" alt="GDF-Tokyo New Year Party logo" /></p>

<ul>
<li>2019/01/30(水)、六本木で行われた<a href="https://gdg-tokyo.connpass.com/event/113178/">GDG Tokyo New Year Party 2019 &ndash; connpass</a> への参加レポート。</li>
</ul>


<!-- more -->


<h3>How to start Android Dev</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="5e83e4faafc34fb6a4dcacdb633f47ea" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/wasabeef_jp">@wasabeef_jp さん</a></li>
<li>資料: <a href="https://speakerdeck.com/wasabeef/jp-how-to-start-android-dev">［JP］ How to start Android Dev &ndash; Speaker Deck</a></li>
</ul>


<h4>IDE (Build tool)</h4>

<ul>
<li>Android Studio

<ul>
<li>Layout Editor</li>
<li>MotionLayout: Motion editor</li>
<li>Emulator: 数年前に比べると高機能・高速化</li>
</ul>
</li>
<li>Gradle

<ul>
<li>ビルド自動化</li>
<li>Android開発におけるスタンダード</li>
<li>DSL (デフォルトGroovy DSL)

<ul>
<li>Kotlin DSL</li>
</ul>
</li>
</ul>
</li>
<li>Java / Kotlin

<ul>
<li>近年はKotlinが主流

<ul>
<li>Libraryを作るときはJavaで作ることが多い</li>
</ul>
</li>
<li>Java 8: 最新のJavaは使えない

<ul>
<li>D8 toolsによって今後変わりそう</li>
</ul>
</li>
<li>Kotlin 1.3

<ul>
<li>Coroutines: 軽量スレッド</li>
<li>Null-safety</li>
<li>Extention functions</li>
<li>Lambda + Inline functions、など</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>Architecture</h4>

<ul>
<li>MVVM

<ul>
<li>Google推奨でAACと相性がいい</li>
</ul>
</li>
<li>Flux

<ul>
<li>日本で数件の事例あり</li>
</ul>
</li>
</ul>


<h4>Jetpack</h4>

<ul>
<li>KTX

<ul>
<li>Core</li>
<li>Fragment</li>
<li>Lifecycle</li>
</ul>
</li>
<li>Lifecycles

<ul>
<li>バックグラウンド状態、フォアグラウンド状態、電源状態…</li>
<li>ライフサイクルを知りたいとき

<ul>
<li>動画の開始停止</li>
<li>画面閉じたときの終了処理</li>
</ul>
</li>
</ul>
</li>
<li>ViewModel (+ LiveData)

<ul>
<li>Activity/ViewModelはそれぞれ異なるライフサイクルがあるが、ViewModelのほうが長生きする</li>
<li>ViewModel

<ul>
<li>Activityの画面回転・破棄のデータ保持</li>
<li>Fragments感のデータ共有</li>
<li>永続化ではない</li>
</ul>
</li>
</ul>
</li>
<li>Navigation

<ul>
<li>Fragment Transactionの簡易化

<ul>
<li>アニメーション</li>
</ul>
</li>
<li>ディープリンク</li>
<li>Navigation Editor</li>
</ul>
</li>
</ul>


<h4>DI</h4>

<ul>
<li>Dagger

<ul>
<li>Java</li>
</ul>
</li>
<li>Koin</li>
<li>Kodein</li>
</ul>


<h4>Networking</h4>

<ul>
<li>Retrofit</li>
</ul>


<h4>Testing</h4>

<ul>
<li>Unit Test

<ul>
<li>Instrument Test: 実機テスト</li>
<li>Local Test (Robolectric): CIとの相性がいい</li>
<li>Firebase Test Lab</li>
</ul>
</li>
</ul>


<h4>CI</h4>

<ul>
<li>bitrise

<ul>
<li>モバイル向け</li>
</ul>
</li>
<li>CircleCI

<ul>
<li>高機能</li>
<li>メモリ不足で落ちる場合がある</li>
</ul>
</li>
<li>Danger

<ul>
<li>コードレビューの自動化をCI上で</li>
</ul>
</li>
</ul>


<h4>Flutter</h4>

<ul>
<li>Google製</li>
<li>Hot reload</li>
<li>ウィジェットがたくさん</li>
</ul>


<h3>Cloud Functionsから始めるFirebase</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="161fd22794824e868465f92f2ecee8c5" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/d_date">Daiki Matsudate(@d_date)さん</a></li>
<li>資料: <a href="https://speakerdeck.com/d_date/cloud-functionskarashi-merufirebase-4568e784-5bf3-4611-90a4-2f8632b3aa78">Cloud Functionsから始めるFirebase &ndash; Speaker Deck</a></li>
</ul>


<h4>Firebase</h4>

<ul>
<li>mBaaS

<ul>
<li>アプリ開発を容易に</li>
<li>アプリ品質向上</li>
</ul>
</li>
</ul>


<h4>Cloud Functions for Firebase</h4>

<ul>
<li>コードをクラウドにプッシュするとFirebaseのサービスのアクションをトリガーに動く</li>
</ul>


<h4>Admin API</h4>

<ul>
<li>CLIで特権環境からFirebaseを操作できる</li>
</ul>


<h4>ユースケース</h4>

<ul>
<li>(Twitterなどの)フォロワーが追加されたら通知する</li>
<li>メッセージのサニタイズする</li>
<li>画像をストレージにアップロード後、サムネイル化し格納し直し</li>
<li>URL Shorter</li>
<li>Firestoreの全文検索: Firestoreアップデート時にalgoliaにインデックスを貼る</li>
<li>Remote Config</li>
<li><a href="https://github.com/firebase/functions-samples">firebase/functions-samples： Collection of sample apps showcasing popular use cases using Cloud Functions for Firebase</a> にいろいろとサンプルがある</li>
</ul>


<h4>GCP</h4>

<ul>
<li>GCP FunctionsはGo 1.11に対応</li>
</ul>


<h3>Starting Google Kubernetes Engine 2019</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="4d31ff24e0cc4e79b5275dbaba4a49f3" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/sakajunquality">sakajunquality(@sakajunquality)さん</a></li>
<li>資料: <a href="https://speakerdeck.com/sakajunquality/starting-google-kubernetes-engine-2019">Starting Google Kubernetes Engine 2019 &ndash; Speaker Deck</a></li>
</ul>


<h4>What&rsquo;s k8s?</h4>

<ul>
<li>Borgベースのコンテナプラットフォーム</li>
<li>Microservicesプラットフォーム</li>
<li>Goベース</li>
<li>CNCFプロジェクトの「Graduated」ステージ</li>
</ul>


<h4>K8s マネージドサービス</h4>

<ul>
<li>GKE</li>
<li>EKS</li>
<li>AKS</li>
<li>IKS</li>
<li>などなどたくさんある…</li>
</ul>


<h4>Why GKE?</h4>

<ul>
<li>すでにGCPを使っている</li>
<li>k8sはむずかしい</li>
<li>GCP独自の機能</li>
</ul>


<h4>Already Using GCP?</h4>

<p>GCPでk8sを使うには以下のパターンがある</p>

<ul>
<li>AppEngine (Flexible) → 柔軟性がない</li>
<li>Compute Engine →  信頼性 (可用性) がない、作り込むとしても大変</li>
<li>Kubernetes Engine: Flexible + Reliable</li>
</ul>


<h4>k8sは難しい</h4>

<ul>
<li><a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">kelseyhightower/kubernetes-the-hard-way： Bootstrap Kubernetes the hard way on Google Cloud Platform. No scripts.</a></li>
<li>k8s は構築も、維持も、管理も大変

<ul>
<li>Boosting</li>
<li>High Availability</li>
<li>Version Updates</li>
</ul>
</li>
<li>簡単にクラスタをつくるならフルマネージドのGKE</li>
</ul>


<h4>GKEはフルマネージドサービス</h4>

<ul>
<li>コントロールプレーンとワーカーノードが両方フルマネージド</li>
<li>リージョン・ゾーンレベルの可用性</li>
<li>Auto-Repair / Auto-Update</li>
<li>VPCネイティブ</li>
</ul>


<h4>GCP特有機能</h4>

<ul>
<li>Networking

<ul>
<li>Cloud Load Balancing: L4. L7</li>
<li>Cloud Armor: L3-L7カスタムルールを作れるWAF</li>
<li>Cloud CDN: グローバルCDN</li>
</ul>
</li>
<li>CI/CD

<ul>
<li>Cloud Build: フルマネージドCI、ネイティブDockerをサポート</li>
<li>Container Registry: Docker レジストリ。脆弱性診断が可能</li>
<li>Cloud Source Repository: プライベートGitリポジトリ。検索が強い。Githubからミラー可能。</li>
<li>GitOpsの概念</li>
</ul>
</li>
<li>Monitoring

<ul>
<li>Stackdriver Monitoring: フルスタックの監視スイート</li>
<li>Stackdriver Logging: フルマネージドログプラットフォーム。GKEはfluentdがプリインストール</li>
</ul>
</li>
<li>Integrations

<ul>
<li>Cloud Pub/Sub</li>
<li>Cloud Functions</li>
<li>Cloud IAP</li>
</ul>
</li>
</ul>


<h4>GKE Update</h4>

<ul>
<li>Private Cluster + Cloud Nat

<ul>
<li>Private Clusterは、プライベートIPだけを持てる</li>
<li>Cloud Natは、フルマネージドNat-Gateway</li>
</ul>
</li>
<li>NEG /Container-Native Load Balancing

<ul>
<li>Network Endpoint Groupを使うとLB～Pod間のトラフィック制御をiptablesを使わずにできる</li>
</ul>
</li>
<li>Node Auto-Provisioning

<ul>
<li>Cluster Autoscalerが新しいノードプールを作成・削除してくれる</li>
</ul>
</li>
<li>Binary Authorization

<ul>
<li>信頼できるイメージのみをGKEへデプロイできる</li>
<li>チェックボックスにチェックを入れるだけで有効化可能</li>
</ul>
</li>
<li>Istio

<ul>
<li>1クリックでIstioをデプロイ可能</li>
<li>既存クラスタにも適用可能</li>
</ul>
</li>
</ul>


<h4>How to start?</h4>

<ul>
<li><code>$ gcloud container clusters create MY_CLUSTER</code></li>
<li>本を読む

<ul>
<li>中井さんのプログラマのための Google Cloud Platform 入門</li>
<li>Docker/Kubernetes 実践コンテナ開発入門</li>
<li>青山さんのKubernetes完全ガイド</li>
</ul>
</li>
<li>ハンズオン

<ul>
<li>Quick Start</li>
<li>QwickLabs</li>
<li>Coursera</li>
<li>sakajunquality&rsquo;s hands-on</li>
</ul>
</li>
<li>オンラインドキュメント

<ul>
<li>GKE document</li>
<li>Kubernetes document</li>
<li>Youtubeもある</li>
</ul>
</li>
</ul>


<h3>Web in 2019 What’s coming?</h3>

<ul>
<li>発表者: <a href="https://twitter.com/laco2net">Suguru Inatomi / lacolaco(@laco2net)さん</a></li>
<li>資料: <a href="https://docs.google.com/presentation/d/e/2PACX-1vRXfgnXlYSQ5Q3ImC1DQoub0L_5NUrha9yW3MLcDnFbn1A-mdEXZF11wzzadDF2yKoUnroZ46tMwUl3/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">20190130 &ndash; Web in 2019 What’s coming? &ndash; Google Slides</a></li>
</ul>


<h4>ES 2019 (WIP)</h4>

<ul>
<li><a href="https://qiita.com/tonkotsuboy_com/items/07f8ef98abf89250b90c">JavaScriptの次の仕様ES2019でほぼ確実に追加される新機能まとめ &ndash; Qiita</a></li>
</ul>


<h4>Web Components / Polymer</h4>

<ul>
<li>Polymerの追加開発がなくなった (メンテナンス状態)</li>
<li>lit

<ul>
<li>lit-html / lit-element</li>
</ul>
</li>
<li>Web ComponentsのBrowser supports Update

<ul>
<li>Firefox がサポート</li>
<li>EdgeがChromiumへ移行なので、移行後はEdgeでもwebcomponentsが使える</li>
</ul>
</li>
<li>CSS Shadow parts

<ul>
<li>Shadow DOM内にPartsを定義</li>
<li>外側のCSSから上書きできる</li>
</ul>
</li>
<li>Constructable Stylesheets

<ul>
<li>CSSStyleSheet()のオブジェクトを作成可能</li>
</ul>
</li>
<li>HTML Modules

<ul>
<li>Edgeチームから提案</li>
<li>.htm (モジュールファイル) をインポート可能</li>
</ul>
</li>
<li>Class Public Fields</li>
</ul>


<h4>Angular Updates</h4>

<ul>
<li>Community

<ul>
<li>成長中</li>
<li>Angular docsへの訪問者は1.5M に迫る</li>
<li>日本コミュニティ (ドキュメント翻訳など) も10,000MAUに到達</li>
</ul>
</li>
<li>Core updates

<ul>
<li>半年に1回メジャーアップデート</li>
<li>メジャーバージョンアップしてもそんなに大きな変化はなし</li>
</ul>
</li>
<li>Angular Bazel

<ul>
<li>Bazel (ビルドツール) をAngularでもサポート</li>
</ul>
</li>
<li>Ivy roadmap

<ul>
<li>次世代の内部リファクタリング</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
