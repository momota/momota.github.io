<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: selenium | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/selenium/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2018-06-08T13:40:00+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[seleniumノウハウ]]></title>
    <link href="http://momota.github.io/blog/2016/05/28/selenium-know-how/"/>
    <updated>2016-05-28T16:57:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/05/28/selenium-know-how</id>
    <content type="html"><![CDATA[<p><img src="/images/selenium.png" alt="selenium" /></p>

<p><a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a> でも書いたが、
selenium が便利すぎて、最近よくスクリプトを書くようになった。</p>

<p>以下のようなノウハウが溜まってきたので、ここらで放出する。</p>

<ul>
<li>ウィンドウサイズのリサイズ</li>
<li>ウィンドウ位置の移動</li>
<li>スクリーンショットの取得</li>
<li>要素セレクタメソッドの使い分け</li>
<li>ドロップダウンリストの選択</li>
<li>マウスオーバ (hover)</li>
<li>フレーム移動</li>
<li>ポップアップダイアログの扱い</li>
<li>コード量を減らすためのモンキーパッチ</li>
<li>よく採るプログラム構造</li>
</ul>


<p>インストール方法などは <a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a>
を参照。</p>

<p>selenium用スクリプト開発のノウハウというべきかコツといういべきかアレな感じだが、結局、
スクレイピングと同様にHTML構造を理解することが必要なのでブラウザ付属の開発ツールが
手離せない。</p>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Tools">Firefox 開発ツール</a></li>
<li><a href="https://developer.chrome.com/devtools">chrome devtools</a></li>
</ul>


<!-- more -->


<p>これ以降のサンプルコードは以下を定義しているものとする。
```ruby
require &ldquo;selenium-webdriver&rdquo;</p>

<p>driver = Selenium::WebDriver.for :firefox
```</p>

<h2>ウィンドウサイズのリサイズ</h2>

<p><code>driver.manage.window.resize_to</code>の引数にリサイズするサイズ情報(width, height)を渡す。</p>

<p><code>ruby
width  = 100
height = 100
driver.manage.window.resize_to(width, height)
</code></p>

<p>現在のサイズを取得して、相対的にリサイズしたい場合は以下のようにする。</p>

<p><code>ruby
size = driver.manage.window.size
size.width  += 100
size.height += 100
driver.manage.window.size = size
</code></p>

<h2>ウィンドウ位置の移動</h2>

<p><code>driver.manage.window.move_to</code>の引数に移動したい場所の座標情報(x, y)を渡す。</p>

<p><code>ruby
x = 100
y = 100
driver.manage.window.move_to(x, y)
</code></p>

<p>現在のウィンドウ位置を取得して、相対的にリサイズしたい場合は以下のようにする。</p>

<p><code>ruby
pos = driver.manage.window.position
pos.x += 100
pos.y += 100
driver.manage.window.position = pos
</code></p>

<h2>スクリーンショットの取得</h2>

<p>開いているページのスクリーンショットを撮りたい場合は、<code>driver.save_screenshot</code> に保存先のファイル名を指定するだけ。</p>

<p><code>ruby
driver.get("https://www.google.co.jp/")
driver.save_screenshot("/path/to/save/screenshot.png")
</code></p>

<p>ページ全体を撮りたいのに、frame 構造が邪魔をして、スクロールしなければ全体が撮れない場合がある。
ちょっと、調べたところ <code>driver.execute_script("some script")</code> で javascript を利用してスクロールをしている人がいたり、
<code>Selenium::WebDriver::Element.location_once_scrolled_into_view</code> を使ってスクロールしている人がいたり。
どちらにしても、コンテンツ表示上の高さを取得して、1スクロール分の長さをデクリメントしていっているような処理。</p>

<p>自分の場合は、めんどくさかったので、上述したリサイズ方法を使ってスクロールがいらないくらいウィンドウサイズを大きくして、
スクリーンショットを撮るという荒業を繰り広げている。</p>

<h2>要素セレクタメソッドの使い分け</h2>

<p>要素セレクタメソッドは <code>find_element</code> と <code>find_elements</code> の2種類。
そのメソッド名の単数形・複数形の通りなのだが、以下のような違いがある</p>

<ul>
<li><code>find_element</code>

<ul>
<li>指定した引数にマッチする最初の要素 (<code>WebDriver::Element</code>) を <strong>1つ</strong> 返す。</li>
<li>マッチする要素がなければ例外 (<code>NoSuchElementError</code>) を投げる。</li>
</ul>
</li>
<li><code>find_elements</code>

<ul>
<li>指定した引数にマッチする要素を詰めた配列 (<code>Array&lt;WebDriver::Element&gt;</code>) を返す。</li>
<li>マッチする要素がなければ、空の配列 (<code>Array</code>) を返す。</li>
</ul>
</li>
</ul>


<p>テーブルの <code>&lt;tr&gt;</code> 要素やリストの <code>&lt;li&gt;</code> 要素に対してイテレーション処理するときには <code>find_elements</code> が便利。
以下は、例。</p>

<p>```ruby</p>

<h1>リストのリンクをクリックしていくイテレーションの例</h1>

<p>elements = driver.find_elements(:css, &ldquo;#some-list > li&rdquo;)
elements.each { |e|
  link = e.find_element(:tag_name, &ldquo;a&rdquo;)
  link.click
}
```</p>

<p>要素セレクタメソッドの引数には、<code>find_element(:how, "what")</code> のように symbol と文字列を渡す。
渡す引数は、<code>find_elements</code> も同じ。</p>

<p>指定できるsymbolの種類は以下。</p>

<table>
<thead>
<tr>
<th>symbol             </th>
<th> 対象</th>
</tr>
</thead>
<tbody>
<tr>
<td>:class             </td>
<td> クラス名 (属性名 class)</td>
</tr>
<tr>
<td>:class_name        </td>
<td> 上記 :class と同じ</td>
</tr>
<tr>
<td>:id                </td>
<td> ID (属性名 id)</td>
</tr>
<tr>
<td>:link_text         </td>
<td> <code>&lt;a&gt;</code> タグのテキスト</td>
</tr>
<tr>
<td>:link              </td>
<td> 上記 :link_text と同じ</td>
</tr>
<tr>
<td>:partial_link_text </td>
<td> <code>&lt;a&gt;</code> タグのテキストの部分文字列</td>
</tr>
<tr>
<td>:name              </td>
<td> name (属性名 name)</td>
</tr>
<tr>
<td>:tag_name          </td>
<td> タグ名</td>
</tr>
<tr>
<td>:xpath             </td>
<td> xpath で指定</td>
</tr>
<tr>
<td>:css               </td>
<td> css セレクタ で指定</td>
</tr>
</tbody>
</table>


<p><a href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Find">参考 Module: Selenium::WebDriver::Find</a></p>

<h2>ドロップダウンリストの選択</h2>

<p>Selenium IDEでRubyコードの出力をしようとすると、ドロップダウンリストの選択をする処理部分がERRORに
なってコメントアウトされることがある。(今のSelenium IDEバージョンでは大丈夫そう)</p>

<p>ドロップダウンリストの選択は以下のように書けばOK。</p>

<p>```ruby
s = Selenium::WebDriver::Support::Select.new(driver.find_element(:tag_name, &ldquo;select&rdquo;))
s.select_by(:text, &ldquo;ほげほげ&rdquo;)  # 表示テキストで選択
s.select_by(:value, &ldquo;value1&rdquo;)   # valueの値で選択
s.select_by(:index, 0)          # index(0, 1, 2, &hellip;)で選択</p>

<p>```</p>

<h2>マウスオーバ (hover)</h2>

<p>例えば、ナビゲーションメニューなどが、通常時には折りたたまれていて、メニュー上にマウスオーバした場合に、
子メニューが展開されるようなページがある。
折りたたまれているときに、子メニューHTMLをロードできていないようなページのときは、ユーザ操作と同じように
マウスオーバしてあげる必要がある。</p>

<p>以下のようにマウスオーバしたい要素を指定して、<code>driver.mouse.move_to</code> を呼べば良い。</p>

<p><code>ruby
e = driver.find_element(:id, "menu")
driver.mouse.move_to(e)
</code></p>

<h2>フレーム移動</h2>

<p>frame や iframe 要素を使っているサイトで、そのフレーム内の要素に対して操作したい場合、当該フレームへ切り替える操作が必要となる。</p>

<p>以下のようにスイッチしたいフレーム要素を指定して、<code>driver.switch_to.frame</code> を呼べば良い。</p>

<p><code>ruby
frame = driver.find_element(:id, "frame")
driver.switch_to.frame(frame)
</code></p>

<p>フレームを移動してから、いったん最上位のフレームにに戻りたい場合は、以下。</p>

<p>```ruby
driver.switch_to.window(driver.window_handle)</p>

<p>frame = driver.find_element(:id, &ldquo;top-frame&rdquo;)
driver.switch_to.frame(frame)
```</p>

<h2>ポップアップダイアログの扱い</h2>

<p>「マジでこのページから移動する?」的なjavascriptによるポップアップダイアログを表示するページがある。
このポップアップダイアログを強制的に閉じるには以下のようにする。</p>

<p><code>.accept</code> ではい、<code>.dismiss</code>でいいえを押して閉じる。</p>

<p><code>ruby
begin
  alert_box = driver.switch_to.alert
  alert_box.accept     # 「はい」「OK」ボタンクリック
  # alert_box.dismiss  # 「いいえ」「cancel」ボタンクリック
rescue Selenium::WebDriver::Error::NoSuchAlertError =&gt; e
  # ダイアログがポップアップしない場合、例外を投げるので、何もせずにスルー
end
</code></p>

<h2>コード量を減らすためのモンキーパッチ</h2>

<p>たとえば、ログインなどの処理の際、フォームへ文字列を送る <code>send_keys</code> 前にいつも <code>.clear</code> しているので
もう <code>send_keys</code> の中に <code>.clear</code> 処理を入れ込んでしまえと思った。</p>

<p>また、<code>input</code> タグの値を取得するときは、<code>.attribute("value")</code> と長ったらしく書く必要があるので <code>.value</code>メソッドを
定義してしまおうと思った。checkbox のチェック有無も同じく。</p>

<p>そこで、<code>Selenium::WebDriver::Element</code> を拡張するため、以下のようなモンキーパッチを書く。</p>

<p>```ruby
module ElementExtension
  refine Selenium::WebDriver::Element do</p>

<pre><code>def send_keys(str)
  clear
  super(str)
end

def value
  attribute("value")
end

def checked?
  attribute("checked").nil? ? false : true
end

def url
  attribute("href")
end
</code></pre>

<p>  end
end</p>

<p>using ElementExtension
```</p>

<p>そうすると以下のようにコード量を減らせる。</p>

<p>```diff</p>

<h1>たとえば、ログイン処理</h1>

<p>user     = &ldquo;USER&rdquo;
password = &ldquo;PASSWORD&rdquo;</p>

<ul>
<li>driver.find_element(:id, &ldquo;loginuser&rdquo;).clear
driver.find_element(:id, &ldquo;loginuser&rdquo;).send_keys(user)</li>
<li>driver.find_element(:id, &ldquo;loginpass&rdquo;).clear
driver.find_element(:id, &ldquo;loginpass&rdquo;).send_keys(password)
driver.find_element(:id, &ldquo;submit&rdquo;).click</li>
</ul>


<h1><input>の値を取得する処理</h1>

<ul>
<li>hostname = driver.find_element(:id, &ldquo;hostname&rdquo;).attribute(&ldquo;value&rdquo;)</li>
<li>hostname = driver.find_element(:id, &ldquo;hostname&rdquo;).value</li>
</ul>


<h1>チェックボックスがチェックされているかどうか</h1>

<p>checkbox = driver.find_element(:id, &ldquo;some-checkbox&rdquo;)
&ndash; do_something if checkbox.attribute(&ldquo;checked&rdquo;).nil?
+ do_something if checkbox.checked?</p>

<h1>URLの取得</h1>

<ul>
<li>url = driver.find_element(:tag_namem &ldquo;a&rdquo;).attribute(&ldquo;href&rdquo;)</li>
<li>url = driver.find_element(:tag_namem &ldquo;a&rdquo;).url
```</li>
</ul>


<p>モンキーパッチの書き方は以下を参考にした。</p>

<ul>
<li><a href="http://melborne.github.io/2013/08/30/monkey-patching-for-prudent-rubyists/">分別のあるRubyモンキーパッチャーになるために</a></li>
</ul>


<h2>よく採るプログラム構造</h2>

<p>よく採るプログラム構造は以下。</p>

<ul>
<li>操作ターゲットとなるサイト単位にクラスを作る</li>
<li>処理の内容にしたがって、メソッドを作る。以下の様な粒度。

<ul>
<li>サインイン</li>
<li>リスト表示</li>
<li>自動入力と申請</li>
</ul>
</li>
<li>アカウント情報や入力データはYAMLファイルなどに書き出しておく</li>
</ul>


<p>```ruby</p>

<h1>conding: utf-8</h1>

<p>require &ldquo;selenium-webdriver&rdquo;</p>

<h1>その他必要に応じてrequire</h1>

<h1>Selenium::WebDriver::Element の拡張</h1>

<p>module Elementextension
  # 上記モンキーパッチの章を参照
end
using Elementextension</p>

<h1>本体</h1>

<p>class SomeSite
  def initialize</p>

<pre><code># 初期化処理
# 定数をセットしたり、webdriverを生成してアクセスしたり。
@ss_dir  = "./screenshot/"
FileUtils.mkdir_p(@ss_dir) 

@driver  = Selenium::WebDriver.for :firefox
base_url = "http://somesite.com"
@driver.get(base_url + "/index.html")
</code></pre>

<p>  end</p>

<p>  def sign_in(user, password)</p>

<pre><code># サインイン処理
</code></pre>

<p>  end</p>

<p>  def do_something</p>

<pre><code># やりたいことを書く
</code></pre>

<p>  end</p>

<p>  def close</p>

<pre><code># 終了時に実行する処理を書く
</code></pre>

<p>  end</p>

<p>  private
  # privat method を定義する
  def get_screenshot(str)</p>

<pre><code>now = DateTime.now.strftime("%Y%m%d%H%M%S")
@driver.save_screenshot(@ss_dir + "_" + str + "_" + now + ".png")
</code></pre>

<p>  end
end</p>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h1>

<h1>main</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h1>

<p>if <strong>FILE</strong> == $0
  # サインインに必要なアカウント情報はYAMLなどに書いておいて、それを読む
  y        = YAML.load_file(&ldquo;/path/to/yaml.yml&rdquo;)
  user     =  y[&ldquo;account&rdquo;][&ldquo;user&rdquo;]
  password =  y[&ldquo;account&rdquo;][&ldquo;password&rdquo;]</p>

<p>  hoge = SomeSite.new
  hoge.sign_in(user, password)
  hoge.do_something
  hoge.close
end
```</p>

<h2>関連</h2>

<ul>
<li><a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザ操作の自動化: selenium と ruby]]></title>
    <link href="http://momota.github.io/blog/2016/02/26/selenium/"/>
    <updated>2016-02-26T10:41:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/02/26/selenium</id>
    <content type="html"><![CDATA[<p>selenium と ruby を使ってブラウザ GUI 操作を自動化する。</p>

<p><a href="http://www.seleniumhq.org/">selenium</a> は、Web アプリケーションの自動テストのためのツール。
レグレッションテストによく使われているようだ。</p>

<p>selenium は、ブラウザ操作シナリオを事前に設定して、シナリオ通りに実行してくれる。
シナリオ設定といっても、Firefoxプラグインの Selenium IDE などを使うと操作を
記録してくれる機能があるのでそこまで大変ではない。
詳細は、<a href="http://www.ruby.or.jp/ja/tech/development_tool/reg_test/">Ruby アソシエーション &ndash; selenium</a> の &ldquo;1.2 テストの作成&rdquo;
あたりを参照してほしい</p>

<p>selenium は、クロスブラウザのツールで、IE を使って IE限定みたいなサイトでも使える。
IE や Chrome で使うには各 Selenium WebDriver が必要となる。</p>

<p>テスト用と言いつつ、使い道はいろいろとある。</p>

<ul>
<li>社内のもろもろの web 申請は、入力項目が多いのに、毎回ほぼ同じ内容を入力させるので
フォーム入力の省力化として利用している。</li>
<li>hp さんの iLO や日立さんストレージ、F5 さんのBIG-IP みたいな web 画面から設定変更するような機器の
自動構築なんかもできそう。

<ul>
<li>スクリーンショットも撮れるので、エビデンスもついでに取得可能。</li>
<li>vCenter とかも操作できないかという思惑はある。</li>
<li>AWS とかも操作できるけど、そもそも API が豊富に備わっているから不要か。</li>
</ul>
</li>
<li>あえて selenium を使わなくてもいいけど、クローリングやスクレイピングとかもできる</li>
</ul>


<p>この selenium は、Java や Python, Ruby などのプログラミング言語からシナリオ操作が可能で
ループ処理などするにはめちゃくちゃ便利。</p>

<p>いままでは Firefox プラグインだけで利用していたが、Ruby と絡めると便利すぎて感謝しかなかった。
ここでは、サンプルとして、はてなブックマークのホットエントリトップ5を一括で開くことを
やってみたい。</p>

<p>ちなみに似たツールに iMacro がある。</p>

<p>関連記事: <a href="http://momota.github.io/blog/2016/05/28/selenium-know-how/">seleniumノウハウ</a></p>

<!-- more -->


<p>環境は、以下。</p>

<table>
<thead>
<tr>
<th>モノ         </th>
<th> バージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td>OS           </td>
<td> Windows 8.1 Pro</td>
</tr>
<tr>
<td>ブラウザ     </td>
<td> Firefox ESR 38.6.1</td>
</tr>
<tr>
<td>Selenium IDE </td>
<td> 2.9.0</td>
</tr>
<tr>
<td>Ruby         </td>
<td> 2.2.4p230 (2015-12-16 revision 53155) [x64-mingw32]</td>
</tr>
<tr>
<td>gem          </td>
<td> selenium-webdriver (2.52.0)</td>
</tr>
</tbody>
</table>


<h1>準備</h1>

<p>Windows に Rubyをインストールする。</p>

<p><a href="http://rubyinstaller.org/downloads/">RubyInstaller</a> の RubyInstallers からインストーラをダウンロードし、実行する。
インストール時、 PATH を通すチェックボックスにチェックを入れる。</p>

<p>続いてDevelopment Kitをインストールする。<a href="http://www.rubylife.jp/railsinstall/rails/index4.html">この辺を参考に。</a>
これも RubyInstaller の Development Kit からダウンロードして、解凍する。
解答したファイルに <code>dk.rb</code> があるのでコマンドプロンプトから以下のように実行する。</p>

<p>```sh</p>

<blockquote><p>cd {DEVELOPMENT KIT の解凍ディレクトリ}
ruby dk.rb init
ruby dk.rb install
```</p></blockquote>

<p>次に、<code>selenium-webdriver</code> をインストールする。
Ruby をインストールしたことで、一緒に gem も使えるようになっているはずなので、
コマンドプロンプトから以下を打鍵。</p>

<p>```sh</p>

<blockquote><p>gem install selenium-webdriver
```</p></blockquote>

<p>インストールの確認。irb (もしくは pry) とかで require できることを確認する。</p>

<p>```sh</p>

<blockquote><p>irb
irb(main):001:0> require &ldquo;selenium-webdriver&rdquo;
=> true
```</p></blockquote>

<h1>はてなホットエントリのトップ5エントリーを開く</h1>

<p>ここではサンプルとして、はてなブックマークのホットエントリからトップ5 をブラウザで
次々に開くよう <code>hatena.rb</code> を書く。</p>

<p>```ruby
require &ldquo;selenium-webdriver&rdquo;</p>

<p>class Hatena
  def initialize</p>

<pre><code># ブラウザの起動
@driver = Selenium::WebDriver.for :firefox

# ベース URL
@base_url = "http://b.hatena.ne.jp"
</code></pre>

<p>  end</p>

<p>  def open_top5</p>

<pre><code># ベースURL を開く
@driver.get(@base_url + "/hotentry")

# CSS セレクタで要素を特定してクリックする
5.times { |i|
  @driver.find_element(:css, "a[data-entryrank='#{i + 1}']").click
  sleep 1
}
</code></pre>

<p>  end
end</p>

<p>if <strong>FILE</strong> == $0
  hatena = Hatena.new
  hatena.open_top5
end
```</p>

<p>コマンドプロンプトからこのスクリプトを実行すると次々とブラウザが起動してくる。
```sh</p>

<blockquote><p>ruby hatena.rb
```</p></blockquote>

<p>こんな感じ。</p>

<p><img src="/images/20160226_selenium.gif" alt="hatena_screenshot" /></p>

<p><code>find_element</code> メソッドは、CSSセレクタやxpath、タグ名、タグのID、class名などを指定できる。</p>

<p>フォームになにか値を突っ込みたいときは、<code>@driver.find_element(~~~~~).send_keys "VALUE"</code> みたいな感じで
要素を特定したあと、<code>send_keys</code> で文字列を渡してあげればよい。
POST は、ボタンを find_element してあげて<code>.click</code> (<code>.submit</code> でも良さ気) でOK。</p>

<p>スクリーンショットを撮るときは、<code>@driver.save_screenshot "./screenshot.png"</code> みたいな感じ。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.ruby.or.jp/ja/tech/development_tool/reg_test/">Ruby アソシエーション &ndash; selenium</a></li>
<li><a href="http://qiita.com/kkakizaki/items/5a0e6f753193f2a1514f">Selenium 入門 &ndash; Qiita</a></li>
<li>関連記事: <a href="http://momota.github.io/blog/2016/05/28/selenium-know-how/">seleniumノウハウ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
