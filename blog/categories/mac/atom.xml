<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2016-06-18T11:56:05+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ansible でノートPCをセットアップ]]></title>
    <link href="http://momota.github.io/blog/2016/02/08/ansible/"/>
    <updated>2016-02-08T09:42:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/02/08/ansible</id>
    <content type="html"><![CDATA[<p><a href="http://momota.github.io/blog/2015/11/15/centos-install/">CentOS 7 を USB メモリからインストール</a> で書いたが、まっさらなCentOSが手元にあったので
<a href="http://www.ansible.com/">ansible</a> を使っていろいろインストールしてみた。</p>

<p>ちょっと前に、<a href="http://www.ansible.com/blog/ansible-2.0-launch">Ansible 2.0 Has Arrived</a> という記事も話題になってたし。</p>

<p>ansible は Chef のような構成管理ツール。
システムの設定や、ソフトウェアのデプロイ、オーケストレーションなどが可能なIT自動化ツール。
管理対象ノードが多いほどメリットが大きい。</p>

<p>Chef と比較すると、エージェントレスのアーキテクチャで、Chefのように特定言語(Ruby)を学ぶ必要はなく、YAMLで構成を表現する。
これは、Playbookと呼ばれる。Chef でいうレシピ。</p>

<p>マネージャ側は最近は大抵プリインストールされている python とansible さえインストールすればよい。
クライアント側は、マネージャから SSH アクセスさえできればよい。</p>

<p>これを1回やってファイル群をリポジトリで管理しておけば、環境の複製が楽になるし、Infrastructure as a Code ですね。</p>

<!-- more -->


<p>まず、環境の説明。</p>

<p><img src="/images/ansible.png" alt="ansible_diag" /></p>

<p>本稿では、ansible実行サーバをコントローラ (Control Machine)、ansibleによる
管理対象ノードを管理ノード (Managed Node) と呼ぶことにする。</p>

<table>
<thead>
<tr>
<th>役割                           </th>
<th> ホスト名     </th>
<th> 物理マシン     </th>
<th> IPアドレス</th>
</tr>
</thead>
<tbody>
<tr>
<td>コントローラ (Control Machine) </td>
<td> controller   </td>
<td> mac mini       </td>
<td> 192.168.11.9/24</td>
</tr>
<tr>
<td>管理ノード   (Managed Node)    </td>
<td> managed_node </td>
<td> TOSHIBA laptop </td>
<td> 192.168.11.14/24</td>
</tr>
</tbody>
</table>


<p>ansible のバージョンは <code>2.0.0.2</code>。</p>

<h1>0. 準備</h1>

<h2>0-1. コントローラ</h2>

<ol>
<li>ansible をインストールする
<code>sh
controller$ brew install ansible
</code></li>
</ol>


<h2>0-2. 管理ノード</h2>

<p>コントローラ～管理ノード間は、ネットワークを介して管理される。
コントローラから管理ノードへSSHアクセスできる必要があるので、以下の設定を事前に行っておく。</p>

<ol>
<li>管理ノードのネットワーク設定</li>
<li>コントローラのSSH公開鍵の登録
```sh

<h1>コントローラ側no-pass SSH key を生成</h1>

controller$ ssh-keygen -t rsa

<h1>mac には ssh-copy-id がないので、scpで公開鍵をコピー</h1>

<p>controller$ scp ~/.ssh/id_dsa.pub 192.168.11.14:/home/momota</p></li>
</ol>


<h1>管理ノード側でauthorized_keysの登録</h1>

<p>managed_node$ mkdir ~/.ssh
managed_node$ chmod 700 ~/.ssh
managed_node$ cat id_dsa.pub >> ~/.ssh/authorized_keys
managed_node$ chmod 600 ~/.ssh/authorized_keys</p>

<h1>SSH アクセス確認</h1>

<p>controller$ ssh 192.168.11.14
```</p>

<h1>1. ansible 設定</h1>

<p>まずは、管理ノードへOSアカウント (guestユーザ) を追加作成してみる。</p>

<p>ディレクトリ構成は、<a href="http://qiita.com/yteraoka/items/5ed2bddefff32e1b9faf">Ansible オレオレベストプラクティス</a> を参考にして以下のように作成。</p>

<p><code>``sh
controller$ tree laptop_build
laptop_build
|-- centos
|   |-- hosts
|  </code>&mdash; site.yml
|&mdash; common
|   |&mdash; guest_account
|   |   <code>-- tasks
|   |      </code>&mdash; main.yml
|&mdash; private_vars
|   <code>-- common.yml
</code>&mdash; vars</p>

<pre><code>`-- common.yml
</code></pre>

<p>```</p>

<p>それぞれのディレクトリの位置づけは、<a href="http://yteraoka.github.io/ansible-tutorial/">Ansibleチュートリアル</a>とかを参照するとわかりやすい。</p>

<p>まずは、<code>centos/hosts</code> へ管理ノードのIPアドレスを登録する。
クライアントが複数ある場合は、このエントリーで複数のアドレスを列挙すればよい。</p>

<p><code>yaml
[laptops]
192.168.11.14
</code></p>

<p>次に、メイン処理を <code>centos/site.yml</code> に記述する。
外部ファイルをインクルードして、roleの実行順序を指定するだけ。
<code>hosts</code> のところで、対象を絞れるが、今回は all。うまく使えば、production用とdevelopment用を使い分けたりグループ単位で実行できる。</p>

<p>```yaml
&ndash; hosts: all
  vars_files:</p>

<pre><code>- ../vars/common.yml
- ../private_vars/common.yml
</code></pre>

<p>  roles:</p>

<pre><code>- ../common/guest_account
</code></pre>

<p>```</p>

<p><code>vars/common.yml</code> には Playbook 共通で使いたい変数を設定している。</p>

<p><code>private_vars/common.yml</code> には公開したくない変数を設定している。ここでは、guestユーザのパスワードを以下のように指定している。</p>

<h2>```yaml</h2>

<p>guest_password: &ldquo;hogehoge&rdquo;
```</p>

<p>こういうパスワードみたいな情報をgithubに上げたくないので、.gitignoreには
private_vars/ を追加しておく。</p>

<p><code>roles</code> には、実際のアカウント追加処理を指定している role ディレクトリ<code>common/guest_account</code>を指定する。</p>

<p><code>common/guest_account/tasks/main.yml</code> には、userモジュールを使って、以下のようにタスクを記述する。</p>

<h2>```yaml</h2>

<ul>
<li>name: add the user &ldquo;guest&rdquo;
user: name=guest shell=/bin/bash password=
become: yes
become_method: sudo
```</li>
</ul>


<p><code>name</code> は任意。タスク内容をコメントとして記述する。</p>

<p><code>user</code> がモジュール名、それに続いて各モジュールのオプション。</p>

<p><code>become</code>, <code>become_method</code> で管理ノードで sudo を使って実行することを許可している。</p>

<h1>2. ansible 実行</h1>

<p>クライアント側で事前にユーザの確認。
guest ユーザは存在しない。</p>

<p><code>sh
managed_node$ grep guest /etc/passwd
</code></p>

<p>まずは、<code>--check</code> オプションを付けてテスト実行(dry run)。実際の構成変更はせず、
Playbook のシンタックスチェックなどを実施する。</p>

<p>```sh
controller$ ansible-playbook -i centos/hosts centos/site.yml -K &mdash;check
SUDO password:</p>

<p>PLAY ***************************************************************************</p>

<p>TASK [setup] *******************************************************************
ok: [192.168.11.14]</p>

<p>TASK [../common/guest_account : add the user &ldquo;guest&rdquo;] **************************
changed: [192.168.11.14]</p>

<p>PLAY RECAP *********************************************************************
192.168.11.14              : ok=1    changed=1    unreachable=0    failed=0</p>

<p>```</p>

<p>問題ないようなので実行してみる。</p>

<p>```sh
controller$ ansible-playbook -i centos/hosts centos/site.yml -K
SUDO password:</p>

<p>PLAY ***************************************************************************</p>

<p>TASK [setup] *******************************************************************
ok: [192.168.11.14]</p>

<p>TASK [../common/guest_account : add the user &ldquo;guest&rdquo;] **************************
changed: [192.168.11.14]</p>

<p>PLAY RECAP *********************************************************************
192.168.11.14              : ok=2    changed=2    unreachable=0    failed=0 <br/>
```</p>

<p>クライアント側で事後確認してみると、ユーザができている。</p>

<p><code>sh
managed_node$ grep guest /etc/passwd
guest:x:1001:1001::/home/guest:/bin/bash
</code></p>

<h1>3. 他にもいろいろとインストールする</h1>

<p>ruby や zsh などもインストールする。
インストール対象のプロダクト毎に role を作っている。</p>

<p>role の粒度がいまいちどれくらいにしたらよいのかが分からない。</p>

<p>たとえば、ruby role には ruby のインストールだけにとどめておくべきか、
rbenv のような関連ツールまで 1 セットで記述するのが良いか。</p>

<p>まあ、使いながらやりやすい粒度を模索する、でも良いと思う。</p>

<p>また、OS 毎の差異を吸収するため、<code>common/role/HOGE/tasks/</code> 以下に <code>main.yml</code>を置いて、
それぞれのOS毎のymlをインクルードした。
ただ、<code>centos/</code>的な大本からディレクトリを分けて、<code>main.yml</code>でOS判定と
条件分岐しないような配置でも良かったかもなとも思っている。</p>

<p>以下のようなディレクトリ構成となった。</p>

<p><code>``sh
controller$ tree laptop_build
laptop_build
|-- centos
|   |-- hosts
|  </code>&mdash; site.yml
|&mdash; common
|   |&mdash; dotfiles
|   |   |&mdash; meta
|   |   |   <code>-- main.yml
|   |  </code>&mdash; tasks
|   |       <code>-- main.yml
|   |-- guest_account
|   |  </code>&mdash; tasks
|   |       <code>-- main.yml
|   |-- ruby
|   |   |-- meta
|   |   |  </code>&mdash; main.yml
|   |   <code>-- tasks
|   |      </code>&mdash; main.yml
|   |&mdash; tmux
|   |   <code>-- tasks
|   |       |-- centos.yml
|   |       |-- main.yml
|   |      </code>&mdash; ubuntu.yml
|   |&mdash; vim
|   |   <code>-- tasks
|   |      </code>&mdash; main.yml
|   <code>-- zsh
|      </code>&mdash; tasks
|           |&mdash; centos.yml
|           |&mdash; main.yml
|           <code>-- ubuntu.yml
|-- private_vars
|  </code>&mdash; common.yml
`&mdash; vars</p>

<pre><code>`-- common.yml
</code></pre>

<p>```</p>

<p>公式ドキュメントを見つつ、yum や git モジュールを利用した。</p>

<p>中身の説明は、体力が切れたので割愛。
詳細は、<a href="https://github.com/momota/laptop-build">momota/laptop-build</a> を参照。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 7 を USB メモリからインストール]]></title>
    <link href="http://momota.github.io/blog/2015/11/15/centos-install/"/>
    <updated>2015-11-15T21:15:00+09:00</updated>
    <id>http://momota.github.io/blog/2015/11/15/centos-install</id>
    <content type="html"><![CDATA[<p>新しい PC が来たので、もともと使ってた東芝 Dynabook R731/B (windows 7)に CentOS7 をインストールした。
今までは DVD-R に ISO を焼いていたけど、自前の PC の DVD ドライブが壊れていたので
USB メモリを使ってインストールしてみた。</p>

<!-- more -->


<h2>1. USB メモリをフォーマットする</h2>

<p>MAC で USB メモリをフォーマット (初期化) しておく。</p>

<ol>
<li>ディスクユーティリティを起動する (アプリケーション > ディスクユーティリティ)</li>
<li>左側のペインからフォーマットしたいデバイスを選択し、<code>消去</code> タブをクリックする</li>
<li>容量や、ドライブ名などから判断</li>
<li>フォーマット形式は MS-DOS (FAT) を選択し、消去をクリックする</li>
</ol>


<h2>2. インストールイメージをダウンロードする</h2>

<p><a href="https://www.centos.org/download/">CentOS7 の DVD ISO をダウンロードする。</a></p>

<p><a href="http://ftp.jaist.ac.jp/pub/Linux/CentOS/7/isos/x86_64/md5sum.txt">md5 ハッシュもチェックしておく。</a></p>

<p>ダウンロードされた ISO イメージが正しくダウンロードされていることを確認する。(linux だと <code>md5sum</code> コマンド)</p>

<p><code>
$ md5 CentOS-7-x86_64-DVD-1503-01.iso | grep 99e450fb1b22d2e528757653fcbf5fdc
</code></p>

<h2>3. USB メモリにインストールイメージを書き込む</h2>

<p>USB メモリにインストールイメージを書き込む
ターミナルから<code>.iso</code> を <code>.img</code> へ変換する。</p>

<p>```
$ hdiutil convert -format UDRW -o centos7.img DOWNLOADED_ISO.iso</p>

<h1>=> centos7.img.dmg が出力される</h1>

<p>$ mv centos7.img.dmg centos7.img
```</p>

<p>USB メモリをアンマウントする。</p>

<p>```</p>

<h1>USB メモリがどう認識されているかを確認する (/dev/diskXX)</h1>

<p>$ diskutil list</p>

<h1>USB メモリをアンマウントする (/dev/disk1の場合)</h1>

<p>$ diskutil unMountDisk /dev/disk1
$ diskutil list
```</p>

<p>dd で USB メモリにインストールイメージを書き込む。</p>

<p>```
$ sudo dd if=centos.img of=/dev/disk1 bs=1m
$ echo $?</p>

<h1>=>0</h1>

<p>```</p>

<p>書き込みは結構時間がかかる。
完了後、「この Mac では読めない形式だ」的なダイアログが出るが無視。</p>

<p>USB メモリをイジェクトして取り外す。</p>

<p><code>
$ sudo diskutil eject /dev/disk1
</code></p>

<h2>4. ノート PC にインストールする</h2>

<p>※ USB メモリをノートPC側で使える前提。USBメモリのドライバがインストールされた状態からスタート。</p>

<p>BIOS設定画面から起動デバイスの優先順位を変更する。
USB デバイスを最優先にしておく。</p>

<p>インストールイメージを焼いた USB メモリを刺したままノート PC を起動してみて「CentOSをインストール？それともお試しインストール？」みたいな画面が出てくる。
お試しインストールしてみて、キーボードやタッチパッドが使えることを確認する。
確認ができたら再起動し、インストールする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh をログインシェルにしてワーク・ライフ・バランスを改善する (oh-my-zsh)]]></title>
    <link href="http://momota.github.io/blog/2013/09/07/oh-my-zsh/"/>
    <updated>2013-09-07T00:04:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/09/07/oh-my-zsh</id>
    <content type="html"><![CDATA[<p>bash や tcsh でいいよ、って人もだまされたと思って zsh 試してほしい。もう元に戻れないくらい便利だと感じてもらえるだろう。本番環境のサーバにも入れたいくらい。</p>

<p>zsh そのままでも十分便利だけど、<em>oh-my-zsh</em> を入れるとさらに便利になるよ。
oh-my-zsh はオープンソースで zsh の便利設定やカラーテーマなどがまとまっているもの。</p>

<p>以下では、zsh インストールと oh-my-zsh の導入について記載するよ。</p>

<!-- more -->


<h2>0. zsh の特徴, つまり導入メリット</h2>

<p><a href="http://ja.wikipedia.org/wiki/Z_Shell">wikipedia に zsh の特徴がまとめられている</a>が、その中でも特に以下が個人的に便利だと思う。</p>

<ul>
<li>プログラム可能な補完機能に拠って、多くのユーザーコマンドのオプションや引数を打つのを支援する

<ul>
<li>インストールの時点で数百のコマンドをサポートしている</li>
</ul>
</li>
<li>スペル修正機能

<ul>
<li>間違いを正すのはもちろん、大文字を小文字に変換してくれたり</li>
</ul>
</li>
<li>ユーザーの起動している全てのzshでコマンド履歴を共有することができる

<ul>
<li>screen や tmux 使いにはうれしい</li>
</ul>
</li>
</ul>


<p>その他、Wikipediaには以下の特徴が列挙されている。</p>

<ul>
<li>拡張ファイル名生成（ワイルドカード展開）に拠って &ldquo;find&rdquo; のような外部コマンドを呼び出さないで、ファイル名を展開する。</li>
<li>変数や配列の処理が改善されている。</li>
<li>複数行コマンドがバッファーで編集できる。</li>
<li>様々な互換モードが在る。例えば、zshをshとして実行したとき、bashの振りをするようにできる。</li>
<li>プロンプトテーマ</li>
<li>端末の右端に情報を表示し長いコマンドを打っているときは自動的に隠れる右プロンプトを表示できる。</li>
<li>殆ど全部のカスタマイズが可能。</li>
</ul>


<h2>1. zsh をインストールする</h2>

<p>失うものが何もなくなったところで zsh をインストールしよう。</p>

<p>centos だと yum でインストールする。</p>

<p><code>sh
$ sudo yum -y install zsh
</code></p>

<p>macだと homebrew でインストールする。</p>

<p><code>sh
$ sudo brew install zsh
</code></p>

<p>ubuntu だと apt でインストールする。</p>

<p><code>sh
$ sudo apt-get install zsh
</code></p>

<p>インストールできたかどうかを確認する。(上述したすべてのOSで共通、たぶん)</p>

<p><code>sh
$ zsh --version
zsh 4.3.17 (x86_64-unknown-linux-gnu)
$ which zsh
/usr/bin/zsh
</code></p>

<h2>2. ログインシェルを zsh にする</h2>

<p>ログイン直後にデフォルトで起動する shell を zsh にするよ。
ここでは ubuntu 12.04 でのコマンド例ですが、たぶん mac や centos とかでも一緒でOKだと思う。</p>

<p>現在利用可能なシェルの一覧は以下で確認できる。</p>

<p>```sh
$ cat /etc/shells</p>

<h1>/etc/shells: valid login shells</h1>

<p>/bin/sh
/bin/dash
/bin/bash
/bin/rbash
/bin/zsh
/usr/bin/zsh
/usr/bin/tmux
```</p>

<p>それではログインシェルを zsh に変えよう。
インタラクティブにパスワードと zsh への path を入力しよう。</p>

<p>```sh
$ chsh
Password:
Changing the login shell for momota
Enter the new value, or press ENTER for the default</p>

<pre><code>    Login Shell [/bin/bash]: /usr/bin/zsh
</code></pre>

<p>```</p>

<p>再度ログインして、ログインシェルが zsh へ変わったことを確認しよう。</p>

<p><code>sh
$ echo $SHELL
/usr/bin/zsh
</code></p>

<p>ここで、<code>‾/.zshrc</code> を作りたい衝動を抑えて、次に進もう。</p>

<h2>3. <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> を導入する</h2>

<p>繰り返しになりますが、oh-my-zsh はオープンソースで zsh の便利設定やカラーテーマなどがまとまっているもの。<code>.zshrc</code>もテンプレがあるのでコピれば楽ちん。
カスタマイズしたければ oh-my-zsh を導入してからにしよう。
導入方法は github に書いてあるとおり <code>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</code> でいいと思うけど、シェルスクリプトの中身をチェックするのがめんどかったのでわたしはマニュアルで入れました。</p>

<h3>3.1. リポジトリから 最新版を clone する</h3>

<p><code>sh
$ git clone git://github.com/robbyrussell/oh-my-zsh.git ‾/.oh-my-zsh
</code></p>

<h3>3.2. すでに <code>‾/.zshrc</code> を作っているひとはバックアップしよう</h3>

<p><code>sh
cp ‾/.zshrc ‾/.zshrc.orig
</code></p>

<h3>3.3. <code>.zshrc</code> テンプレートをコピる</h3>

<p><code>sh
cp ‾/.oh-my-zsh/templates/zshrc.zsh-template ‾/.zshrc
</code></p>

<h3>3.4. 新しい <code>.zshrc</code> を読み込もう</h3>

<p><code>sh
$ source ‾/.zshrc
</code></p>

<p><code>source</code> の代わりに再ログインしてもいいけど。
こんな感じで git のステータスも見やすくなる。</p>

<p><img src="https://dl.dropboxusercontent.com/u/28495046/octopress/20130907_oh-my-zsh/zsh.png" alt="zsh" /></p>

<h3>3.5. テーマを変更する</h3>

<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">ここにいろいろなテーマがある</a> ので好きなテーマ名を <code>‾/.zshrc</code> 中の <code>ZSH_THEME</code> にセットしてあげればOK。</p>

<p><code>sh
ZSH_THEME="wedisagree"
</code></p>

<p>変更したら、以下で <code>‾/.zshrc</code> を再読み込み。</p>

<p><code>sh
$ source ‾/.zshrc
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv でrubyバージョンにはもう泣かされない]]></title>
    <link href="http://momota.github.io/blog/2013/08/25/rbenv/"/>
    <updated>2013-08-25T22:06:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/08/25/rbenv</id>
    <content type="html"><![CDATA[<p>ソフトウェアバージョンの差異に悩まされる人は多いと思う。</p>

<p>同じOS上で違うバージョンのrubyを動かしたいことはまあある。
<code>/home/you/foo</code>以下は既存コードがあるから1.8系のままでで動かしたいし、<code>/home/you/bar</code>以下は新しい試みとして2.0系を動かしたいとか。
そこでrbenvという便利なrubyバージョン管理ツールがある。
rbenvにより、あるディレクトリ以下のrubyバージョンを任意に指定できる。</p>

<!-- more -->


<h2>rbenv をインストールする</h2>

<p>詳細はgithubの<code>README.md</code>参照。<a href="https://github.com/sstephenson/rbenv">https://github.com/sstephenson/rbenv</a></p>

<h3>1. 最新コードをローカルにチェックアウトする</h3>

<p>githubから最新版を <code>~/.rbenv</code> にチェックアウトする</p>

<p><code>sh
$ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
</code></p>

<h3>2. pathを通すため、shellの設定を変更する</h3>

<ul>
<li><code>~/.rbenv/bin</code> を <code>$PATH</code> に追加する</li>
</ul>


<p><code>sh
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.zshrc
</code></p>

<ul>
<li>shim と 自動補完を有効にする</li>
</ul>


<p><code>sh
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.zshrc
</code></p>

<p>bash ユーザは <code>~/.zshrc</code> の代わりに <code>~/.bash_profile</code> へ。
ubuntu ユーザは <code>~/.zshrc</code> の代わりに <code>~/.profile</code> へ。</p>

<h3>3. 設定変更内容を反映するため、shell を再起動する</h3>

<p><code>sh
$ exec $SHELL -l
</code></p>

<h3>(番外編) rbenv を最新版にアップグレードする</h3>

<p><code>sh
$ cd ~/.rbenv
$ git pull
</code></p>

<h2>ruby-build をインストールして、任意の ruby バージョンをインストールできるようにする</h2>

<p><code>ruby-build</code> は rbenv のプラグインで、いろいろなバージョンの ruby のインストールを <code>rbenv install</code> コマンドでできるようになる。
インストールは、<a href="https://github.com/sstephenson/ruby-build">公式に書いてあるように以下。</a></p>

<p><code>sh
$ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></p>

<p>MAC使いだと homebrew でいける。</p>

<p><code>sh
$ brew install ruby-build
</code></p>

<h3>インストール可能な ruby バージョンを一覧表示する</h3>

<p><code>sh
$ rbenv install -l
</code></p>

<h3>任意のバージョンの ruby をインストールする</h3>

<p><code>sh
$ rbenv install 1.9.3-pxx
</code></p>

<h3>ruby-build を upgrade する</h3>

<p>新しいバージョンの ruby が公開されたりすると、ruby-build を upgrade する必要がある。
<code>git pull</code> してあげれば良い。</p>

<p><code>sh
$ cd ~/.rbenv/plugins/ruby-build/
$ git pull origin master
</code></p>

<h2>rbenv で任意バージョンの ruby へ切り替えたり</h2>

<p>```sh</p>

<h1>List all Ruby versions known by rbenv</h1>

<p>$ rbenv versions</p>

<h1>switch version</h1>

<p>$ rbenv global 1.9.3-pxx</p>

<h1>back to system default</h1>

<p>$ rbenv global system</p>

<h1>特定のディレクトリ以下のRubyバージョンを切り替え</h1>

<p>$ rbenv local 1.9.3-p327</p>

<h1>ローカル設定を解除</h1>

<p>$ rbenv local &mdash;unset</p>

<h1>path to installed ruby or gem</h1>

<p>$ rbenv rehash
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim7.4 を mac (osx) にインストール]]></title>
    <link href="http://momota.github.io/blog/2013/08/24/vim-osx/"/>
    <updated>2013-08-24T12:56:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/08/24/vim-osx</id>
    <content type="html"><![CDATA[<p><a href="http://vim-jp.org/blog/2013/08/10/vim_7.4_released.html">vim 7.4がリリースされた</a>ので、macのvimをupdateする。</p>

<!-- more -->


<h2>install mercurial</h2>

<p>最新のvimをリポジトリから引っ張ってくる(後述の<code>hg clone http://...</code>)ため、分散型バージョン管理システムであるmercurialをインストールする。mercurialはgitの親戚かな。</p>

<ol>
<li><p>インストーラをダウンロードする</p>

<p> mercurial インストーラをダウンロードする from <a href="http://mercurial.selenic.com/">http://mercurial.selenic.com/</a></p></li>
<li><p>install</p>

<p> ダウンロードしたファイルを unzip する。
 解凍した <code>*.mpkg</code> をダブルクリックし、インストーラを起動する。そのあとはポチポチと次へ的なボタンを押す簡単なお仕事。</p></li>
</ol>


<h2>install vim</h2>

<p><a href="http://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x">http://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x</a> を参考にした。</p>

<h3>(1) 事前確認</h3>

<p>現状のバイナリへのpathやバージョンを確認する。</p>

<p>```sh</p>

<pre><code>$ which vim
/usr/bin/vim
$ vim --version | head -n 2
VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jun 20 2012 13:16:02)
Compiled by root@apple.com
</code></pre>

<p>```</p>

<h3>(2) インストールと設定</h3>

<p>```sh</p>

<pre><code>$ cd /opt/local/bin

# download, compile, and install the latest vim
$ sudo hg clone https://code.google.com/p/vim/
$ mv vim vim_
$ cd vim_
$ sudo ./configure --prefix=/opt/local
$ sudo make
$ sudo make install


# add the binary to your path, ahead of /usr/bin
$ echo 'export PATH="/opt/local/bin:$PATH"' &gt;&gt; ~/.zshrc

# reload zshrc so the changes take effect in this window
$ source ~/.zshrc
</code></pre>

<p>```</p>

<p>リポジトリからクローンしたときにディレクトリ名が<code>vim</code>のままだと<code>make install</code>時にエラーになるので、<code>vim_</code>など適当なディレクトリ名に変更しました。</p>

<h3>(3) 事後確認</h3>

<p>7.4になりました。enjoy your vim life.</p>

<p>```sh</p>

<pre><code>$ which vim
/opt/local/bin/vim
$ vim --version | head -n 2
IM - Vi IMproved 7.4 (2013 Aug 10, compiled Aug 24 2013 12:28:42)
MacOS X (unix) version
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
