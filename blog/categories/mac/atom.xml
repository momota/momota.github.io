<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2013-08-29T02:14:22+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rbenv でrubyバージョンにはもう泣かされない]]></title>
    <link href="http://momota.github.io/blog/2013/08/25/rbenv/"/>
    <updated>2013-08-25T22:06:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/08/25/rbenv</id>
    <content type="html"><![CDATA[<p>ソフトウェアバージョンの差異に悩まされる人は多いと思う。</p>

<p>同じOS上で違うバージョンのrubyを動かしたいことはまあある。
<code>/home/you/foo</code>以下は既存コードがあるから1.8系のままでで動かしたいし、<code>/home/you/bar</code>以下は新しい試みとして2.0系を動かしたいとか。
そこでrbenvという便利なrubyバージョン管理ツールがある。
rbenvにより、あるディレクトリ以下のrubyバージョンを任意に指定できる。</p>

<!-- more -->


<h1>ruby install by rbenv</h1>

<p>githubの<code>README.md</code>参照。</p>

<h1>rbenv operations</h1>

<p>```sh</p>

<h1>list all available versions</h1>

<h1>&ldquo;install&rdquo; command require that install ruby-build</h1>

<h1>&ndash;> <a href="https://github.com/sstephenson/ruby-build">https://github.com/sstephenson/ruby-build</a></h1>

<p>$ rbenv install -l</p>

<h1>List all Ruby versions known by rbenv</h1>

<p>$ rbenv versions</p>

<h1>install</h1>

<p>$ rbenv install 1.9.3-pxx</p>

<h1>switch</h1>

<p>$ rbenv global 1.9.3-pxx</p>

<h1>back to system default</h1>

<p>$ rbenv global system</p>

<h1>特定のディレクトリ以下のRubyバージョンを切り替え</h1>

<p>$ rbenv local 1.9.3-p327</p>

<h1>ローカル設定を解除</h1>

<p>$ rbenv local &mdash;unset</p>

<h1>get the latest ruby versions for rbenv</h1>

<p>$ brew install ruby-build
$ brew link -f ruby-build</p>

<h1>path to installed ruby or gem</h1>

<p>$ rbenv rehash</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim7.4 を mac (osx) にインストール]]></title>
    <link href="http://momota.github.io/blog/2013/08/24/vim-osx/"/>
    <updated>2013-08-24T12:56:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/08/24/vim-osx</id>
    <content type="html"><![CDATA[<p><a href="http://vim-jp.org/blog/2013/08/10/vim_7.4_released.html">vim 7.4がリリースされた</a>ので、macのvimをupdateする。</p>

<!-- more -->


<h2>install mercurial</h2>

<p>最新のvimをリポジトリから引っ張ってくる(後述の<code>hg clone http://...</code>)ため、分散型バージョン管理システムであるmercurialをインストールする。mercurialはgitの親戚かな。</p>

<ol>
<li><p>インストーラをダウンロードする</p>

<p> mercurial インストーラをダウンロードする from <a href="http://mercurial.selenic.com/">http://mercurial.selenic.com/</a></p></li>
<li><p>install</p>

<p> ダウンロードしたファイルを unzip する。
 解凍した <code>*.mpkg</code> をダブルクリックし、インストーラを起動する。そのあとはポチポチと次へ的なボタンを押す簡単なお仕事。</p></li>
</ol>


<h2>install vim</h2>

<p><a href="http://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x">http://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x</a> を参考にした。</p>

<h3>(1) 事前確認</h3>

<p>現状のバイナリへのpathやバージョンを確認する。</p>

<p>```sh</p>

<pre><code>$ which vim
/usr/bin/vim
$ vim --version | head -n 2
VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jun 20 2012 13:16:02)
Compiled by root@apple.com
</code></pre>

<p>```</p>

<h3>(2) インストールと設定</h3>

<p>```sh</p>

<pre><code>$ cd /opt/local/bin

# download, compile, and install the latest vim
$ sudo hg clone https://code.google.com/p/vim/
$ mv vim vim_
$ cd vim_
$ sudo ./configure --prefix=/opt/local
$ sudo make
$ sudo make install


# add the binary to your path, ahead of /usr/bin
$ echo 'export PATH="/opt/local/bin:$PATH"' &gt;&gt; ~/.zshrc

# reload zshrc so the changes take effect in this window
$ source ~/.zshrc
</code></pre>

<p>```</p>

<p>リポジトリからクローンしたときにディレクトリ名が<code>vim</code>のままだと<code>make install</code>時にエラーになるので、<code>vim_</code>など適当なディレクトリ名に変更しました。</p>

<h3>(3) 事後確認</h3>

<p>7.4になりました。enjoy your vim life.</p>

<p>```sh</p>

<pre><code>$ which vim
/opt/local/bin/vim
$ vim --version | head -n 2
IM - Vi IMproved 7.4 (2013 Aug 10, compiled Aug 24 2013 12:28:42)
MacOS X (unix) version
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2へsolarized導入]]></title>
    <link href="http://momota.github.io/blog/2013/08/24/solarized-iterm2/"/>
    <updated>2013-08-24T00:52:00+09:00</updated>
    <id>http://momota.github.io/blog/2013/08/24/solarized-iterm2</id>
    <content type="html"><![CDATA[<p><img src="http://ethanschoonover.com/solarized/img/solarized-yinyang.png" alt="solarized" /></p>

<p>人気のカラースキーム <a href="http://ethanschoonover.com/solarized">Solarized</a> を、iTerm2へ適用する。</p>

<p>適用イメージは以下。</p>

<ul>
<li>before</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/28495046/octopress/20130823_iterm_solarized/before_iterm.png" alt="iterm before" /></p>

<ul>
<li>after</li>
</ul>


<p><img src="https://dl.dropboxusercontent.com/u/28495046/octopress/20130823_iterm_solarized/after_iterm.png" alt="iterm after" /></p>

<!-- more -->


<ol>
<li><p>Solarized*.itermcolors をダウンロードする</p>

<p> <a href="https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized">https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized</a> からSolarized*.itermcolors ファイルをダウンロードする</p></li>
<li><p>iterm2 を開く</p>

<p> ちなみにわたしは、<code>ctrl + space</code> でSpotlightを開き、<code>ite</code>入力くらいで起動しています。</p></li>
<li><p>preferencesダイアログを開く</p>

<p> <code>command + o</code> でprofilesダイアログを開いて、<code>Edit Profiles...</code> ボタンを押下する。</p></li>
<li><p>solarized用のprofileを作成する</p>

<p> preferences ダイアログの<code>Profiles</code>タブから、左下の方の<code>+</code>を押下し、プロファイルを追加する。
 <code>General</code>タブのBasicのNameを<code>solarized</code>とかに修正する</p></li>
<li><ol>
<li>でダウンロードしたファイルを読み込ませる</li>
</ol>


<p> <code>Colors</code> タブから <code>Load Presets...</code> ボタンを押下後、<code>import</code> を押す。1. でダウンロードしたSolarized*.itermcolorsファイルを選択する。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
