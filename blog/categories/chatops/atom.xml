<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chatops | momota.txt]]></title>
  <link href="http://momota.github.io/blog/categories/chatops/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2020-08-22T12:41:27+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ねこの画像をランダムに表示する slack command]]></title>
    <link href="http://momota.github.io/blog/2019/04/13/slack-command/"/>
    <updated>2019-04-13T19:06:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/04/13/slack-command</id>
    <content type="html"><![CDATA[<p>心の平穏のために、猫の画像をランダムに表示してくれる Slack command <code>/neko</code> を作った。</p>

<p>Slack で <code>/neko</code> と打つと、Cloud Functions にリクエストが飛び、Functions が <a href="https://thecatapi.com/">TheCatAPI</a> からランダムに猫画像 URL を取得するもの。</p>

<p><img src="/images/20190413_neko-slack-command/neko-command.png" alt="slack neko command" /></p>

<ul>
<li>参考

<ul>
<li><a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a></li>
<li><a href="http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions/">Google cloud functions で slack (slash) commands をつくる &ndash; momota.txt</a></li>
</ul>
</li>
</ul>


<table>
<thead>
<tr>
<th> 使ったもの                  </th>
<th> 用途                </th>
</tr>
</thead>
<tbody>
<tr>
<td> Google Cloud Functions      </td>
<td> バックエンド        </td>
</tr>
<tr>
<td> Python 3.7                  </td>
<td> Functionsの実装言語 </td>
</tr>
<tr>
<td> Serverless framework 1.40.0 </td>
<td> GCPへのデプロイ     </td>
</tr>
</tbody>
</table>


<!-- more -->


<h2>Serverless framework の初期設定</h2>

<p>```sh</p>

<h1>create new service</h1>

<p>$ serverless create &mdash;template google-python &mdash;path neko</p>

<h1>go to the service directory</h1>

<p>$ cd neko</p>

<h1>install provider plugins</h1>

<p>$ npm install
```</p>

<p><code>serverless.yml</code> を自分の GCP 環境に合わせて編集する。</p>

<p>```yaml
service: neko</p>

<p>provider:
  name: google
  stage: dev
  runtime: python37
  region: YOUR-REGION
  project: YOUR-GCP-PROJECT-ID
  credentials: ~/.gcloud/YOUR-KEYFILE.json</p>

<p>plugins:
  &ndash; serverless-google-cloudfunctions</p>

<p>package:
  exclude:</p>

<pre><code>- node_modules/**
- .gitignore
- .git/**
</code></pre>

<p>functions:
  neko-command:</p>

<pre><code>handler: neko
events:
  - http: path
memorySize: 256
timeout: 60s
labels: {
    application: slack-slash-command,
    environment: development,
    owner: momota
</code></pre>

<p>}
```</p>

<h2>neko コマンドの実装</h2>

<p>まず <a href="https://thecatapi.com/">TheCatAPI</a> の API エンドポイントをコードの中に埋め込みたくないので、 <code>config.json</code> という外部ファイルに書き出し、実行時にそこから読み込むことにする。</p>

<p>以下のような感じ。</p>

<p>```json
{</p>

<pre><code>"API_URL": "https://api.thecatapi.com/v1/images/search?format=json"
</code></pre>

<p>}
```</p>

<p>Functions 用のコードは以下のような感じ。</p>

<p>```python
import json
import requests
from flask import jsonify</p>

<h1>外部ファイル config.json の読み込み</h1>

<p>with open(&lsquo;config.json&rsquo;, &lsquo;r&rsquo;) as f:</p>

<pre><code>data = f.read()
</code></pre>

<p>config = json.loads(data)</p>

<h1>TheCatAPI を叩いて、レスポンス (JSON) から 猫画像 URL を取得</h1>

<p>def neko_url():</p>

<pre><code>res = requests.get(config['API_URL'])
json_res = json.loads(res.text)
return json_res[0]['url']
</code></pre>

<h1>Slackへの応答フォーマットに整形</h1>

<p>def format_slack_message(message):</p>

<pre><code>return {
    'response_type': 'in_channel',
    'text': message
}
</code></pre>

<h1>Handler: Functions がリクエストを受けたときに実行する関数</h1>

<p>def neko(request):</p>

<pre><code>message = neko_url()
response = format_slack_message('ねこです ' + message)
return jsonify(response)
</code></pre>

<p>```</p>

<p>あとは GCP にデプロイして、Slack の Slash command の設定をすれば使える。</p>

<p><code>sh
$ serverless deploy -v
</code></p>

<h2>ちょっと頑張る： Slack トークン認証とエラーハンドリング</h2>

<p>Slack の Verification Token による簡易的な認証処理を追加する。</p>

<p>Slack command のApp設定から、Basic Information > App Credentials > Verification Token からトークンを取得して、<code>config.json</code> に書く。</p>

<p>```json
{</p>

<pre><code>"API_URL": "https://api.thecatapi.com/v1/images/search?format=json",
"SLACK_TOKEN": "YOUR-VERIFICATION-TOKEN"
</code></pre>

<p>}
```</p>

<p>以下のような処理を追加し、認証処理とエラーハンドリング処理を追加する。</p>

<p>とりあえず意図しないリクエストがバックエンド (Functions) にきたら、例外を投げる。</p>

<p>```python
def verify_request(request):</p>

<pre><code># POSTメソッドじゃない
if request.method != 'POST':
    raise Exception(405, 'Only POST requests are accepted')

# データが POST されていない
if not request.form:
    raise Exception(422, 'POST form is empty')

# POST データに ’token’ フィールドにない
if 'token' not in request.form:
    raise Exception(422, 'POST form is invalid')

# トークンがマッチしない
if request.form['token'] != config['SLACK_TOKEN']:
    raise Exception(403, 'Permission denied')
</code></pre>

<p>```</p>

<p>メイン処理側では、例外を補足したら、それに応じたエラーを返すように変更する。</p>

<p>```python
def neko(request):</p>

<pre><code>try:
    # validate request
    verify_request(request)

    message = neko_url()
    response = format_slack_message('ねこです ' + message)
    return jsonify(response)
except Exception as e:
    code, msg = e.args
    print('Exception occured: &lt;{}&gt; {}'.format(code, msg))
    return (msg, code)
</code></pre>

<p>```</p>

<h2>もうちょっと頑張る: 非同期処理</h2>

<p><a href="http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions/">前回</a>も述べたが、
Slack command は 3000 ms (3秒) 以内に応答しないとタイムアウトになってしまう。</p>

<p><a href="https://thecatapi.com/">TheCatAPI</a> のような外部 API に依存している場合、3 秒以内のレスポンスを保証できない可能性が高くなる。
そこで、バックエンドの Functions がリクエストを受けたら即時にレスポンスを返し、スレッドにより非同期で応答する。
Slack としても、そのような仕組みを支援するためにレスポンス用 URL を付与して、バックエンド側にリクエストを投げてくれる。</p>

<p>以下のようなイメージ。</p>

<p><img src="/images/20190413_neko-slack-command/seq.png" alt="change async sequence" /></p>

<p>スレッド処理のため、メイン処理を関数化し、レスポンス用 URL へ返答するよう書き換える。</p>

<p>```python
from threading import Thread</p>

<p>def neko_async(response_url):</p>

<pre><code>message = neko_url()
response = format_slack_message('ねこです ' + message)
post_data = json.dumps(response)

post_response = post_to_slack(response_url, post_data)
return
</code></pre>

<p>def neko(request):</p>

<pre><code>try:
    # validate request
    verify_request(request)

    # レスポンス用 URL の取得
    response_url = request.form['response_url']

    # スレッドで猫画像 URL処理を取得
    thread = Thread(target=neko_async, kwargs={'response_url': response_url})
    thread.run()

    return ''
except Exception as e:
    code, msg = e.args
    print('Exception occured: &lt;{}&gt; {}'.format(code, msg))
    return (msg, code)
</code></pre>

<p>```</p>

<p>最終的には以下のような感じになる。</p>

<p>```python
import json
import requests
from threading import Thread</p>

<h1>外部ファイル config.json の読み込み</h1>

<p>with open(&lsquo;config.json&rsquo;, &lsquo;r&rsquo;) as f:</p>

<pre><code>data = f.read()
</code></pre>

<p>config = json.loads(data)</p>

<h1>エラーハンドリングと簡易認証処理</h1>

<p>def verify_request(request):</p>

<pre><code># POSTメソッドじゃない
if request.method != 'POST':
    raise Exception(405, 'Only POST requests are accepted')

# データが POST されていない
if not request.form:
    raise Exception(422, 'POST form is empty')

# POST データに ’token’ フィールドにない
if 'token' not in request.form:
    raise Exception(422, 'POST form is invalid')

# トークンがマッチしない
if request.form['token'] != config['SLACK_TOKEN']:
    raise Exception(403, 'Permission denied')
</code></pre>

<h1>スレッド処理用関数</h1>

<p>def neko_async(response_url):</p>

<pre><code>message = neko_url()
response = format_slack_message('ねこです ' + message)
post_data = json.dumps(response)

post_response = post_to_slack(response_url, post_data)
return
</code></pre>

<h1>TheCatAPI を叩いて、レスポンス (JSON) から 猫画像 URL を取得</h1>

<p>def neko_url():</p>

<pre><code>res = requests.get(config['API_URL'])
json_res = json.loads(res.text)
return json_res[0]['url']
</code></pre>

<h1>Slackへの応答フォーマットに整形</h1>

<p>def format_slack_message(message):</p>

<pre><code>return {
    'response_type': 'in_channel',
    'text': message
}
</code></pre>

<h1>Slack レスポンス用 URL への POST処理</h1>

<p>def post_to_slack(url, post_data):</p>

<pre><code>post_headers = {
    'Content-type': 'application/json; charset=utf-8'
}

return requests.post(
    url,
    data=post_data,
    headers=post_headers
)
</code></pre>

<h1>Handler: Functions がリクエストを受けたときに実行する関数</h1>

<p>def neko(request):</p>

<pre><code>try:
    # validate request
    verify_request(request)

    response_url = request.form['response_url']
    thread = Thread(target=neko_async, kwargs={'response_url': response_url})
    thread.run()

    return ''
except Exception as e:
    code, msg = e.args
    print('Exception occured: &lt;{}&gt; {}'.format(code, msg))
    return (msg, code)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google cloud functions で slack (slash) commands をつくる]]></title>
    <link href="http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions/"/>
    <updated>2019-04-06T09:19:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/04/06/slack-commands-by-cloud-functions</id>
    <content type="html"><![CDATA[<p>Slack commands を Google Cloud Functions で実装する。</p>

<p>Slack commands は slack 上で <code>/command arguments</code> 形式で入力すると何かしらの応答を返す仕組み。<code>/</code> から始まるのでSlack Slash command とも呼ばれるようだ。
詳細は公式 API ページを参照: <a href="https://api.slack.com/slash-commands">Slash Commands | Slack</a></p>

<p><a href="http://momota.github.io/blog/2015/01/11/lita/">過去につくった Slack Bot</a> が動かなくなったので、GCP を利用して作り直そうというのが背景。</p>

<p>クラウドへのデプロイについては serverless framework を利用した。</p>

<ul>
<li>参考

<ul>
<li><a href="http://momota.github.io/blog/2015/01/11/lita/">lita で Slack Bot (on heroku) をつくる &ndash; momota.txt</a></li>
<li><a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a></li>
</ul>
</li>
</ul>


<p>今回は、slack で <code>/ping</code> というコマンドを実行したら、<code>pong</code> と返すような slack command を作る。
できあがりは以下のような感じ。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-ping-command.gif" alt="slack command screenshot" /></p>

<!-- more -->


<h3>事前設定</h3>

<p>serverless framework のインストール方法は <a href="http://momota.github.io/blog/2018/11/05/serverless-framework/">serverless framework による AWS Lambda ローカル開発 &ndash; momota.txt</a> を参照。</p>

<p>今回は、AWS Lambda (Javascript) ではなく GCP Cloud Functions (Python) を使う。</p>

<p>事前に GCP のクレデンシャル設定が必要となる。</p>

<ul>
<li>GCP クレデンシャル設定の詳細は公式を参照してほしい: <a href="https://serverless.com/framework/docs/providers/google/guide/credentials/">Serverless Framework &ndash; Google Cloud Functions Guide &ndash; Credentials</a></li>
<li>概要は以下。

<ol>
<li>請求先アカウントを作成</li>
<li>新規の Google Cloudプロジェクトを作成 (プロジェクトIDを控える)</li>
<li>必要な API を有効化。以下。

<ul>
<li>Google Cloud Functions</li>
<li>Google Cloud Deployment Manager</li>
<li>Google Cloud Storage</li>
<li>Stackdriver Logging</li>
</ul>
</li>
<li>クレデンシャルを入手する

<ul>
<li>サービスアカウントを作成</li>
<li>ロールの付与

<ul>
<li>Deployment Manager Editor</li>
<li>Storage Admin</li>
<li>Logging Admin</li>
<li>Cloud Functions Developer</li>
</ul>
</li>
<li>クレデンシャルキーファイルの作成 (keyfile.json)</li>
<li>キーファイルのデプロイ: <code>~/.gcloud/keyfile.json</code> など</li>
</ul>
</li>
</ol>
</li>
</ul>


<h3>serverless サービスの作成</h3>

<p>ここでは <code>ping</code> という名前でサービス (プロジェクトのようなもの) を作成する。</p>

<p>```sh
$ serverless create &mdash;template google-python &mdash;path ping
Serverless: Generating boilerplate&hellip;
Serverless: Generating boilerplate in &ldquo;/path-you-want/ping&rdquo;</p>

<hr />

<p>|   _   .&mdash;&mdash;&ndash;.&mdash;&mdash;.&mdash;.&mdash;.&mdash;&mdash;&ndash;.&mdash;&mdash;|  .&mdash;&mdash;&ndash;.&mdash;&mdash;&ndash;.&mdash;&mdash;&ndash;.
|   |<em><strong>|  &ndash;</strong>|   </em>|  |  |  &ndash;<strong>|   _|  |  &ndash;</strong>|<strong> &mdash;|</strong> &mdash;|
|<strong><strong>   |</strong></strong><em>|<strong>|  _</strong>/|</em><em><em><strong>|</strong>| |<strong>|</strong></em></em><em>|</em><strong><strong>|</strong></strong>_|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v1.40.0
 &mdash;&mdash;&mdash;&ndash;'</p>

<p>Serverless: Successfully generated boilerplate for template: &ldquo;google-python&rdquo;
```</p>

<p>作成したサービス名と同名のディレクトリが作成されるので、移動する。</p>

<p><code>sh
$ cd ping
</code></p>

<p>以下のファイルが自動生成されている。</p>

<p><code>sh
$ ls -la
合計 24
drwxr-xr-x 2 momota momota 4096  4月  2 22:45 .
drwxr-xr-x 5 momota momota 4096  4月  2 22:45 ..
-rw-r--r-- 1 momota momota  597  4月  2 22:45 .gitignore
-rw-r--r-- 1 momota momota  362  4月  2 22:45 main.py
-rw-r--r-- 1 momota momota  303  4月  2 22:45 package.json
-rw-r--r-- 1 momota momota 1431  4月  2 22:45 serverless.yml
</code></p>

<h3>プロバイダプラグインのインストール</h3>

<p>プロジェクトディレクトリで <code>npm install</code> する。</p>

<p><code>sh
$ npm install
</code></p>

<h3>プロバイダプロパティの更新</h3>

<p><code>serverless.yml</code> を編集する。</p>

<p><code>project</code> フィールドにGCP プロジェクト ID の指定するのと、<code>credentials</code> フィールドにcredentials ファイルの相対パスを指定する。
<code>functions</code> 以下の memorySize, timeout, labels はお好みで設定する。</p>

<p><code>handler</code> フィールドで指定している ping が後述する Python コードの関数名になっており、Cloud Functions 起動時に当該関数が呼び出される。</p>

<p>```yaml
service: ping</p>

<p>provider:
  name: google
  stage: dev
  runtime: python37
  region: us-central1
  project: YOUR-GCP-PROJECT-ID
  credentials: ~/.gcloud/YOUR-KEYFILE.json</p>

<p>plugins:
  &ndash; serverless-google-cloudfunctions</p>

<p>package:
  exclude:</p>

<pre><code>- node_modules/**
- .gitignore
- .git/**
</code></pre>

<p>functions:
  ping-command:</p>

<pre><code>handler: ping
events:
  - http: path
memorySize: 256
timeout: 60s
labels: {
    application: slack-slash-command,
    environment: production,
    owner: momota
}
</code></pre>

<p>```</p>

<h3>Functions コードの実装</h3>

<p>Slack から ping を受けたら pong を返す Python コードを書く。</p>

<p>Slack command が実行されとき Slack から送信されるリクエストは以下のようなフォーマットになっている。</p>

<p><code>
token=gIkuvaNzQIHg97ATvDxqgjtO
&amp;team_id=T0001
&amp;team_domain=example
&amp;enterprise_id=E0001
&amp;enterprise_name=Globular%20Construct%20Inc
&amp;channel_id=C2147483705
&amp;channel_name=test
&amp;user_id=U2147483697
&amp;user_name=Steve
&amp;command=/weather
&amp;text=94070
&amp;response_url=https://hooks.slack.com/commands/1234/5678
&amp;trigger_id=13345224609.738474920.8088930838d88f008e0
</code></p>

<p>これに対して、以下のような Json フォーマットでレスポンスを返す必要がある。</p>

<p>```json
{</p>

<pre><code>"response_type": "in_channel",
"text": "It's 80 degrees right now.",
"attachments": [
    {
        "text":"Partly cloudy today and tomorrow"
    }
]
</code></pre>

<p>}
```</p>

<p><code>main.py</code> を編集する。以下のようなコードになる。</p>

<p>```python
import json
from flask import jsonify</p>

<h1>ping を受けたら pong を返す関数</h1>

<p>def ping_command(query):</p>

<pre><code>return 'pong :table_tennis_paddle_and_ball:'
</code></pre>

<p>def format_slack_message(message):</p>

<pre><code>return {
    'response_type': 'in_channel',
    'text': message,
    'attachments': []
}
</code></pre>

<h1>Cloud Functions で起動される関数: メイン関数</h1>

<p>def ping(request):</p>

<pre><code># validate request
if request.method != 'POST':
    return 'Only POST requests are accepted', 405

message = ping_command(request.form['text'])
response = format_slack_message(message)

return jsonify(response)
</code></pre>

<p>```</p>

<p>Flask ライブラリに依存しているので、<code>requirements.txt</code> を作る。</p>

<p><code>sh
$ echo "Flask==1.0.2" &gt;&gt; requirements.txt
</code></p>

<h3>GCP へのデプロイ</h3>

<p><code>serverless deploy</code> により、GCS にソースコードがアップロードされ、Cloud Functions が Python 3.7 で起動する。
これはマネジメントコンソールからも確認できる。</p>

<p>```sh
$ serverless deploy -v                                <br/>
Serverless: Packaging service&hellip;
Serverless: Excluding development dependencies&hellip;
Serverless: Compiling function &ldquo;ping-command&rdquo;&hellip;
Serverless: Uploading artifacts&hellip;
Serverless: Artifacts successfully uploaded&hellip;
Serverless: Updating deployment&hellip;
Serverless: Checking deployment update progress&hellip;
&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..
Serverless: Done&hellip;
Service Information
service: ping
project: YOUR-GCP-PROJECT-ID
stage: dev
region: us-central1</p>

<p>Deployed functions
ping-command
  <a href="https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping">https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping</a>
```</p>

<h3>slack の設定</h3>

<p><a href="https://api.slack.com/apps">Slack API： Applications | Slack</a> から <code>Create New App</code> ボタンをクリックしコマンドを作成する。</p>

<p>設定のやり方はこのあたりを参考にしたら良いと思う。: <a href="https://qiita.com/t-mimura/items/d6541ec596bdebea5a7b">Slackのコマンドを作ろう！！ &ndash; Qiita</a></p>

<p>command 作成時の <code>Request URL</code> に作成した Cloud Functions のエンドポイント <a href="https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping">https://us-central1-YOUR-GCP-PROJECT-ID.cloudfunctions.net/ping</a> を指定する。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-config.png" alt="slack command config" /></p>

<p>Slack の設定が終わると、Slack から使えるようになる。</p>

<p><img src="/images/20190406_slack-commands-by-cloud-functions/slack-ping-command.gif" alt="slack command screenshot" /></p>

<p>Functions は初回起動時に少し時間がかかる。
Slack command は 3000 ms (3秒) 以内に応答しないとタイムアウトになってしまう。
タイムアウト時は Slack command を再実行してみたら良い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lita で Slack Bot (on heroku) をつくる]]></title>
    <link href="http://momota.github.io/blog/2015/01/11/lita/"/>
    <updated>2015-01-11T21:36:00+09:00</updated>
    <id>http://momota.github.io/blog/2015/01/11/lita</id>
    <content type="html"><![CDATA[<p><img src="https://www.lita.io/assets/lita-94f070fbb79e8ec62cc7a21ca39f8448.png" alt="lita" /></p>

<p>チャットツール <a href="https://slack.com/">slack</a> に常駐する bot をつくったので、そのときの導入メモ。
bot 開発には <a href="https://www.lita.io/">lita</a> を利用した。lita は Ruby で書かれた chat bot フレームワーク。hubot にインスパイアされて開発されたようだ。
js (coffee script) よりも ruby のほうがとっつきやすかったので採用した。</p>

<p>環境は、ubuntu 14.04, ruby 2.1.5, lita 4.0.4.</p>

<p>ゆくゆくは、<a href="http://www.amazon.co.jp/gp/product/B00H91KK26/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00H91KK26&amp;linkCode=as2&amp;tag=mmtmkt-22">iRKit</a> とか使って家電と連携したりしたい。</p>

<!-- more  -->


<p><img src="/images/20150111_lita/lita.png" alt="network" /></p>

<p>今回の構成図を上記に示す。</p>

<h2>1. 事前準備: もろもろインストールする</h2>

<h3>1.1 lita をインストール</h3>

<p>lita は gem でインストールできる。</p>

<p><code>sh
$ gem install lita
</code></p>

<h3>1.2 redis をインストール</h3>

<p>lita はデータ永続化ストレージとして redis を使うことが前提となっている。
つまり、ローカル環境で lita を実行するには(開発するには)、redis が必要なため、redis をインストールする。</p>

<p><code>sh
$ sudo apt-get update
$ sudo apt-get install redis-server
</code></p>

<p>redis を起動する。</p>

<p>```sh
$ sudo service redis-server start
$ sudo service redis-server status</p>

<h1>=> redis の起動状態確認</h1>

<h1>=> ps aux | grep redis とかで確認してもいい</h1>

<p>```</p>

<h2>2. lita プロジェクト作成、起動</h2>

<p>lita プロジェクト"sample"を作成する。</p>

<p>```sh
$ lita new sample</p>

<h1>=> sample ディレクトリが生成される</h1>

<p>$ cd sample
```</p>

<p>ruby のバージョンを rbenv で指定しておく。</p>

<p><code>sh
$ rbenv local 2.1.5
$ rbenv rehash
$ ruby -v
</code></p>

<p>bundler でインストールする。</p>

<p><code>
$ bundle install --path vendor/bundle
</code></p>

<p><code>lita start</code> で lita をローカル環境で起動してみる。
<code>lita help</code> で返ってくればOK。</p>

<p><code>sh
$ bundle exec lita start
Type "exit" or "quit" to end the session.
Lita &gt; lita info
Lita 4.0.4 - https://www.lita.io/
Redis 2.8.4 - Memory used: 414.04K
Lita &gt; lita help
Lita: help - Lists help information for terms and command the robot will respond to.
Lita: help COMMAND - Lists help information for terms or commands that begin with COMMAND.
Lita: info - Replies with the current version of Lita.
Lita &gt; exit
$
</code></p>

<p><a href="https://www.lita.io/plugins">lita プラグイン</a> もたくさんあるので、適当に <code>Gemfile</code> に追加して <code>bundle install</code> するとよい。</p>

<h2>3. herokuへデプロイして Slack と連携する</h2>

<p>lita bot を heroku へデプロイする。
また、アダプタ <a href="https://github.com/kenjij/lita-slack">lita-slack</a> を利用して Slack と連携する。</p>

<h3>3.1 事前準備</h3>

<p>heroku へのデプロイは、git push して行うので、git でバージョン管理を開始する。</p>

<p><code>sh
$ git init
$ git add .
$ git commit -m "first commit"
</code></p>

<p>heroku で ruby バージョンを指定するには、<code>Gemfile</code>で<code>ruby "VERSION"</code>と記述する。
また、Slack と連携するため、<code>lita-slack</code> アダプタもインストールする。
この時点で、<code>Gemfile</code>は以下の通り。</p>

<p>```ruby
source &ldquo;<a href="https://rubygems.org">https://rubygems.org</a>&rdquo;
ruby &ldquo;2.1.5&rdquo;</p>

<p>gem &ldquo;lita&rdquo;
gem &ldquo;lita-slack&rdquo;
```</p>

<p>bundler でインストールする。</p>

<p><code>sh
$ bundle install --path vendor/bundle
</code></p>

<p>slack とつなげたり、Redis To Go を利用するために、<code>lita_config.rb</code> を以下のように修正する。</p>

<p>```ruby
Lita.configure do |config|
  config.robot.name      = &ldquo;lita&rdquo;
  config.robot.log_level = :info</p>

<p>  # アダプタの指定。Slack とつなげるので、:slack と修正する
  config.robot.adapter   = :slack</p>

<p>  # Slack のAPIキーを指定する
  # 後述する heoku コマンドで heroku の環境変数を設定する
  config.adapters.slack.token = ENV[&ldquo;SLACK_API_KEY&rdquo;]</p>

<p>  # heroku の redis アドオン Redis To Go 関連の設定
  config.redis[:url] = ENV[&ldquo;REDISTOGO_URL&rdquo;]
  config.http.port   = ENV[&ldquo;PORT&rdquo;]
end
```</p>

<p>heroku でのアプリケーション起動には foreman でのアプリケーション起動が必要となる。
以下の <code>Procfile</code> を作成する。</p>

<p><code>ruby
web: bundle exec lita
</code></p>

<h3>3.2 heroku の設定</h3>

<p>新規に heroku アプリケーションを作成する。
ここでは、<code>lita-sample</code> という名前にした。</p>

<p><code>sh
$ heroku apps:create lita-sample
</code></p>

<p>heroku の redis アドオン Redis To Go をアプリケーションへ追加する。
事前に heroku へクレジットカードの登録が必要。</p>

<p><code>sh
$ heroku addons:add redistogo --app lita-sample
</code></p>

<p>heroku の環境変数を設定する。
設定するのは、Slack APIキーのみでOK。
Slack API キーは、<a href="https://YOUR-DOMAIN.slack.com/services/new/lita">https://YOUR-DOMAIN.slack.com/services/new/lita</a> から Integration の設定をしたら入手可能。</p>

<p><code>REDISTOGO_URL</code> などは、アドオン追加時に自動で設定されている。</p>

<p>```sh
$ heroku config:set SLACK_API_KEY=&ldquo;your-slack-api-key&rdquo;
$ heroku config</p>

<h1>=> heroku 上で設定されている環境変数が出力されるので正しく設定されているか確認する</h1>

<p>```</p>

<h3>3.3 heroku へデプロイする</h3>

<p>git commit して git push してあげる。
そうすると heoku アプリケーションが起動する。</p>

<p><code>sh
$ git commit -m "make it better"
$ git push heroku master
</code></p>

<p>Slack に lita さんが見えるはずなので 適当なチャンネルに招待して <code>@lita help</code> とか声をかけると答えてくれる。</p>

<h3>3.4 heroku アプリケーションをたたき起こす</h3>

<p>heroku を無料で使う 1 web dyno (webサーバインスタンス) のときは、1時間アクセスがないとアプリケーションがスリープする。つまり、せっかくデプロイした bot も眠ってしまうため、定期的にhttpアクセスさせてたたき起こしておく。
なお、<code>lita-cron</code> で bot に定期的に投稿させてもだめだったので、heroku アプリケーションへの http アクセスが必要なもよう。</p>

<p>定期的な http アクセスには <a href="http://uptimerobot.com/">Uptime Robot</a> を利用した。</p>

<h2>4. handler 作成</h2>

<p>以下のように handler のひな形を生成する。
<code>lita-</code> というプレフィックスが自動で付与される。</p>

<p>```sh
$ mkdir handlers
$ cd handlers
$ bundle exec lita hello_handler</p>

<h1>=> lita-hello_handler ディレクトリが生成される</h1>

<p>```</p>

<p><code>handlers/lita-hello_handler/lib/lita/handlers/hello_hundler.rb</code> を修正する。
<code>route</code> で正規表現にマッチした場合の処理へルーティングする。</p>

<p>```ruby
module Lita
  module Handlers</p>

<pre><code>class HelloHandler &lt; Handler
  route /^java\s+(.+)/, :with_java, help: { "java TEXT" =&gt; "reply back with java." }

  def with_java( response )
    word = response.matches[0][0]
    response.reply("!!! #{word} とジャバ !!!")
  end
end

Lita.register_handler(HelloHandler)
</code></pre>

<p>  end
end
```</p>

<p><code>Gemfile</code> に以下を追記し、 <code>bundle install</code> する。</p>

<p><code>ruby
gem "lita-hello_handler", path: "handlers/lita-hello_handler"
</code></p>

<p>commit して再度 heroku へ push してデプロイする。</p>

<p><code>sh
$ git commit -a -m "make it better"
$ git push heroku master
</code></p>

<p>slack 上で <code>@lita java あなた</code> とかつぶやくとサイコーにジャバな気分になる。</p>

<p><img src="/images/20150111_lita/slack_lita.png" alt="lita java" /></p>
]]></content>
  </entry>
  
</feed>
