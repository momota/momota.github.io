<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[momota.txt]]></title>
  <link href="http://momota.github.io/atom.xml" rel="self"/>
  <link href="http://momota.github.io/"/>
  <updated>2019-03-27T14:42:42+09:00</updated>
  <id>http://momota.github.io/</id>
  <author>
    <name><![CDATA[momota]]></name>
    <email><![CDATA[makoto.momota@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[参加レポート]Google Cloud Kubernetes Day]]></title>
    <link href="http://momota.github.io/blog/2019/03/27/gc_k8sday/"/>
    <updated>2019-03-27T13:42:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/03/27/gc_k8sday</id>
    <content type="html"><![CDATA[<ul>
<li>2019/03/26(火)、渋谷で行われた <a href="https://cloudplatformonline.com/2019-google-cloud-kubernetes-day-0326.html">Google Cloud Kubernetes Day</a> への参加レポート。</li>
<li>会場の約半数が k8s をすでに利用、サービスメッシュは1割程度という感じで、プロダクション環境での採用をやっていかないとまずいという雰囲気だった。</li>
<li>ハッシュタグ: <a href="https://twitter.com/hashtag/gc_k8sday">#gc_k8sday</a></li>
<li>資料が公開されたらリンクを張ったりアップデートする予定。</li>
</ul>


<!-- more -->


<h1>「Kubernetes/Container による開発」の導入難易度とメリット</h1>

<ul>
<li>株式会社サイバーエージェント　青山 真也 氏</li>
<li><p><a href="https://twitter.com/amsy810">@amsy810</a></p></li>
<li><p>サイバーエージェントとk8s</p>

<ul>
<li>2016年頃からk8sを採用</li>
<li>GKEとオンプレの採用が多い (半々くらい)</li>
<li>新規事業の多くがk8s/Containerを利用している</li>
<li>レガシーシステムからコンテナへの移行も実施中</li>
</ul>
</li>
<li>k8s

<ul>
<li>コンテナオーケストレーションシステムの一つ</li>
<li>Borgベースなので、Googleの経験がk8sに引き継がれている</li>
<li>現在はCNCFが中立的にホスト。コミュニティによって改良されている</li>
</ul>
</li>
<li>オーケストレーションとは

<ul>
<li>プロビジョニングの一つ

<ol>
<li>ブートストラッピング: サーバの準備、OSのインストール

<ul>
<li>Terraform</li>
</ul>
</li>
<li>コンフィグレーション: サーバのセットアップ、ミドルウェアのインストール、セットアップ

<ul>
<li>Chef, Ansible, Puppet, Salt</li>
</ul>
</li>
<li>オーケストレーション: アプリケーションの配置

<ul>
<li>Fabric, Capistrano</li>
</ul>
</li>
</ol>
</li>
<li>イメージ化による高い再現性を保つようになってきた

<ul>
<li>Packer, Cloud Image, OpenStack Heat, CloudFormation</li>
</ul>
</li>
<li>容易なイメージ化、軽量なイメージ、高速な起動と停止。特定クラウドへの依存がない。

<ul>
<li>Docker, k8s</li>
</ul>
</li>
</ul>
</li>
<li>Cloud Nativeとは

<ul>
<li>疎結合なシステム</li>
<li>復元力がある</li>
<li>管理しやすい</li>
<li>可観測である</li>
<li>堅牢な自動化により、頻繁かつ期待通りに最小限の労力で大きな変更が可能</li>
</ul>
</li>
<li>CNCF が Cloud Native の進め方をTRAIL MAPとして定義: <a href="https://github.com/cncf/landscape">cncf/landscape</a></li>
</ul>


<p><img src="http://momota.github.io/images/20190327_gc_k8sday/cncf-trail-map.png" alt="CNCF trail map" /></p>

<h2>Containerization</h2>

<p>レガシーシステムのマイグレーションもスタート地点はここから。実行環境込みのアプリケーションをSystemdに置き換えるイメージ</p>

<ol>
<li>容易なイメージかと再現性 by Docker

<ul>
<li>アプリケーションと実行環境のイメージ化: 再現性の高い環境</li>
<li>ローカル環境でも同等の動作が保証される</li>
</ul>
</li>
<li>軽量なイメージ by Docker

<ul>
<li>VMイメージと比べて軽量</li>
<li>単一プロセスのみを可動させるため、軽量OSの選定もしやすい: Alpine</li>
</ul>
</li>
<li>高速な起動と停止 by Docker

<ul>
<li>VMよりも起動停止が高速: プロセスの起動停止に相当</li>
<li>高速なスケールアウトや障害時の復旧が可能</li>
</ul>
</li>
</ol>


<h2>Orchestration</h2>

<ol>
<li>高い抽象度とクラウド非依存 by k8s

<ul>
<li>Load BalancerやStorageなども抽象化</li>
<li>利用者から見るとクラウド固有の知識がほぼ不要 vs Terraform, OpenStack heat, AWS CloudFormation</li>
<li>ベンダーニュートラルな実行基盤</li>
<li>基本的にはポータビリティがある</li>
</ul>
</li>
<li>宣言的なAPIとCode by k8s

<ul>
<li>構成情報はManifestsで宣言的に記述してAPIに登録: Infrastructure as Code</li>
<li>Control LoopとReconciliation</li>
</ul>
</li>
<li>洗練された自動化 by k8s

<ul>
<li>障害時のセルフヒーリング</li>
<li>アプリケーションのアップグレード</li>
<li>コンテナ単位のヘルスチェック</li>
<li>コンテナ起動前の初期化処理</li>
<li>コンテナ停止時のSIGNAL</li>
<li>コンテナ開始直後、停止直前のフック</li>
</ul>
</li>
<li>豊富なエコシステムと拡張性 by k8s

<ul>
<li><img src="http://momota.github.io/images/20190327_gc_k8sday/cncf-landscape.png" alt="CNCF landscape" /></li>
<li>例) Managed Service via Kubernetes (Cloud SQL)</li>
</ul>
</li>
</ol>


<h2>Cloud Nativeの難しさ</h2>

<ol>
<li>アプリケーションのアーキテクチャ

<ul>
<li>マイクロ/ミニサービスに適した技術</li>
<li>いつでも停止できるようにSIGTERMのハンドリングは必須: ノードのアップグレード、コンテナイメージのアップデート</li>
<li>Service Discovery経由で通信</li>
<li>ネットワークに一部制約がある (Source IPが消失する、など)</li>
</ul>
</li>
<li>セキュリティと分離性

<ul>
<li>仮想化の分離性: gVisorなどを利用する</li>
<li>ネットワークの分離性</li>
</ul>
</li>
<li>k8sの学習コスト

<ul>
<li>学習コストは小さくないものの懸念するほどではない</li>
</ul>
</li>
<li>k8sクラスタの管理

<ul>
<li>GKEを利用することでだいぶ楽できる</li>
</ul>
</li>
</ol>


<h2>マネージドk8sの選定基準</h2>

<ul>
<li>マネージドの範囲</li>
<li>クラスタマネジメントの自動化機能</li>
<li><p>k8sバージョンの追随スピード</p></li>
<li><p>サイバーエージェントでは、アドテク分野やアベマTVなどいろいろなヘビーワークロードにもk8sで実装し、耐えうるシステムを構築</p></li>
<li>ステートフル部分はマネージドサービスを利用する: Cloud SQL、BigQuery、…</li>
</ul>


<h1>コンテナ開発プラットフォームに GKE を選択すべき 7 つの理由</h1>

<ul>
<li>Google Cloud Japan　田中 宏樹氏、岩成 祐樹氏</li>
</ul>


<h2>Security</h2>

<ul>
<li>セキュリティがクラウドの長所に</li>
<li>GCPでは、徹底的な防御がデフォルトでON

<ul>
<li>通信の暗号化</li>
<li>ストレージの暗号化</li>
<li>認証・認可</li>
<li>ハードウェア</li>
</ul>
</li>
<li>コンテナのセキュリティ

<ul>
<li>インフラストレクチャセキュリティ

<ul>
<li>インフラはコンテナを開発するのに安全か</li>
<li>GKE: Use RBAC and IAM</li>
<li>プライベートクラスタと承認済みネットワーク</li>
<li>Cloud Armor: スケーラブルなDDoS対策</li>
<li>BackendConfg</li>
</ul>
</li>
<li>ソフトウェアサプライチェーン

<ul>
<li>作成したコンテナはビルド、デプロイして問題ないか</li>
<li>CI/CDパイプラインは信頼できないデプロイを止めてくれない

<ul>
<li>イメージのメタデータ</li>
<li>Binary Authorization: QAされたコードだけを実行</li>
</ul>
</li>
<li>Container Registry: 脆弱性スキャン</li>
<li>Binary Authorization: 信頼されたコンテナイメージのみをGKE上にデプロイすることを保証するセキュリティコントロール機能</li>
</ul>
</li>
<li>ランタイムセキュリティ

<ul>
<li>作成したコンテナは実行して問題ないか</li>
<li>Container Optimized OS: GCE, GKEで利用可能な軽量なイメージ

<ul>
<li>runcの脆弱性 CVE-2019-5736の影響を受けなかった</li>
</ul>
</li>
<li>3rdパーティツールの利用: aqua. sysdig, stackrock&hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Network</h2>

<ul>
<li>さまざまなGCPサービスとの統合</li>
<li>Google Cloud Load Bakancing</li>
<li>世界中のCloud CDNとLB</li>
<li>Container Native Load Balancing

<ul>
<li>LBからVM(Node)を介さずPodへ直接トラフィックを転送</li>
<li>Double-hop問題を解決</li>
<li>レイテンシーとルーティング問題を解決</li>
</ul>
</li>
</ul>


<h2>Hybrid Cloud</h2>

<ul>
<li>ゴール: コードをどこでも実行できる環境を整える</li>
<li>GKE On-prem

<ul>
<li>オンプレミスのクラスタをGoogle Cloud Consoleから一元的に管理</li>
<li>クラスタ集中管理のメリット: GKEとGKE On-Premで同じツールを使ってクラスタの構築、構成、管理を実施</li>
<li>同一のクラスタ環境</li>
</ul>
</li>
<li>事例

<ul>
<li>メルカリ: オンプレミスからの移行</li>
</ul>
</li>
</ul>


<h2>Observability</h2>

<ul>
<li>ロギング

<ul>
<li>GCP内部の情報に加えて、GCPの外部で発生するログについても収集できる基盤が必要</li>
</ul>
</li>
<li>モニタリング</li>
<li>統合管理プラットフォーム

<ul>
<li>DevOpe/SRE</li>
<li>Developer</li>
<li>SecOps</li>
</ul>
</li>
<li>Stackdriver: アプリケーション開発者と運用担当者にLoggingとMonitoring機能を提供する</li>
<li>Stackdriver Kubernetes Monitoring

<ul>
<li>k8sのワークロードに最適化されたStackdriverのツール</li>
</ul>
</li>
<li>work with Open Source: Prometheus</li>
</ul>


<h2>Contribution</h2>

<ul>
<li>Open source is free like a puppy</li>
<li>GKE is going to ..

<ul>
<li>To be Reliable

<ul>
<li>Regional clusters</li>
<li>Regional Persistent Disks</li>
</ul>
</li>
<li>To be Scalable

<ul>
<li>HPA: 水平スケーリング</li>
<li>VPA: Podの垂直スケーリング</li>
<li>CA: Nodeの水平スケーリング</li>
<li>Node Auto-Provisioning</li>
</ul>
</li>
<li>To be Open

<ul>
<li>OSS Friendly ecosystem

<ul>
<li>Skaffold</li>
<li>Kanico</li>
<li>Knative</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>GKE を用いたレガシー システムからのリプレース事例</h1>

<ul>
<li>富士フイルム株式会社　小林 大助 氏</li>
</ul>


<h2>プロジェクト概要</h2>

<ul>
<li>FUJIFILM Prints &amp; Gifts

<ul>
<li><a href="https://pg-ja.fujifilm.com/photo-print">写真プリント | FUJIFILMプリント＆ギフト | 富士フイルムの公式ストア</a></li>
<li><a href="https://fujifilmmall.jp/walldecor/?_ga=2.101125698.254826136.1553583454-463832683.1553583454">WALL DECOR（ウォールデコ）｜富士フイルム</a></li>
</ul>
</li>
<li>レガシーシステム運用10年超え

<ul>
<li>保守・運用コスト大</li>
<li>機能改善スピード低</li>
</ul>
</li>
<li>ユーザの消費動向の変化

<ul>
<li>モノ消費からコト消費へ</li>
</ul>
</li>
</ul>


<h2>GKE利用までの経緯</h2>

<ul>
<li>S→T→P→D→C→A

<ul>
<li>PDCAに加えて See + Think</li>
<li>富士フィルムではSTを重視</li>
</ul>
</li>
<li>モノリシックなアプリケーションにより影響範囲の見定めが難しい</li>
<li>特に苦労しているのは季節イベント、キャンペーン

<ul>
<li>負荷量の変動に対してシステムが追随しにくい</li>
<li>スケーラビリティを確保しやすい仕組みを最優先にする</li>
<li>コンテナを利用</li>
</ul>
</li>
<li>保守面を意識すれば、オーケストレーションツールは使いたい。課題が2つ

<ul>
<li>何が標準か

<ul>
<li>流行度</li>
<li>[社内の]覇権争い</li>
<li>仕様策定中</li>
</ul>
</li>
<li>自分たちで運用できるか

<ul>
<li>使いこなせないと意味がない</li>
<li>運用環境に耐えうるレベルか</li>
</ul>
</li>
</ul>
</li>
<li>k8sがデファクトスタンダードになった: 規格争いによる技術の陳腐化懸念が後退</li>
<li>主要ベンダがk8sマネージドサービスを展開</li>
<li>2018年1月時点で日本国内GAしているのはGoogeのみ</li>
<li>動作安定性</li>
</ul>


<h2>取り組む上での課題: 組織面</h2>

<ul>
<li>周囲の理解

<ul>
<li>技術的優位性を説明できないといけない</li>
<li>総論は賛成、各論は？</li>
<li>リスクを背負えるか: 納期遵守のPrj</li>
</ul>
</li>
<li>技術学習、解説資料作成、説明行脚</li>
<li>現場レベルでは味方は多かった</li>
<li>リスクに対しては、バックアッププランの準備、技術習得状況の説明、Googleエンジニアのバックアップ</li>
</ul>


<h2>取り組む上での課題: 開発面</h2>

<ul>
<li>技術習得: 独学とハンズオン</li>
<li>事前調査</li>
<li>運用: ログ出力やアラート関連は、メトリクスの書き方が困難だった</li>
<li>設計・設定: マニフェストファイルの書き方、永続データの取扱いに関する適切なサービス選定がむずい</li>
<li>基本設計: サービス分割はアトミックにすると障害復旧が難しいので、意味のある塊に</li>
<li>商用利用に向けての課題: PaaSの特徴や仕様についてGoogleエンジニアのサポートを受けながら選定、確認を進める</li>
<li>レガシーシステムとの連携: 基本は新システム側が全面降伏で対応</li>
</ul>


<h2>効果</h2>

<ul>
<li>スケーラビリティの確保はできた。ただし、今後悪化しないように管理していく必要がある</li>
<li>保守運用コストは改善された

<ul>
<li>ランニングコスト 3/5</li>
<li>導入8ヶ月でサービスダウンタイムなし。安定稼働中。</li>
</ul>
</li>
<li>機能改善スピードは向上できた

<ul>
<li>対応速度が約2倍に</li>
</ul>
</li>
<li>学習コストは小さくなかったが、リターンが大きかった</li>
<li>アプリ開発に集中できる環境を整えることができた</li>
<li>組織の壁は高い、乗り越えるには熱意が必要。仲間がいれば突破しやすい</li>
<li>クラウドベンダエンジニアの協力は偉大</li>
</ul>


<h1>コンテナによる開発と運用の進化</h1>

<ul>
<li><p>Google Cloud Japan　篠原 一徳氏、村上 大河氏</p></li>
<li><p>3つのポイント</p>

<ul>
<li>人 (ビジネス・技術)

<ul>
<li>CxO</li>
<li>Manager</li>
<li>Business</li>
<li>Tech</li>
</ul>
</li>
<li>プロセス

<ul>
<li>DevOps</li>
<li>SRE</li>
<li>Scrum (アジャイル開発)</li>
<li>Waterfall</li>
</ul>
</li>
<li>テクノロジー

<ul>
<li>クラウド</li>
<li>マイクロサービスアーキテクチャ</li>
<li>CI/CD</li>
</ul>
</li>
</ul>
</li>
<li>マイクロサービスとは

<ul>
<li>2014年にJames LewisとMartin Fowlerが提唱</li>
<li>機能ごとに独立したアプリケーションに分割</li>
<li>各サービスは単一の目的を持つ</li>
<li>分散システム、サービス間は疎結合、軽量なAPIなどでやりとり</li>
</ul>
</li>
<li>AsIs to ToBe: Monolith to Microservice

<ul>
<li>新規サービスからやる (新規機能から抜き出す)</li>
<li>既存のサービスを部分的に置き換える

<ul>
<li>Domain (専門領域) を抜き出し、マイクロサービス化する</li>
<li>チームも抜き出していくことが重要</li>
</ul>
</li>
</ul>
</li>
<li>マイクロサービス化を進めていくと、カオス化</li>
<li>The problem

<ul>
<li>分散アーキテクチャへの移行により、今までのアーキテクチャ向けに最適化された方法では監視、管理、保護が困難</li>
</ul>
</li>
<li>4 challenges of Microservices

<ul>
<li>プロセス内のコミュニケーションから、プロセス外コミュニケーションへの置き換え: RPC + APIゲートウェイ</li>
<li>分散システム導入により複雑化するシステムの効率的な管理: サービスメッシュ</li>
<li>マイクロサービス協会が引き起こすデータサイロの解決: データレイク</li>
<li>アプリケーションコード以外のコーディングを少なくする: 自動化 (CI/CD)</li>
</ul>
</li>
<li>課題と2つの実現方法

<ul>
<li>呼び出し先マイクロサービスのトラッキングが困難

<ul>
<li>REST API (HTTP1.1)

<ul>
<li>Open APIでメッセージフォーマットを定義</li>
<li>互換性管理のためのガイドラインの作成を推奨</li>
</ul>
</li>
<li>gRPC (HTTP2.0)

<ul>
<li>Protocol Buffersでメッセージフォーマットを定義</li>
<li>Language Guideに従うと、下位互換性の担保が容易</li>
</ul>
</li>
</ul>
</li>
<li>バージョン管理ガイド

<ul>
<li><a href="https://cloudplatform-jp.googleblog.com/2017/07/versioning-APIs-at-Google.html">Google Cloud Platform Japan 公式ブログ： Google における API のバージョニング</a></li>
<li>Google 内部のAPIバージョニング手法を公開</li>
<li>Cloud Endpointで実現をサポート</li>
</ul>
</li>
<li>API設計ガイド

<ul>
<li><a href="https://cloud.google.com/apis/design/">API 設計ガイド | Cloud API | Google Cloud</a></li>
<li>Google内部のAPI設計のスタンダードを公開</li>
<li>Cloud Endpointで簡単に実現</li>
</ul>
</li>
<li>Cloud Endpointsによるマイクロサービスの実現

<ul>
<li>内部はgRPC、外部はRESTで公開も可能</li>
</ul>
</li>
</ul>
</li>
<li>サービスメッシュ

<ul>
<li>マイクロサービス環境において、サービスディスカバリ、トラフィックコントロール、認証・認可、メトリクス収集などの機能を担うソフトウェア</li>
<li>アプリケーション自体に手を入れるのではなく、サイドカーで実現</li>
<li>Istio: GoogleとIBMが中心に開発しているサービスメッシュ実装のOSS

<ul>
<li>ProxyとしてEnvoyを利用</li>
<li>トラフィックコントロール

<ul>
<li>これまでトラフィックコントロールはインフラストラクチャと結びついていた</li>
<li>トラフィックスプリッティング</li>
</ul>
</li>
<li>セキュリティ

<ul>
<li>サービス間のセキュリティを強化</li>
<li>RBAC</li>
</ul>
</li>
<li>可観測性

<ul>
<li>Istioの監視

<ul>
<li>Mixer: テレメトリの収集</li>
<li>Prometheus</li>
<li>Grafana</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Istio on GCP</li>
</ul>
</li>
<li>データレイク

<ul>
<li>マイクロサービスにより、データのサイロ化が進む</li>
</ul>
</li>
<li>CSM (Managed Istio) の Alphaユーザを募集中: <a href="https://docs.google.com/forms/d/1Qhj4qViWgaSAf9KUfowWRdVS6OHwg9cgEdYX2xbpLeM/viewform?edit_requested=true">https://docs.google.com/forms/d/1Qhj4qViWgaSAf9KUfowWRdVS6OHwg9cgEdYX2xbpLeM/viewform?edit_requested=true</a></li>
</ul>


<h1>事例セッション： FreakOut の広告プロダクトでの GKE 活用事例と GKE 新機能の導入について</h1>

<ul>
<li><p>株式会社フリークアウト　西口 次郎 氏</p></li>
<li><p>RED: Freakout DSP</p></li>
<li>ASE: 位置情報マーケティングプラットフォーム</li>
<li>RED for Publishers: アドネットワーク基盤</li>
<li>LayApp: アプリエンゲージメントプラットフォーム</li>
</ul>


<h2>プロダクション環境でのGKE運用</h2>

<ul>
<li><a href="https://cloudplatform-jp.googleblog.com/2018/09/freakout-kubernetes-engine.html">Google Cloud Platform Japan 公式ブログ： 株式会社フリークアウトの導入事例： フルマネージドな Kubernetes Engine を駆使して、大規模アドプラットフォームをプレミアム メディア向けに提供</a></li>
<li>GKE

<ul>
<li>サービスごとにクラスタを分割</li>
<li>広告配信、UI、バッチ</li>
<li>CronJobを利用</li>
<li>カナリーリリース環境を用意</li>
<li>Stackdriverを活用</li>
</ul>
</li>
<li>Stackdriver

<ul>
<li>Monitoring

<ul>
<li>Prometheusと併用</li>
</ul>
</li>
<li>Logging

<ul>
<li>コンテナのエラーログなどを集約</li>
<li>アラート: Pub/Sub → Cloud Functions → Slack</li>
</ul>
</li>
<li>Profiler

<ul>
<li>常に最新のコーdンのプロファイルを可視化、比較</li>
</ul>
</li>
</ul>
</li>
<li>BigQuery

<ul>
<li>すべてのアクセスログ、アプリケーションログを集約

<ul>
<li>数十億レコード/日</li>
</ul>
</li>
<li>fluentd (Sidecar Container)からStreaming insert</li>
<li>可視化はre:dash</li>
<li>MySQLのマスタデータもインポートしている</li>
</ul>
</li>
<li>Vulnerability scanning

<ul>
<li>GCRの機能</li>
<li>Debian, Ubuntu, Alpineが対象</li>
<li>過去30日間にpullされたイメージが対象</li>
<li>脆弱性が見つかった際、Pub/SubにPublishされる (Cloud FunctionsでSlack通知)</li>
</ul>
</li>
<li>kustomise

<ul>
<li>k8s のYAMLファイルのカスタマイズ</li>
<li>kubectrlのサブコマンドとしてマージされた</li>
<li>Production/Staging/Cannaryなど環境ごとの設定を上書き</li>
</ul>
</li>
<li>Other tools

<ul>
<li>stern

<ul>
<li>複数のコンテナのログをすばやく確認できる</li>
</ul>
</li>
<li>kubectx

<ul>
<li>クラスタ切り替え</li>
<li>複数クラスタ/開発・本番環境の切り替えに</li>
<li>ネームスペースの切り替えも可能</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>GKEでのCI/CD</h2>

<ul>
<li>Github</li>
<li>CircleCI</li>
<li>Cloud Build</li>
<li>Cloud Container Registry</li>
<li>Cloud Pub/Sub: ビルド通知</li>
<li>Cloud Functions: Slack通知</li>
<li>Slack: エンジニア通知</li>
</ul>


<h3>CIのフロー</h3>

<ol>
<li>GithubへのPush</li>
<li>テスト・ビルド

<ul>
<li>CircleCIでのテスト</li>
<li>CloudBuildでのビルド</li>
</ul>
</li>
<li>カナリアリリース</li>
</ol>


<h2>CDのフロー</h2>

<ol>
<li>GithubでPRをマージ</li>
<li>ビルド&amp;デプロイ

<ul>
<li>docker build</li>
<li>docker push</li>
<li>kubectrl set image</li>
</ul>
</li>
<li>notification

<ul>
<li>Pub/SubへのPublish</li>
<li>Cloud FunctionsでSlackツウイ</li>
</ul>
</li>
</ol>


<h2>GKE 新機能の利用</h2>

<ul>
<li>VPC-native cluster (alias IP)</li>
<li>Cloud NAT

<ul>
<li>マネージドNATサービス</li>
<li>アウトバウンドアクセスのゲートウェイ</li>
<li>外部アクセスするIPアドレスを限定する用途で使用

<ul>
<li>IPアドレスの事前登録が必須な外部API</li>
</ul>
</li>
</ul>
</li>
<li>Network Endpoint Groups

<ul>
<li>コンテナネイティブの負荷分散</li>
<li>Instance Groupはiptablesを介してPodへルーティングしていたが、Podへ直接ルーティング可能</li>
<li>ネットワークパフォーマンス改善</li>
</ul>
</li>
<li>BackendConfig Custom resource</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[参加レポート]Developers Summit 2019]]></title>
    <link href="http://momota.github.io/blog/2019/02/15/devsumi/"/>
    <updated>2019-02-15T21:21:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/02/15/devsumi</id>
    <content type="html"><![CDATA[<p><img src="http://momota.github.io/images/20190214_devsumi/devsumi_logo.png" alt="devsumi logo" /></p>

<ul>
<li>2019/02/14(木)～02/15(金)、目黒で行われた<a href="https://event.shoeisha.jp/devsumi/20190214">Developers Summit 2019</a>への参加レポート。</li>
<li>CodeZineさんが発表資料をまとめてくれている > <a href="https://codezine.jp/article/detail/11383">デブサミ2019、講演関連資料まとめ：CodeZine（コードジン）</a></li>
</ul>


<!-- more -->


<h1>2/14(木)</h1>

<h2>イノベーションを支えるアマゾン文化</h2>

<ul>
<li>AWS 西谷 圭介さん</li>
<li><a href="https://twitter.com/Keisuke69">Keisuke Nishitani(@Keisuke69)さん | Twitter</a></li>
</ul>


<h3>The culture of innovation</h3>

<ul>
<li>ジェフ・ベゾス「イノベーションはクリエイティビティを開放する」</li>
<li>Amazon: 地球上で最もお客様を大切にする企業であること

<ul>
<li>お客様の生活を楽にする</li>
</ul>
</li>
</ul>


<h3>Our culture of Innovation</h3>

<ul>
<li>Customer Obsession: お客様への執心

<ul>
<li>Always work BACKWORDS from the customer: 常にお客様を起点に行動する</li>
</ul>
</li>
<li>Long Term Thinking: 顧客重視と長期的視点

<ul>
<li>1997年の株主へのレターで「お客様への徹底的なフォーカス」と「長期的視点での投資を継続」と言及</li>
<li>Amazon Flex: ライドシェアドライバーを集めるシェアリングサービス</li>
</ul>
</li>
<li>If you want to be inventive, you have to be willing to fail

<ul>
<li>Kindle: 初代Kindleは大抵の本より重くださかった</li>
<li>Amazonはさまざまな領域でイノベーションを起こし続けている

<ul>
<li>配送センターのロボット、ドローン</li>
<li>Amazon Go</li>
</ul>
</li>
</ul>
</li>
<li>You have to be willing to be misunderstood for a long time</li>
</ul>


<h3>イノベーションのための組織づくり</h3>

<ul>
<li>メカニズム

<ul>
<li>Working Backwards &ndash; PR and FAQs

<ul>
<li>Press Release

<ul>
<li>主題、副題、サマリ、課題、解決、引用、使い方、ユーザからの声の引用、次のアクション</li>
<li>PRがDecisionを後押しする</li>
<li>内部で何度もレビューして成熟させていく</li>
</ul>
</li>
<li>FAQ

<ul>
<li>具体的なアイデアとデータを提供するFAQの準備</li>
<li>顧客とステークホルダー両方のFAQを含める</li>
<li>聞かれたら嫌なハードな質問を含める</li>
<li>質問を集めるためにもPRは早めにシェアする</li>
</ul>
</li>
<li>User Manual</li>
<li>The 5 Questions

<ol>
<li>顧客は誰か</li>
<li>顧客の機会・課題はなにか</li>
<li>最も顧客の利益に成るものは</li>
<li>どう顧客のニーズやウォンツを知るのか</li>
<li>UX</li>
</ol>
</li>
<li>Visuals

<ul>
<li>ラフアイデア</li>
</ul>
</li>
<li>(参考) 6 pager / 1 pager

<ul>
<li>アマゾンでは会議でのプレゼンテーションツールの利用はほとんどない

<ul>
<li>プレゼンは話し手の話術に依存する</li>
<li>聞き手にとって捉え方が変わってしまう恐れがある</li>
</ul>
</li>
<li>会議は6 pager と呼ばれる形式のレポートで行われ、最初の数分は 6 pager を静かに読むことから始まる</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>アーキテクチャー

<ul>
<li>Self-service Platform without Gatekeeper を重視</li>
<li>2001年頃、アプリは巨大なモノリスだった。2001-2009からDvelopment transformation</li>
<li>マイクロサービス化

<ul>
<li>単一目的のサービス</li>
<li>お互いブラックボックス</li>
</ul>
</li>
</ul>
</li>
<li>カルチャー

<ul>
<li>社員一人ひとりがリーダーであり、そう振る舞うことが求められる</li>
<li>Our Leadership Principles: <a href="https://www.amazon.jobs/principles">https://www.amazon.jobs/principles</a>

<ul>
<li>Customer Obsession

<ul>
<li>すべてお客様から</li>
</ul>
</li>
<li>Ownership

<ul>
<li>長期的な視野</li>
<li>DevOps: 開発・テスト・運用

<ul>
<li>テスト重視: Automate Everything! (テスト自動化、CI)</li>
<li>運用重視: Automate Everything!</li>
</ul>
</li>
</ul>
</li>
<li>Dive Deep / Learn and Be Curious

<ul>
<li>Root cause analysis</li>
<li>運用: 5whys</li>
<li>Brownbag session</li>
</ul>
</li>
<li>Frugality

<ul>
<li>倹約</li>
<li>お客様にとって重要でないことにはお金を使わない</li>
<li>発明を育てる源</li>
<li>Door Desk: 社員のワークデスクはドア用の板に木の足を付けた簡素なものを利用 (創業時)</li>
</ul>
</li>
<li>Think Big

<ul>
<li>お客様に貢献するために従来と異なる新たな視点を持つ</li>
</ul>
</li>
<li>Bias for Action

<ul>
<li>スピード</li>
<li>やり直しのきくことも多い</li>
<li>過剰な分析をやめる</li>
</ul>
</li>
<li>Hire and Develop the Best

<ul>
<li>高いバー</li>
<li>カルチャーフィット (LP)</li>
<li>メンタリング</li>
<li>ピアフィードバック</li>
</ul>
</li>
<li>Have Backbone; Disagree and Commit

<ul>
<li>経緯を持って異議</li>
<li>安易に妥協しない</li>
<li>決定には全面的コミット</li>
</ul>
</li>
<li>Deliver Result

<ul>
<li>結果を出す</li>
<li>あきらめない</li>
</ul>
</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>組織

<ul>
<li>2-Pizza Teams

<ul>
<li>チームを小さく</li>
<li>作るものに対するすべてを負う

<ul>
<li>プロダクト計画の策定</li>
<li>開発</li>
<li>運用/カスタマーサポート</li>
</ul>
</li>
<li>大きな組織の一部</li>
</ul>
</li>
<li>You build it, you run it. in 2006</li>
<li>QAはだれが？オンコールはだれが？ → Two-Pizza team</li>
<li>すべてはサービスチームに存在し、自身の役割に集中する</li>
<li>高い水準を維持する

<ul>
<li>チームには権限が与えられ、多くの自由が認められている</li>
<li>オンボーディング/トレーニング</li>
</ul>
</li>
<li>イテレーション</li>
<li>Minimum Viable Product</li>
<li>Everyday is still Day One

<ul>
<li>毎日が最初の一日 (一歩)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>GitHub Actionsはどのような未来を描くのか : コンテナ技術が開くワークフローのOSS化</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="0c63161e473e435ea921b37af23488f6" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Takafumi Ikedaさん</li>
<li><a href="https://twitter.com/ikeike443">Takafumi Ikeda(@ikeike443)さん | Twitter</a></li>
<li><p>発表資料: <a href="https://speakerdeck.com/ikeike443/github-actionshadofalseyounawei-lai-womiao-kufalseka">GitHub Actionsはどのような未来を描くのか &ndash; Speaker Deck</a></p></li>
<li><p>2008年にGithub社創業</p></li>
<li>Pull Requestの登場。OSSから始まり大きなムーブメントとなった</li>
<li>ソフトウェア開発にはさまざまな障壁がある</li>
<li>便利なツール・ライブラリ・テクノロジー・ベンダがたくさんあふれている
<img src="https://landscape.cncf.io/images/landscape.png" alt="Interactive landscape at cncf.io" /></li>
<li>Github Actionsでソフトウェア開発に関する課題を解決したい

<ul>
<li>ワークフローはモジュラー化されるべき → Github Actionsの誕生</li>
<li>コンテナをActionと呼ぶ

<ul>
<li>Actionの実態はDockerfile</li>
</ul>
</li>
<li>ワークフローはHashicorp のHCLで記述可能。ビジュアルエディタもある。

<ul>
<li>26のイベントに対応

<ul>
<li>Repository Dispatch: 外から任意にトリガーできるイベント。長いジョブなどを外部で実行、OKならこのイベントを発火、などの使い方が可能</li>
<li>gollum (wiki)</li>
<li>Vulnerability</li>
<li>Project関連</li>
<li>Issue / Label / Milestone 関連</li>
<li>その他</li>
</ul>
</li>
</ul>
</li>
<li>まとめ

<ul>
<li>コンテナ技術ベース</li>
<li>ワークフロー as Code</li>
<li>ワークフローのモジュラー化、再利用</li>
<li>Pull Requestに続く進化の触媒</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>現状の仕様、制限など</h3>

<ul>
<li>詳細はヘルプドキュメント参照</li>
<li>ワークフローの実行時間はMAX 58分</li>
<li>ワークフロー1つに付きアクションは100個まで呼び出し可能</li>
<li>1ファイル内に複数ワークフローを定義可能だが、並列実行されるのは1リポあたり2つまで</li>
<li>アクションは他のワークフローをトリガーできない</li>
<li>APIコールは1リポジトリあたりトータルで1000回/時間まで</li>
<li>プロダクションのSecretを格納したないこと (ベータ中はログにそのまま出ます)</li>
<li>ActionはDockerfileなのでDockerでできることはたいていできるが、制限あり</li>
<li>Action実行環境について

<ul>
<li>1vCPU、3.75GB RAM</li>
</ul>
</li>
</ul>


<h3>デモ</h3>

<ul>
<li><a href="https://github.com/actions/example-aws">actions/example-aws： Example Workflow to deploy a static website to an existing Amazon EKS cluster</a></li>
</ul>


<h3>便利なActions</h3>

<ul>
<li>各種クラウドActions

<ul>
<li>GCP, AWS, Azure, Herokuに対応。</li>
</ul>
</li>
<li><a href="https://github.com/actions/bin">https://github.com/actions/bin</a> 以下に基本的なものを提供

<ul>
<li>bats</li>
<li>curl</li>
<li>debug</li>
<li>filter</li>
<li>sh</li>
<li>shellcheck</li>
</ul>
</li>
<li>HTTP client: HTTPiesラッパー。Marketplace で入手可能。</li>
<li>Add an issue reference: ブランチ名からIssueを探し出してクロスリンク</li>
<li>All in one project: Issue / PR を常に Project へ追加</li>
<li>Delete Merged branch: マージ済みブランチ削除。Probot app / Actions どちらでも利用可能</li>
</ul>


<h3>リソース</h3>

<ul>
<li><a href="https://github.com/actions">https://github.com/actions</a></li>
<li>github marketplace</li>
<li><a href="https://github.com/sdras/awsome-actions">https://github.com/sdras/awsome-actions</a></li>
<li>community forum</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="https://github.blog/jp/2018-10-24-action-demos/">GitHub Actions： みなさんが開発し、GitHubで実行 &ndash; The GitHub Blog &ndash; Japan</a></li>
</ul>


<h2>GCPに恋してHashiCorpを愛して起業したエンジニアのお話</h2>

<ul>
<li>長谷川 祐介さん</li>
</ul>


<h3>HahiCorp Stack</h3>

<ul>
<li>HashiCorp Suite

<ul>
<li>Nomad</li>
<li>Vault、…</li>
</ul>
</li>
<li>Terraform: あらゆるパブリッククラウドやクラウドサービスのプロビジョニングをCode化

<ul>
<li>Enterprise版: TF構成ファイルのロールバックとバージョンコントロール、監査ログ、CIとの統合、チームマネジメント、TF Versionの管理簡易化、SentinelによるPolicy検証</li>
<li>Firewall</li>
<li>DNS</li>
<li>Load Balancer</li>
<li>いわゆる依存関係についてBackupと再現性も含め非常に便利</li>
</ul>
</li>
<li>Vault

<ul>
<li>Secure Secret Storage</li>
<li>Dynamic Secret</li>
<li>Data Encryption</li>
<li>Lease &amp; Renewal</li>
<li>Revocation</li>
<li>Enterprise版: Read Replica, Performance</li>
<li>Grasysでの活用方法

<ul>
<li>GCPとAWSのLinuxUserのSSH Keyの共有と管理</li>
</ul>
</li>
</ul>
</li>
<li>Consul

<ul>
<li>Service Discovery</li>
<li>Health Check</li>
<li>KVS</li>
<li>Configration consul-template連携</li>
<li>オーケストレーション</li>
<li>Grasysでの活用方法

<ul>
<li>システムセントラルとして利用</li>
</ul>
</li>
</ul>
</li>
<li>Nomad

<ul>
<li>スケジューラ: K8sの薄いやつ</li>
<li>Grasysでは利用していない</li>
</ul>
</li>
</ul>


<h3>システムに対する考え方</h3>

<ul>
<li>運用設計重視</li>
<li>継続的改善</li>
</ul>


<p>上記の考え方なので、以下も大事</p>

<ul>
<li>運用コスト削減</li>
<li>更新の容易さ</li>
<li>障害復旧性</li>
<li>安定性向上</li>
</ul>


<h3>Grasys Stack</h3>

<ul>
<li>beatsを多用</li>
</ul>


<h3>GCPのススメ</h3>

<ul>
<li>Global Launchが多い</li>
<li>更にNetwork要件が厳しいものが多い</li>
<li>世界中の場所を含めた通信事業者の品質</li>
<li>全部ひっくるめて管理することは不可能</li>
<li>これらをすべてGoogleにおまかせ</li>
</ul>


<h3>起業について、大事なこと</h3>

<ul>
<li>何を守り、何を捨てるかを決め、よく考え、よく相談する</li>
<li>変化に対応する</li>
<li>金は道具、使い方を考える</li>
<li>自分のやりたいことを持ち続け、あきらめない</li>
<li>一人の時間は大切、いつでもいける自分が心地よい場所を作っておく</li>
<li>ときどき振り返り、確認をする</li>
<li>迷ったときの嫁の言葉は強烈! 嫁は旦那の直感をよく知っている</li>
<li>欲は大切!</li>
<li>褒められたときは全力で喜べ!</li>
<li><strong>恵比寿でIT社長やってももてない</strong></li>
</ul>


<h2>Cloud Native時代における Docker / Kubernetes による開発</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="8a5f6ba5eb1b4506bc0dead39fab0766" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>青山 真也さん</li>
<li><a href="https://twitter.com/amsy810">MasayaAoyama（青山 真也）(@amsy810)さん | Twitter</a></li>
<li><p>発表資料: <a href="https://speakerdeck.com/masayaaoyama/devsumi2019-amsy810-k8s">Cloud Native時代における Docker / Kubernetes による開発 developers Summit 2019 at 02/14 / devsumi2019_amsy810_k8s &ndash; Speaker Deck</a></p></li>
<li><p>Cloud Native</p>

<ul>
<li>疎結合なシステム</li>
<li>復元力がある</li>
<li>管理しやすい</li>
<li>可観測である</li>
<li>堅牢な自動化により、頻繁かつ期待通りに最小限の労力で大きな変更が可能</li>
</ul>
</li>
<li><p>Cloud Native Ecosystem</p>

<ul>
<li>k8sを中心としたOSS</li>
</ul>
</li>
<li><p>Cloud Nativeに適したアーキテクチャ? 大規模な開発に適したアーキテクチャ?</p>

<ul>
<li>マイクロサービスアーキテクチャ

<ul>
<li>マイクロサービスごとに技術選定可能</li>
<li>大規模な開発を加速させる</li>
<li>デプロイが容易</li>
<li>スケーリングが容易</li>
<li>障害が全体に波及しづらい</li>
</ul>
</li>
<li>500+ microservices: 大規模なシステムのマイクロサービス間を可視化するとデス・スターのようになる。個別マイクロサービスの管理がつらくなっていく。</li>
<li>サービスメッシュアーキテクチャ

<ul>
<li>従来アプリケーション側で制御していた機能を分離、開発者はアプリケーションロジックに集中可能</li>
<li>プロキシを必ず通るので、マイクロサービス間のモニタリングが可能</li>
<li>他にも以下のようなことが実現可能

<ul>
<li>Traffic Shifting (ex: Canary release)</li>
<li>Circuit Break</li>
<li>Fault Injection</li>
<li>Rate Limit</li>
<li>Retry</li>
<li>mTLS</li>
</ul>
</li>
</ul>
</li>
<li>Container

<ul>
<li>System ContainerとApplication Containerがある。DockerはApplication Container。</li>
<li>コンテナで起動するプロセスは1つにする</li>
<li>一時的なコンテナを作成するようにする (Immutable Insfrastructure)</li>
<li>VMに比べて

<ul>
<li>イメージ化が容易</li>
<li>起動が拘束</li>
<li>オーバヘッドが少ない</li>
<li>機能ごとに分離 (1機能 = 1プロセス)</li>
</ul>
</li>
</ul>
</li>
<li>複数のコンテナの管理をどうするか: Container Orchestration Engine: k8s

<ul>
<li>複数のDockerホストの管理</li>
<li>コンテナのスケジューリング</li>
<li>スケーリング/オートスケーリング</li>
<li>ローリングアップデート</li>
<li>コンテナの死活監視</li>
<li>障害時のセルフヒーリング</li>
<li>サービスディスカバリ</li>
<li>ロードバランシング</li>
<li>データや機密情報の管理</li>
</ul>
</li>
<li>CNCFとStandardization: k8sは完成度が高かったのと中立だったので流行った</li>
<li>Kubernetesがもたらすもの

<ul>
<li>Declarative Code and APIs

<ul>
<li>すべてYAMLで宣言的に記述してAPIに登録: Infrastructure as Code</li>
</ul>
</li>
<li>Self Healing

<ul>
<li>ReplicaSetとSelf-Healing

<ul>
<li>ReplicaSetではコンテナのReplica数を維持し続ける</li>
</ul>
</li>
</ul>
</li>
<li>Automation &amp; Immutable Infrastructure

<ul>
<li>ReplicaSetとRolling Update (Automation)

<ul>
<li>ロードバランサからの除外</li>
<li>コンテナイメージのアップデート</li>
<li>ロードバランサへの追加</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>k8sはフレームワークと分散システム

<ul>
<li>分散システムとしてのk8s

<ul>
<li>Control Loop

<ul>
<li>現在の状態を観測</li>
<li>現在の状態と理想状態を比較</li>
<li>差分に対処する処理を実施</li>
</ul>
</li>
</ul>
</li>
<li>Custom Resource Definition

<ul>
<li>AWS/GCP/Acureのマネージドサービスインスタンスの作成が可能</li>
<li>k8s上にNatsクラスタのQueueクラスタを展開可能</li>
<li>Controllerは、KubebuilderやOperator Frameworkなどにより比較的容易に作成可能</li>
</ul>
</li>
<li>拡張: Knative, Kubeflow, Operator Framework</li>
</ul>
</li>
<li>CI/CD

<ul>
<li>GitOps

<ul>
<li>MasterやStagingなどのブランチごとに、コンテナレジストリとマニフェストレポジトリを用意</li>
<li>PRによる差分チェックが可能</li>
</ul>
</li>
</ul>
</li>
<li>イギリスの銀行 Monzo Bankでk8s + Linkerdを採用</li>
</ul>
</li>
</ul>


<h2>APIを活用したフォントの使い方 ～MR（Mixed Reality）の実例紹介</h2>

<script async class="speakerdeck-embed" data-id="60fa5751802b4ae18fbe52ab343778ea" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>相川 晴俊さん</li>
<li>堀尾 風仁さん</li>
</ul>


<h3>フォント紹介</h3>

<ul>
<li>UD Font

<ul>
<li>文字のかたちがわかりやすいことにこだわったフォント</li>
</ul>
</li>
<li>フォントのデザインは、手書きから始まる。65.2mmの方眼紙に1文字ずつ書いて、500文字くらい作る。一日20文字くらい。新人フォントデザイナーはこれから始めて3年くらい続ける。営業含め、入社時研修でやらされる。</li>
<li>「永」という文字をまず作る。「永」には書に必要な技法8種がすべて含まれているから。</li>
</ul>


<h3>フォント製品</h3>

<ul>
<li>MORISAWA PASSPORT

<ul>
<li>書籍、漫画、映画テロップ</li>
<li>組込み用フォントライセンス

<ul>
<li>スマホ: AQUOS zero: 新ゴ</li>
<li>ゲーム: Shadowverse: 解ミン月</li>
</ul>
</li>
</ul>
</li>
<li>Typesquare

<ul>
<li>サブセット配信: JavaScriptとフォントをTypesquareから配信

<ul>
<li>必要な分だけ配信することでネットワークやサーバ負荷の軽減</li>
</ul>
</li>
<li>Galaxy Mobile Japan公式サイトで採用</li>
<li>サムスン電子ジャパン</li>
<li>必要なフォントを必要な文字だけAPIから取得する: パフォーマンス重視</li>
</ul>
</li>
<li>Webサイト以外でも使えないの？ (アプリ、ゲームなど)という欲がMRにつながっていく</li>
</ul>


<h3>MR</h3>

<ul>
<li>Kobe Digital Labo</li>
</ul>


<h4>なぜ今、Font×MRに取り組んでいるか</h4>

<ul>
<li>ポスト・スマホを考える

<ul>
<li>紙 → PC → Mobile → ？</li>
<li>デジタルがディスプレイが解き放たれる未来</li>
<li>Mixed Reality</li>
</ul>
</li>
<li>注目のMRデバイスはHololens</li>
<li>文字が圧倒的に見づらい

<ul>
<li>透過型ディスプレイなのでアプリケーション起動場所によって背景が変わる</li>
<li>視野角が狭い</li>
</ul>
</li>
<li>共同研究テーマ

<ul>
<li>フォントの視認性とデザイン性</li>
<li>フォントの変化によって生じるUXの違い</li>
</ul>
</li>
</ul>


<h4>事例</h4>

<ul>
<li>営業シーン: 購買体験

<ul>
<li>Display Assistant: 商品の説明をホログラム表示</li>
<li>自転車を買いに行って、店員に説明されても、説明のパーツと実物がつながらない。パンフレットを渡されてもたいてい読まない</li>
<li>MRで現物の自転車に商品説明ホログラムをマッピング</li>
</ul>
</li>
<li><p>広告デザイン業務: デザインツール</p>

<ul>
<li>Creative Design X: 看板広告デザインの支援ツール

<ul>
<li>広告パターンの切替</li>
<li>フォントの切替</li>
<li>現地の雰囲気を感じながら、広告の検証が可能</li>
<li>複数のHololensで視野共有: クライアントとデザイナーで同じ看板を見ながら議論が可能</li>
</ul>
</li>
</ul>
</li>
<li><p>どのフォントが見やすいかユーザ調査(3種)。一般的にはスマートグラスで明朝体は字が潰れるので避けられる。</p>

<ul>
<li>見やすさ

<ol>
<li>UD新ゴ (60%)</li>
<li>黎ミン (25%)</li>
<li>メイリオ (15%)</li>
</ol>
</li>
<li>どのフォントが好きか

<ol>
<li>UD新ゴ (50%)</li>
<li>黎ミン (30%)</li>
<li>メイリオ (20%)</li>
</ol>
</li>
<li>黎ミンは、ボールドにしたとき、横線も太くなる。(普通は横線は太くならない)</li>
<li>メイリオはゴシック体なのに見やすさ、好感度が低い</li>
</ul>
</li>
<li><p>ブランディングはフォントで決まる</p></li>
</ul>


<h4>MR開発</h4>

<ul>
<li>Illustratorなどから画像出力 (書体データも)</li>
<li>画像を組み込み、Unity上で開発</li>
<li>UWP出力し、Visual Studioでビルド</li>
<li><p>Hololensへインストール</p></li>
<li><p>毎回illustratorを起動し、修正も大変だった→TypeSquare APIの利用</p></li>
</ul>


<h4>MR開発</h4>

<ul>
<li>フォントにこだわると顧客の反応もよい</li>
<li>顧客満足度向上→案件化率UP</li>
<li>エンジニアこそフォントにこだわれ</li>
</ul>


<h2>ヤフー株式会社におけるフロントエンドの取り組み</h2>

<iframe src="http://momota.github.io//www.slideshare.net/slideshow/embed_code/key/gm44OplSwyg9IZ" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://momota.github.io//www.slideshare.net/techblogyahoo/devsumi2019-14b6-devsumib-131748750" title="ヤフー株式会社におけるフロントエンドの取り組み #devsumi #devsumiB" target="_blank">ヤフー株式会社におけるフロントエンドの取り組み #devsumi #devsumiB</a> </strong> from <strong><a href="https://www.slideshare.net/techblogyahoo" target="_blank">Yahoo!デベロッパーネットワーク</a></strong> </div></p>

<ul>
<li>向井 咲人さん</li>
<li>森本 恭平さん</li>
<li><p>平山 涼也さん</p></li>
<li><p>発表資料: <a href="https://www.slideshare.net/techblogyahoo/devsumi2019-14b6-devsumib-131748750">ヤフー株式会社におけるフロントエンドの取り組み #devsumi #devsumiB</a></p></li>
<li>参考資料: <a href="https://techblog.yahoo.co.jp/advent-calendar-2018/yahoo-frontend/">ヤフー株式会社におけるWebフロントエンドの技術選定 &ndash; Yahoo! JAPAN Tech Blog</a></li>
</ul>


<h3>メディアカンパニー</h3>

<ul>
<li>広告入稿管理のフロントエンド。</li>
<li>Yahoo!ディスプレイアドネットワーク、スポンサードサーチ、Twitter広告を担当</li>
<li>jQuery+PHPからReact + Redux + TypeScript + Node.jsのモダンなフロントエンドへ刷新中

<ul>
<li>その他、Redux-Form, Sass, Webpackなど</li>
</ul>
</li>
<li>大規模開発の課題

<ul>
<li>刷新を進めながらも、ビジネス要件の機能開発を進めなければならない</li>
<li>並行して3～4個の機能開発が進む</li>
<li>コードレビューの時間が爆増</li>
<li>どんどん増えていく開発メンバー</li>
<li>コードの足並みが揃わない</li>
</ul>
</li>
<li>課題への立ち向かい方

<ul>
<li>規約の導入

<ul>
<li>LintやPrittierを導入し、コーディング規約を設けた</li>
<li>上記でカバーできない部分のコーディングガイドをGitBookで作成

<ul>
<li>規約追加時にはPRレビューを出すことで全員に見てもらえる</li>
</ul>
</li>
<li>Dangerの導入: PRを出すときに行うことを自動化

<ul>
<li>レビューメンバーの自動アサインやラベル紐づけなど</li>
</ul>
</li>
<li>TypeScriptの導入

<ul>
<li>静的型付けによりｍコンパイル時にエラーが出る</li>
<li>機能修正時に漏れがなく、バグを事前に防げている</li>
</ul>
</li>
</ul>
</li>
<li>Atomic Designの導入

<ul>
<li>コンポーネントの粒度を揃える</li>
<li>Atoms, Molecules, Organismsという共通言語を作る</li>
<li>レビューの際に指摘をしやすいように</li>
</ul>
</li>
<li>コンポーネントガイドの導入

<ul>
<li>コンポーネントの見える化: Storybook、docz</li>
<li>新規メンバーの再開発を防ぐ</li>
<li>コンポーネント有無の確認による既存メンバー、新規メンバーのコミュニケーションコスト削減</li>
</ul>
</li>
<li>Redux層の分割

<ul>
<li>ファイル構成にre-ducksを採用</li>
<li>Reduxのデータ層にDomain層、UI層を設ける (App層も追加予定)</li>
</ul>
</li>
<li>日々素振りを続けて課題に挑む

<ul>
<li>この先、まだ未知な課題も出てくる。</li>
<li>日々の素振りを続けて、課題に挑める状況を作り出す。</li>
<li>チーム勉強会などのインプット・アウトプットの習慣づけ</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>コマースカンパニー</h3>

<ul>
<li>YahooショッピングではABテストを回しまくっている</li>
<li>企画 (1週間)→制作(1週間) → 開発 (2週間)</li>
<li>上記サイクルの並列度が高い。つらい。</li>
<li>工数削減したい</li>
<li>UIをアップデートしやすくしたい</li>
<li>UIパーツ集を社内限定でnpmパッケージを公開</li>
<li>完成したらどんな未来が待っているか

<ul>
<li>デザイナーが内政したUIパーツ集を使える</li>
<li>エンジニアも気軽にABテストのデザインが作れる</li>
<li>簡単なデザインならモックすらいらない</li>
<li>デザイナーは「デザインリサーチ」に時間をかけられる</li>
<li>いい結果のデザインをパッケージに反映できる</li>
<li>数字によって証明された室の高いデザインで全出面を統一できる</li>
<li>作り途中なのでどこまで効果があるかは不明…</li>
</ul>
</li>
</ul>


<h3>Webフロント技術室</h3>

<ul>
<li>サービス区切りの組織→縦の組織</li>
<li>その縦の組織に特化したほうが成長も早いし、効率も良い</li>
<li>ただし、個別最適化されてしまう

<ul>
<li>リソースがないところは、モダン化されない可能性</li>
<li>人材流動ができなくなる</li>
<li>エースが転職してナレッジが会社に残らない</li>
<li>ヤフーのWebフロントエンドが見えなくなる</li>
</ul>
</li>
<li><p>ある程度全社的な判断や横断的な視点の組織が必要となる</p></li>
<li><p>どういうメンバーで挑むか</p>

<ul>
<li>デザイナーとエンジニアの混合チーム</li>
<li>コマースチームとメディアチームの混合</li>
</ul>
</li>
<li>CTO直轄の組織なのでCTOとの距離が近い</li>
</ul>


<h4>半年間なにをやったか</h4>

<ul>
<li>よく使われているライブラリの効率化</li>
<li>統一したパフォーマンスの計測方法の検討</li>
<li>ヤフーのWebフロントエンドの健康状態の把握

<ul>
<li>全サービスにFE環境を手入力してもらって情報収集</li>
<li>統一感がないことを状況把握できた</li>
</ul>
</li>
<li>適切な技術選定とその技術の浸透

<ul>
<li>全社視点での技術選定</li>
<li>なぜフレームワークではないか

<ul>
<li>JSｈあエンジニア・デザイナー両方書く</li>
<li>React+Reduxなどを実装できない可能性がある</li>
<li>リソースもまちまちなのに、突発的なリニューアルを余儀なくされる可能性がある</li>
<li>リリースがある場合など、ビジネスを止めることに成る</li>
<li>現状バラバラすぎる</li>
<li>フレームワークの統一は現実的ではなかった</li>
</ul>
</li>
<li>スタイルを選ばなかった理由

<ul>
<li>CSS in JS系はチームによっては効率が悪い場合がある</li>
<li>エンジニア+デザイナー混合のため</li>
<li>Webpack周りの設定など苦しみを生むくらいならPostCSSである必要もない</li>
<li>Gulp+Sassはアクではない</li>
</ul>
</li>
<li>影響を抑えられ、全社にメリットのある技術: TypeScript

<ul>
<li>MS製。2017年からGoogleの標準に。</li>
<li>特徴

<ul>
<li>静的型付け

<ul>
<li>大きなバグを防げる</li>
<li>IDEとの連携によるリアルタイムチェック</li>
</ul>
</li>
<li>JSとの互換性

<ul>
<li>JSｔお互換性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>TypeScript布教にあたっての課題

<ul>
<li>スキルの差の問題</li>
<li>始める苦しみをいかにして取り除くか</li>
<li>ドキュメントの整備</li>
<li>サポート体制の構築</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>【第2部ハンズオン】GCPをさわりまくれ！スペシャリストに聞きまくれ！大QWIKLABS大会</h2>

<p><img src="http://momota.github.io/images/20190214_devsumi/gcp_cookies.jpg" alt="GCP cookies" /></p>

<ul>
<li>無料のQiklabsクレジットが配られて、GCPクエストを自習</li>
<li>電源あり、wifiあり環境。お菓子がいっぱい出た。</li>
<li>GCPのソリューションアーキテクトっぽい人がいっぱいいて、質問し放題だった。(が、するようなつまづき方はしなかった)</li>
</ul>


<h1>2/15(金)</h1>

<h2>ドラゴンクエストXを支える失敗事例</h2>

<iframe src="http://momota.github.io//www.slideshare.net/slideshow/embed_code/key/gghca2nxC2xUeS" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://momota.github.io//www.slideshare.net/devsumi/15a1x" title="【15-A-1】ドラゴンクエストXを支える失敗事例" target="_blank">【15-A-1】ドラゴンクエストXを支える失敗事例</a> </strong> from <strong><a href="https://www.slideshare.net/devsumi" target="_blank">Developers Summit</a></strong> </div></p>

<ul>
<li>青山 公士さん

<ul>
<li>ドラゴンクエストXを支える技術の著者</li>
<li>ドラゴンクエストXオンラインプロデューサ (責任者)</li>
<li>キングボンビーの生みの親というか、プログラマー

<ul>
<li>あくまで生みの親はさくまあきらさん</li>
</ul>
</li>
</ul>
</li>
<li>オンラインサービス (オンラインゲーム) はリリース後の運用・運営が本番

<ul>
<li>リリースは完了ではない。オフラインゲームはリリースで完了、手を加えられないのであきらめも付く。</li>
<li>お客様からのフィードバックが対応の始まり</li>
<li>良い設計・実装: 要望への対応が柔軟、不具合が出づらい、不具合が出ても修正しやすい</li>
<li>重要なのは運営・運用経験</li>
<li>他者の事例を共有することは重要</li>
</ul>
</li>
</ul>


<h3>ドラクエXとは</h3>

<ul>
<li>オンラインゲーム</li>
<li>6年半くらい経つ</li>
<li>MMORPG: 大規模多人数参加型オンラインゲーム</li>
<li>構成

<ul>
<li>クライアント: 見た目上の本体

<ul>
<li>バリデーションロジックくらいを置く</li>
</ul>
</li>
<li>ゲームサーバ: 真の本体

<ul>
<li>ゲームロジックは勝手にいじられないように、サーバ上で処理</li>
</ul>
</li>
<li>ゲームDB: 世界のデータ</li>
</ul>
</li>
</ul>


<h3>開発ポリシー</h3>

<ul>
<li><p>開発初期から運営・運用が重要という想定</p>

<ul>
<li>運営: 仕掛け(攻め) → 柔軟性が重要

<ul>
<li>機能拡張、期間限定イベント</li>
</ul>
</li>
<li>運用: 保守 (守り) → 継続性が重要

<ul>
<li>不具合修正・障害対応</li>
</ul>
</li>
</ul>
</li>
<li><p>例えば、ロジックは一箇所に集約すべし、など</p></li>
</ul>


<h3>失敗事例 (3つ)</h3>

<h4>キラージャグリングの音が鳴り続ける</h4>

<ul>
<li>不具合の内容

<ul>
<li>ある更新から突然演出完了後も効果音が止まらずになり続ける</li>
</ul>
</li>
<li>原因と対応

<ul>
<li>エフェクトは視覚効果を演出する</li>
<li>ドラクエでは表示形状、速度、加速度など、各種パラメータが設定されたデータドリブンで開発</li>
<li>アクション音やヒット音はデザイナー作成のデータで指定されたタイミングでC++が実行される</li>
<li>アクション効果音の停止処理のあとに、ヒット音を鳴らす処理</li>
<li>ヒット時とミス時の前段で停止処理がある</li>
<li>ミス時に効果音を停止する改修を実施したら不具合が発生</li>
<li>ミス時の効果音停止をC++で無効化したのが原因</li>
<li>他にも同様の問題があるかも: ミス時は個別対応でFIX</li>
</ul>
</li>
<li>得られた教訓

<ul>
<li>システム改修はBTSチケット(Redmine)に影響範囲を明記し、全影響範囲を再検証すべし</li>
<li>影響範囲は極力せまくすべし</li>
</ul>
</li>
</ul>


<h4>邪神の宮殿にてパーティが組めない</h4>

<ul>
<li>不具合の内容

<ul>
<li>同盟: オートマッチング</li>
<li>6/10(土) 6:00の更新以降、参加希望者が多数いてもマッチングが成立しない場合がある</li>
<li>マッチングに参加できる条件が設定されている</li>
</ul>
</li>
<li>原因と対応

<ul>
<li>条件はプランナー作成のデータで設定される

<ul>
<li>問題になりそうなデータはなかった</li>
</ul>
</li>
<li>暫定べた書きしたものを本格対応の更新し忘れ、1年後に発火してしまった</li>
<li>プログラム (雰囲気こんな感じ)</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (6/10(土) 6:00以降 && ある獄) {
</span><span class='line'>  マッチング処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>得られた教訓

<ul>
<li>暫定対応は本格対応まで完了し、BTSシステムで管理すべし</li>
</ul>
</li>
</ul>


<h4>釣り老師に話すと、ビッグサイズやキングサイズなのにノーマルサイズと判定される</h4>

<ul>
<li>不具合の内容

<ul>
<li>魚には大きさがある</li>
<li>オウムガイも釣れる</li>
<li>魚を釣ったあと釣り老師に話すとサイズに見合った報酬をもらえる</li>
</ul>
</li>
<li>原因と対応

<ul>
<li>大きさとサイズの分類は魚ごとに設定</li>
<li>オウムガイは1023mm以上がビッグ、それ未満がノーマル</li>
<li>C++ではmm単位の情報をintで扱い、Luaではmおよびmmをdoubleで扱う: 浮動小数点の丸め処理の誤差</li>
<li>誤差補正処理は入っていた

<ul>
<li>補正処理が不十分だった</li>
</ul>
</li>
<li>行動ログから全戻しした</li>
</ul>
</li>
<li>得られた教訓

<ul>
<li>表面化していない不具合は存在する前提で対応すべし</li>
</ul>
</li>
</ul>


<h4>振り返り</h4>

<ul>
<li>リリース後の改修は要注意

<ul>
<li>影響範囲を考慮</li>
<li>BTSチケットに登録</li>
<li>確実にチケットクローズするまで</li>
<li>ドラクエX開発チームは運営中に出た問題に対して、「どうすれば事前に防げたか」を検討しパターン別にまとめている</li>
<li>BTSチケットに登録していないパターンが一番多い: 開発担当者が軽く考える案件が問題になりやすい

<ul>
<li>10万くらいチケットがある (タスクチケット含む)</li>
<li>以前のBTSにも10万くらいあったので、計20万チケットくらい</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Q&amp;A</h3>

<p>Q: 開発体制・人数は？</p>

<p>A: 秘密(人事から止められている)。スタッフロールから想像して。</p>

<p>Q: 修正の影響範囲の特定の仕方は？</p>

<p>A: あまりよくない答えだが、個別・経験値に依存している。</p>

<p>Q: チケット登録がなかなか浸透しない理由は？</p>

<p>A: 開発者がチケット登録するまでもないと思っちゃう。リファクタリングのつもりで軽く対応しちゃうときにバグが埋め込まれてしまう。油断、おごりがある。</p>

<p>Q: 運用以降が本番、というところのモチベーション維持に関しては？</p>

<p>A: 実際、飽きたと言って抜けちゃう人もいる。チーム内で異動させたりする。</p>

<h2>IBM Q &ndash; 量子コンピューターの最前線</h2>

<ul>
<li><p>小野寺 民也さん</p></li>
<li><p>そもそも量子とは</p>

<ul>
<li>とても小さな世界</li>
<li>物理法則 (ニュートン力学)では表すことができない</li>
<li>量子と波の性質を併せ持つ</li>
<li>量子重ね合わせ</li>
<li>量子もつれ</li>
</ul>
</li>
<li>CRDS-FY2019-SP-04, みんなの量子コンピュータ: <a href="https://www.jst.go.jp/crds/report/report01/CRDS-FY2018-SP-04.html">（戦略プロポーザル）みんなの量子コンピューター　～情報・数理・電子工学と拓く新しい量子アプリ～／CRDS-FY2018-SP-04</a> の図2.2 量子ビット実現手法の比較

<ul>
<li>超電導回路</li>
<li>イオントラップ</li>
</ul>
</li>
<li>量子プログラミング: 量子回路を組立てていくこと</li>
<li>Exponential growth (指数的増大): 2<sup>n</sup>

<ul>
<li>2<sup>27</sup> ～ 世界一のスパコン(IBM) 1億4千万並列 ～ 2<sup>28</sup></li>
</ul>
</li>
<li>万能量子コンピュータ

<ul>
<li><a href="https://quantumexperience.ng.bluemix.net/qx/devices">IBM Q Experience</a></li>
<li>現状、小規模</li>
<li>近似 (Noisy)</li>
<li>5量子ビット～20量子ビットが現状の量子コンピュータ</li>
<li>量子状態を保つ時間も短いので、量子計算をその時間内に納めなければならないという制約がある</li>
</ul>
</li>
<li>有望なアプリケーション領域

<ul>
<li>量子化学</li>
<li>機械学習</li>
<li>最適化</li>
</ul>
</li>
<li>IBM Q

<ul>
<li>IBM Qシステム</li>
<li>QISKitオープンソースSDK

<ul>
<li><a href="https://qiskit.org/aqua">Qiskit Aqua | Algorithms for near-term quantum applications</a></li>
</ul>
</li>
<li>IBM Qネットワーク</li>
</ul>
</li>
<li>CES2019にも出展: <a href="https://www.youtube.com/watch?v=LAA0-vjTaNY&amp;feature=youtu.be">The World’s First Integrated Quantum Computing System &ndash; YouTube</a></li>
<li>量子力学だけでなく、冷凍機、Microwave工学などの周辺技術も大切。</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="https://www.ibm.com/developerworks/jp/cloud/library/cl-quantum-computing/index.html">IBM Quantum Computing で計算してみよう</a></li>
</ul>


<p>午後は打ち合わせがあったので午前中までの参加だった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[参加レポート]GDG-Tokyo New Year Party 2019]]></title>
    <link href="http://momota.github.io/blog/2019/01/31/gdg-tokyo/"/>
    <updated>2019-01-31T10:51:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/01/31/gdg-tokyo</id>
    <content type="html"><![CDATA[<p><img src="http://momota.github.io/images/20190131_gdg-tokyo/gdg.png" alt="GDF-Tokyo New Year Party logo" /></p>

<ul>
<li>2019/01/30(水)、六本木で行われた<a href="https://gdg-tokyo.connpass.com/event/113178/">GDG Tokyo New Year Party 2019 &ndash; connpass</a> への参加レポート。</li>
</ul>


<!-- more -->


<h3>How to start Android Dev</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="5e83e4faafc34fb6a4dcacdb633f47ea" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/wasabeef_jp">@wasabeef_jp さん</a></li>
<li>資料: <a href="https://speakerdeck.com/wasabeef/jp-how-to-start-android-dev">［JP］ How to start Android Dev &ndash; Speaker Deck</a></li>
</ul>


<h4>IDE (Build tool)</h4>

<ul>
<li>Android Studio

<ul>
<li>Layout Editor</li>
<li>MotionLayout: Motion editor</li>
<li>Emulator: 数年前に比べると高機能・高速化</li>
</ul>
</li>
<li>Gradle

<ul>
<li>ビルド自動化</li>
<li>Android開発におけるスタンダード</li>
<li>DSL (デフォルトGroovy DSL)

<ul>
<li>Kotlin DSL</li>
</ul>
</li>
</ul>
</li>
<li>Java / Kotlin

<ul>
<li>近年はKotlinが主流

<ul>
<li>Libraryを作るときはJavaで作ることが多い</li>
</ul>
</li>
<li>Java 8: 最新のJavaは使えない

<ul>
<li>D8 toolsによって今後変わりそう</li>
</ul>
</li>
<li>Kotlin 1.3

<ul>
<li>Coroutines: 軽量スレッド</li>
<li>Null-safety</li>
<li>Extention functions</li>
<li>Lambda + Inline functions、など</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>Architecture</h4>

<ul>
<li>MVVM

<ul>
<li>Google推奨でAACと相性がいい</li>
</ul>
</li>
<li>Flux

<ul>
<li>日本で数件の事例あり</li>
</ul>
</li>
</ul>


<h4>Jetpack</h4>

<ul>
<li>KTX

<ul>
<li>Core</li>
<li>Fragment</li>
<li>Lifecycle</li>
</ul>
</li>
<li>Lifecycles

<ul>
<li>バックグラウンド状態、フォアグラウンド状態、電源状態…</li>
<li>ライフサイクルを知りたいとき

<ul>
<li>動画の開始停止</li>
<li>画面閉じたときの終了処理</li>
</ul>
</li>
</ul>
</li>
<li>ViewModel (+ LiveData)

<ul>
<li>Activity/ViewModelはそれぞれ異なるライフサイクルがあるが、ViewModelのほうが長生きする</li>
<li>ViewModel

<ul>
<li>Activityの画面回転・破棄のデータ保持</li>
<li>Fragments感のデータ共有</li>
<li>永続化ではない</li>
</ul>
</li>
</ul>
</li>
<li>Navigation

<ul>
<li>Fragment Transactionの簡易化

<ul>
<li>アニメーション</li>
</ul>
</li>
<li>ディープリンク</li>
<li>Navigation Editor</li>
</ul>
</li>
</ul>


<h4>DI</h4>

<ul>
<li>Dagger

<ul>
<li>Java</li>
</ul>
</li>
<li>Koin</li>
<li>Kodein</li>
</ul>


<h4>Networking</h4>

<ul>
<li>Retrofit</li>
</ul>


<h4>Testing</h4>

<ul>
<li>Unit Test

<ul>
<li>Instrument Test: 実機テスト</li>
<li>Local Test (Robolectric): CIとの相性がいい</li>
<li>Firebase Test Lab</li>
</ul>
</li>
</ul>


<h4>CI</h4>

<ul>
<li>bitrise

<ul>
<li>モバイル向け</li>
</ul>
</li>
<li>CircleCI

<ul>
<li>高機能</li>
<li>メモリ不足で落ちる場合がある</li>
</ul>
</li>
<li>Danger

<ul>
<li>コードレビューの自動化をCI上で</li>
</ul>
</li>
</ul>


<h4>Flutter</h4>

<ul>
<li>Google製</li>
<li>Hot reload</li>
<li>ウィジェットがたくさん</li>
</ul>


<h3>Cloud Functionsから始めるFirebase</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="161fd22794824e868465f92f2ecee8c5" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/d_date">Daiki Matsudate(@d_date)さん</a></li>
<li>資料: <a href="https://speakerdeck.com/d_date/cloud-functionskarashi-merufirebase-4568e784-5bf3-4611-90a4-2f8632b3aa78">Cloud Functionsから始めるFirebase &ndash; Speaker Deck</a></li>
</ul>


<h4>Firebase</h4>

<ul>
<li>mBaaS

<ul>
<li>アプリ開発を容易に</li>
<li>アプリ品質向上</li>
</ul>
</li>
</ul>


<h4>Cloud Functions for Firebase</h4>

<ul>
<li>コードをクラウドにプッシュするとFirebaseのサービスのアクションをトリガーに動く</li>
</ul>


<h4>Admin API</h4>

<ul>
<li>CLIで特権環境からFirebaseを操作できる</li>
</ul>


<h4>ユースケース</h4>

<ul>
<li>(Twitterなどの)フォロワーが追加されたら通知する</li>
<li>メッセージのサニタイズする</li>
<li>画像をストレージにアップロード後、サムネイル化し格納し直し</li>
<li>URL Shorter</li>
<li>Firestoreの全文検索: Firestoreアップデート時にalgoliaにインデックスを貼る</li>
<li>Remote Config</li>
<li><a href="https://github.com/firebase/functions-samples">firebase/functions-samples： Collection of sample apps showcasing popular use cases using Cloud Functions for Firebase</a> にいろいろとサンプルがある</li>
</ul>


<h4>GCP</h4>

<ul>
<li>GCP FunctionsはGo 1.11に対応</li>
</ul>


<h3>Starting Google Kubernetes Engine 2019</h3>

<script async class="speakerdeck-embed" data-slide="1" data-id="4d31ff24e0cc4e79b5275dbaba4a49f3" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>発表者: <a href="https://twitter.com/sakajunquality">sakajunquality(@sakajunquality)さん</a></li>
<li>資料: <a href="https://speakerdeck.com/sakajunquality/starting-google-kubernetes-engine-2019">Starting Google Kubernetes Engine 2019 &ndash; Speaker Deck</a></li>
</ul>


<h4>What&rsquo;s k8s?</h4>

<ul>
<li>Borgベースのコンテナプラットフォーム</li>
<li>Microservicesプラットフォーム</li>
<li>Goベース</li>
<li>CNCFプロジェクトの「Graduated」ステージ</li>
</ul>


<h4>K8s マネージドサービス</h4>

<ul>
<li>GKE</li>
<li>EKS</li>
<li>AKS</li>
<li>IKS</li>
<li>などなどたくさんある…</li>
</ul>


<h4>Why GKE?</h4>

<ul>
<li>すでにGCPを使っている</li>
<li>k8sはむずかしい</li>
<li>GCP独自の機能</li>
</ul>


<h4>Already Using GCP?</h4>

<p>GCPでk8sを使うには以下のパターンがある</p>

<ul>
<li>AppEngine (Flexible) → 柔軟性がない</li>
<li>Compute Engine →  信頼性 (可用性) がない、作り込むとしても大変</li>
<li>Kubernetes Engine: Flexible + Reliable</li>
</ul>


<h4>k8sは難しい</h4>

<ul>
<li><a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">kelseyhightower/kubernetes-the-hard-way： Bootstrap Kubernetes the hard way on Google Cloud Platform. No scripts.</a></li>
<li>k8s は構築も、維持も、管理も大変

<ul>
<li>Boosting</li>
<li>High Availability</li>
<li>Version Updates</li>
</ul>
</li>
<li>簡単にクラスタをつくるならフルマネージドのGKE</li>
</ul>


<h4>GKEはフルマネージドサービス</h4>

<ul>
<li>コントロールプレーンとワーカーノードが両方フルマネージド</li>
<li>リージョン・ゾーンレベルの可用性</li>
<li>Auto-Repair / Auto-Update</li>
<li>VPCネイティブ</li>
</ul>


<h4>GCP特有機能</h4>

<ul>
<li>Networking

<ul>
<li>Cloud Load Balancing: L4. L7</li>
<li>Cloud Armor: L3-L7カスタムルールを作れるWAF</li>
<li>Cloud CDN: グローバルCDN</li>
</ul>
</li>
<li>CI/CD

<ul>
<li>Cloud Build: フルマネージドCI、ネイティブDockerをサポート</li>
<li>Container Registry: Docker レジストリ。脆弱性診断が可能</li>
<li>Cloud Source Repository: プライベートGitリポジトリ。検索が強い。Githubからミラー可能。</li>
<li>GitOpsの概念</li>
</ul>
</li>
<li>Monitoring

<ul>
<li>Stackdriver Monitoring: フルスタックの監視スイート</li>
<li>Stackdriver Logging: フルマネージドログプラットフォーム。GKEはfluentdがプリインストール</li>
</ul>
</li>
<li>Integrations

<ul>
<li>Cloud Pub/Sub</li>
<li>Cloud Functions</li>
<li>Cloud IAP</li>
</ul>
</li>
</ul>


<h4>GKE Update</h4>

<ul>
<li>Private Cluster + Cloud Nat

<ul>
<li>Private Clusterは、プライベートIPだけを持てる</li>
<li>Cloud Natは、フルマネージドNat-Gateway</li>
</ul>
</li>
<li>NEG /Container-Native Load Balancing

<ul>
<li>Network Endpoint Groupを使うとLB～Pod間のトラフィック制御をiptablesを使わずにできる</li>
</ul>
</li>
<li>Node Auto-Provisioning

<ul>
<li>Cluster Autoscalerが新しいノードプールを作成・削除してくれる</li>
</ul>
</li>
<li>Binary Authorization

<ul>
<li>信頼できるイメージのみをGKEへデプロイできる</li>
<li>チェックボックスにチェックを入れるだけで有効化可能</li>
</ul>
</li>
<li>Istio

<ul>
<li>1クリックでIstioをデプロイ可能</li>
<li>既存クラスタにも適用可能</li>
</ul>
</li>
</ul>


<h4>How to start?</h4>

<ul>
<li><code>$ gcloud container clusters create MY_CLUSTER</code></li>
<li>本を読む

<ul>
<li>中井さんのプログラマのための Google Cloud Platform 入門</li>
<li>Docker/Kubernetes 実践コンテナ開発入門</li>
<li>青山さんのKubernetes完全ガイド</li>
</ul>
</li>
<li>ハンズオン

<ul>
<li>Quick Start</li>
<li>QwickLabs</li>
<li>Coursera</li>
<li>sakajunquality&rsquo;s hands-on</li>
</ul>
</li>
<li>オンラインドキュメント

<ul>
<li>GKE document</li>
<li>Kubernetes document</li>
<li>Youtubeもある</li>
</ul>
</li>
</ul>


<h3>Web in 2019 What’s coming?</h3>

<ul>
<li>発表者: <a href="https://twitter.com/laco2net">Suguru Inatomi / lacolaco(@laco2net)さん</a></li>
<li>資料: <a href="https://docs.google.com/presentation/d/e/2PACX-1vRXfgnXlYSQ5Q3ImC1DQoub0L_5NUrha9yW3MLcDnFbn1A-mdEXZF11wzzadDF2yKoUnroZ46tMwUl3/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">20190130 &ndash; Web in 2019 What’s coming? &ndash; Google Slides</a></li>
</ul>


<h4>ES 2019 (WIP)</h4>

<ul>
<li><a href="https://qiita.com/tonkotsuboy_com/items/07f8ef98abf89250b90c">JavaScriptの次の仕様ES2019でほぼ確実に追加される新機能まとめ &ndash; Qiita</a></li>
</ul>


<h4>Web Components / Polymer</h4>

<ul>
<li>Polymerの追加開発がなくなった (メンテナンス状態)</li>
<li>lit

<ul>
<li>lit-html / lit-element</li>
</ul>
</li>
<li>Web ComponentsのBrowser supports Update

<ul>
<li>Firefox がサポート</li>
<li>EdgeがChromiumへ移行なので、移行後はEdgeでもwebcomponentsが使える</li>
</ul>
</li>
<li>CSS Shadow parts

<ul>
<li>Shadow DOM内にPartsを定義</li>
<li>外側のCSSから上書きできる</li>
</ul>
</li>
<li>Constructable Stylesheets

<ul>
<li>CSSStyleSheet()のオブジェクトを作成可能</li>
</ul>
</li>
<li>HTML Modules

<ul>
<li>Edgeチームから提案</li>
<li>.htm (モジュールファイル) をインポート可能</li>
</ul>
</li>
<li>Class Public Fields</li>
</ul>


<h4>Angular Updates</h4>

<ul>
<li>Community

<ul>
<li>成長中</li>
<li>Angular docsへの訪問者は1.5M に迫る</li>
<li>日本コミュニティ (ドキュメント翻訳など) も10,000MAUに到達</li>
</ul>
</li>
<li>Core updates

<ul>
<li>半年に1回メジャーアップデート</li>
<li>メジャーバージョンアップしてもそんなに大きな変化はなし</li>
</ul>
</li>
<li>Angular Bazel

<ul>
<li>Bazel (ビルドツール) をAngularでもサポート</li>
</ul>
</li>
<li>Ivy roadmap

<ul>
<li>次世代の内部リファクタリング</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[参加レポート]Cloud Native Meetup Tokyo #6]]></title>
    <link href="http://momota.github.io/blog/2019/01/10/cloud-native-meetup-tokyo/"/>
    <updated>2019-01-10T10:09:00+09:00</updated>
    <id>http://momota.github.io/blog/2019/01/10/cloud-native-meetup-tokyo</id>
    <content type="html"><![CDATA[<p><img src="http://momota.github.io/images/20190110_cloud-native-meetup-tokyo/cnmt-logo.png" alt="Cloud Native Meetup Tokyo logo" /></p>

<ul>
<li>2019/01/09(水)、渋谷で行われた<a href="https://cloudnative.connpass.com/event/113478/">Cloud Native Meetup Tokyo #6 KubeCon + CNCon Recap &ndash; connpass</a> への参加レポート。</li>
<li><a href="https://twitter.com/hashtag/cloudnativejp?src=hash">ハッシュタグ #cloudnativejp</a></li>
<li>転職しちゃったIさんとNさんに再会できてうれしかった。お酒ごちそうさまでした。</li>
</ul>


<!-- more -->


<h2>Cortex の話をKubeConで聞きたかった話</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="4a9465edea0547d2b2afce66746c0085" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Shinya Uemura <a href="https://twitter.com/uesyn">@uesyn</a> (KDDI &amp; Creationline)</li>
<li><a href="https://speakerdeck.com/uesyn/cortexfalsehua-wokubecondewen-kitakatutatuteiuhua">Cortexの話をKubeConで聞きたかったっていう話 &ndash; Speaker Deck</a></li>
</ul>


<p><img src="http://momota.github.io/images/20190110_cloud-native-meetup-tokyo/Cortex.png" alt="cortex" /></p>

<ul>
<li>PrometheusのローカルストレージはLong-term Storageではない

<ul>
<li>レプリケーション機能がなかったりやクラスター化されていない</li>
</ul>
</li>
<li>Cortex

<ul>
<li>Prometheusのメトリクスの長期保管のためのストレージ</li>
</ul>
</li>
<li>Frontend

<ul>
<li>Cortexに含まれていないため、自分で実装する必要がある</li>
</ul>
</li>
<li>Distributor

<ul>
<li>Prometheusから送信された時系列データを処理する</li>
<li>複数のIngesterに並列でサンプルを送信する

<ul>
<li>分散ハッシュテーブルを活用</li>
<li>コンシステントハッシュテーブル</li>
</ul>
</li>
<li>ステートレスな設計</li>
</ul>
</li>
<li>Ingester

<ul>
<li>時系列データを長期ストレージバックエンドへ書き込む

<ul>
<li>数時間分のデータを圧縮し、チャンクとしてバックエンドストレージへ保管</li>
</ul>
</li>
<li>過去12時間のデータを保持しておく</li>
</ul>
</li>
<li>Chunk store

<ul>
<li>2種類のデータストア

<ul>
<li>Chunkとしてまとめられた時系列データを保存</li>
<li>Chunkのための転置インデックスを保存</li>
</ul>
</li>
</ul>
</li>
<li>Query Frontend

<ul>
<li>テナントからのReadリクエストをいい感じにQuerierに流してくれる

<ul>
<li>テナントごとのキューイングなど</li>
</ul>
</li>
<li>オプションのサービスなので省略可能</li>
</ul>
</li>
<li>Querier

<ul>
<li>クライアントからのPromQLクエリを処理</li>
<li>取得する時系列データへのアクセスの抽象化</li>
</ul>
</li>
<li>Ruler

<ul>
<li>Alertingのためのルールを実行してアラートをAlert managerに送信</li>
<li>CortexのインストールにはAlertmanagerも含まれる</li>
</ul>
</li>
</ul>


<h3>マルチテナント対応</h3>

<ul>
<li>リクエストに含まれるヘッダ内のIDでテナントを判断</li>
<li>テナントIDごとにPrometheusのメトリクスを分割して保存可能</li>
<li>Cortex自体に認証認可の機能は含まれず、実装が必要</li>
<li>Headerに埋め込むテナントID: X-Scope-OrgIDで識別</li>
</ul>


<h3>Cortexをk8s上で動かそう</h3>

<ul>
<li>つらい

<ul>
<li>リリースブランチがない、タグもない</li>
<li>Masterから…</li>
<li>公式の入門ドキュメントがない</li>
<li>For Developerに記載されたとおりに動かしても動かない</li>
<li>Frontendの実装が必要</li>
</ul>
</li>
</ul>


<h3>手順</h3>

<ol>
<li>make</li>
<li>k8sディレクトリ内のマニフェストのimageを上記へ置換</li>
<li>一部マニフェスト内のargumentが間違っている部分を修正</li>
<li><code>kubectl create -f ./k8s</code></li>
<li><code>kubectl port-forward svc/nginx 9999:80</code></li>
<li><code>curl http://127.0.0.1:9999/api/prom/api/v1/query?query=up</code></li>
</ol>


<h3>まとめと今後</h3>

<ul>
<li>まとめ

<ul>
<li>cortexの歴史と概要</li>
<li>取りあえず動く手順</li>
</ul>
</li>
<li>今後

<ul>
<li>本物のDynamoDB、S3への接続</li>
<li>負荷テスト</li>
<li>Ruler, table-manager, schemaの調査</li>
<li>似たような設計のLokiの調査</li>
</ul>
</li>
</ul>


<h2>KubeCon + CNConに見るetcdの未来</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="73ffb953ab4d47b0bc2b4a54cabd569c" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Akihiro Ikezoe <a href="https://twitter.com/zoetro">@zoetro</a> (Cybozu)

<ul>
<li>CybozuはVMからコンテナへどんどん移行中</li>
</ul>
</li>
<li><a href="https://speakerdeck.com/zoetrope/kubecon-plus-cnconnijian-ruetcdfalsewei-lai">KubeCon+CNConに見るetcdの未来 &ndash; Speaker Deck</a></li>
</ul>


<p><img src="http://momota.github.io/images/20190110_cloud-native-meetup-tokyo/etcd.jpg" alt="etcd" /></p>

<h3>etcd</h3>

<ul>
<li>現Red hat社 (旧CoreOS社) が華髪する分散キーバリューストア</li>
<li>High Available</li>
<li>Strong Consistency Model</li>
<li>Raftによる分散合意</li>
<li>Transaction, Watch, Lease</li>
</ul>


<h3>etcdの未来</h3>

<ul>
<li>CoreOSがRed Hatに買収され、Red HatもIBMに買収される予定</li>
<li>Container Linux: Fedora CoreOSが後継</li>
<li>etcdがCNCFプロジェクトに

<ul>
<li>Red Hat社からCNCFへ寄贈</li>
<li>もともと開発者は外部が多かったので開発体制に大きな変化はなさそう</li>
<li>今後は使いやすさや安定性、性能の向上</li>
</ul>
</li>
</ul>


<h3>新機能</h3>

<ol>
<li>Raft Learner

<ul>
<li>Raft: etcdの分散合意アルゴリズム

<ul>
<li>ネットワーク分断などの障害が発生しても、データの不整合を発生させないことを保証する</li>
</ul>
</li>
<li>現状の問題点

<ul>
<li>クラスタに新しいメンバを追加したときに、データ同期に時間がかかる</li>
<li>データ同期中はI/O負荷が高い</li>
<li>データ同期中にネットワーク分断が発生すると、クラスタ崩壊が発生する</li>
<li>起動パラメータをミスっていると、故障したメンバーがクラスタへ追加されてしまう</li>
</ul>
</li>
<li>Raft Learner

<ul>
<li>データ同期中はLearner状態に</li>
</ul>
</li>
</ul>
</li>
<li>Cluster init

<ul>
<li>etcdは起動オプションがたくさんある (リッスンするアドレスやメンバーごとに名前など)</li>
</ul>
</li>
</ol>


<h3>etcdadm</h3>

<ul>
<li>etcdの運用は大変

<ul>
<li>HA構成、証明書管理、クラスタが崩壊しないようにメンバを追加。削除</li>
</ul>
</li>
<li>運用を自動化するツールが必要となる: etcdadm

<ul>
<li>実機やVM向けのetcdクラスタ運用自動化ツール</li>
<li>k8s向けに特化

<ul>
<li>メンバーの追加削除</li>
<li>バックアップとリストア (DR)</li>
<li>アップグレード・ダウングレード</li>
<li>証明書の管理</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>トラブルシューティング</h3>

<ul>
<li>デバッグのアプローチ

<ul>
<li>etcd起動確認</li>
<li>ディスクスペースが空いているか？</li>
<li>リクエストに時間がかかっていないか？</li>
</ul>
</li>
<li>ツール

<ul>
<li>etcdctl</li>
<li>auger</li>
<li>etcd-dump-logs</li>
</ul>
</li>
</ul>


<h3>QA形式のセッション: Deep Dive</h3>

<ul>
<li>なぜデータサイズに制限があるのか？

<ul>
<li>デフォルトで2GBの制限がある</li>
<li>データベースファイルをmmapするため、データ量分のメモリが必要</li>
</ul>
</li>
<li>なぜコンパクションが必要なのか？

<ul>
<li>キーごとの履歴を保持している</li>
<li>古い履歴を削除しないと、データ容量が増えリストア時間も憎愛する</li>
</ul>
</li>
<li>なぜI/Oレイテンシに敏感なのか

<ul>
<li>定期的にリーダーからフォロワーにハートビートを送信して、分散合意のメタデータをファイルに保存している</li>
<li>ファイル書き込みが遅いとハートビートがタイム・アウトする</li>
<li>できるだけSSDを使うべき</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<ul>
<li>etcdはk8sを始めいろいろなところで使われていてなくてはならない存在</li>
<li>CNCFに加わったことで今後のメンテナンスは安心感</li>
<li>運用者向けの新機能が多数</li>
</ul>


<h2>Monitoring Kubernetes Audit Log by Falco</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="285589e4ce164fa78335af3234ae96cb" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Makoto Hasegawa <a href="https://twitter.com/makocchi">@makocchi</a> (CyberAgent)</li>
<li><a href="https://speakerdeck.com/makocchi/kubecon2018-recap-falco-deep-dive">kubecon2018_recap_falco_deep_dive &ndash; Speaker Deck</a></li>
</ul>


<p><img src="http://momota.github.io/images/20190110_cloud-native-meetup-tokyo/falco.png" alt="falco" /></p>

<h3>Falco</h3>

<ul>
<li>Container Native Runtime Security</li>
<li>コンテナ環境のセキュリティをモニタリングしてくれるOSS</li>
<li>主にsysdigが開発</li>
<li>モニタリングをするだけで一切に処理をブロックしたりすることはない</li>
</ul>


<h3>仕組み</h3>

<ul>
<li>Falco Rules</li>
<li>Falco Engine</li>
<li><p>Kernel module / sysdig libraries</p></li>
<li><p>Falcoを実行するとDKMSによってmoduleがbuild&amp;installされる</p></li>
<li><code>lsmod | grep falco</code></li>
<li>Rule をyamlで記述することでモニタリングするイベントを定義する</li>
</ul>


<h3>Notify</h3>

<ul>
<li>Falcoには検知した際にプログラムを実行する仕組みがある

<ul>
<li>外部へのWebhookとか可能 (Slack連携)</li>
</ul>
</li>
<li><code>falco.yaml</code> の設定</li>
<li><a href="https://medium.com/@makocchi/falco-with-kubernetes-ja-1e2c045b3840">Kubernetes に Falco を展開してアプリケーションの挙動をモニタリングする ? makocchi ? Medium</a></li>
</ul>


<h3>k8sのaudit logをモニタリング</h3>

<ul>
<li>k8s APIサーバに対する呼び出しを時系列でログに記録することが可能</li>
<li>K8Sでaudit loggingを有効にする必要がある</li>
<li>GKEではdefaultで有効</li>
<li>webhookの設定とpolicyはfalcoのrepositoryにサンプルが用意されている</li>
<li>audit policyはrbacに近い設定で定義可能</li>
<li>audit logを元にrbacのmanifestを自動生成してくれるツールも存在する</li>
</ul>


<h3>インストール</h3>

<ul>
<li>docker runでもOK</li>
<li>Helmのchartがあるのでそれが楽</li>
</ul>


<h2>KubeCon + CloudNativeCon 2018 NA Recap Vitess</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="c4a298b954df4a008c4f90e5719526e2" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Yutaka Ichikawa @cyberblack28 (APC)</li>
<li><a href="https://speakerdeck.com/cyberblack28/kubecon-plus-cloudnativecon-2018-na-recap-vitess">KubeCon + CloudNativeCon 2018 NA Recap Vitess &ndash; Speaker Deck</a></li>
</ul>


<p><img src="http://momota.github.io/images/20190110_cloud-native-meetup-tokyo/vitess.png" alt="vitess" /></p>

<h3>サマリ</h3>

<ul>
<li>MySQL cloud-native nirvana

<ul>
<li>MySQL基盤は複雑</li>
<li>MySQLクラウドネイティブ解脱への道のり</li>
<li>k8sでMySQLの管理</li>
</ul>
</li>
</ul>


<h3>Vitess</h3>

<ul>
<li>MySQLをシャーディングによってスケールを実現するクラウドネイティブなデータベースクラスタシステム</li>
<li>Youtubeにより開発、Go製</li>
<li>Slackが20%がVitessへ移行中</li>
<li>jd.com: 10,000+テーブル on k8s</li>
<li>アーキテクチャ

<ul>
<li>vttabletがサイドカー。クエリの置換、重複除去など</li>
<li>vtgate: アプリからのクエリをvttabletにルーティング、結果をクライアントへ返すプロキシ</li>
</ul>
</li>
<li>Vitessシャーディング

<ul>
<li>垂直: テーブルごとに複数データベースに分けて格納</li>
<li>水平: 1つのテーブルを複数</li>
</ul>
</li>
<li>k8sとの相性が良い</li>
</ul>


<h3>事例</h3>

<ul>
<li>HubSpot: インバウンドマーケティングの統合サービスアプリケーションおよびサービス

<ul>
<li>AWS (EC2 * 2500規模) → GCP (k8s + Vitess)</li>
<li>選定理由

<ul>
<li>シャーディング機能</li>
<li>k8sとの親和性</li>
<li>OSS</li>
<li>クラウドネイティブ</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>まとめ</h3>

<ul>
<li>YouTubeの実績は強い</li>
<li>プロダクション利用が徐々に増えている</li>
<li>k8sとの親和性が高い</li>
<li>設計・運用のチューニングは必要</li>
<li>マネージドサービスとしてVitess as a Serviceなるものが生まれそう!?</li>
</ul>


<h2>Prometheusの今後</h2>

<script async class="speakerdeck-embed" data-slide="1" data-id="0d8e8156c5df44f99953e097e0ab5389" data-ratio="1.77777777777778" src="http://momota.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>Yoshi Shota <a href="https://twitter.com/yosshi_">@yosshi_</a> (NTT Communications)</li>
<li><a href="https://speakerdeck.com/yosshi_/prometheusfalsejin-hou">Prometheusの今後.pdf &ndash; Speaker Deck</a></li>
</ul>


<p><img src="http://momota.github.io/images/20190110_cloud-native-meetup-tokyo/prometheus.jpg" alt="prometheus" /></p>

<h3>Prometheusの課題</h3>

<ul>
<li>長期保管の機能がない

<ul>
<li>保管機能を延ばすと性能の劣化がある</li>
</ul>
</li>
<li><p>デフォルトで冗長機能がない</p></li>
<li><p>長期保管: Third party adapterの利用</p>

<ul>
<li>Cortex</li>
<li>M3DB: Uber製</li>
</ul>
</li>
<li>Thanos/Cortex/M3</li>
</ul>


<h3>Thanos</h3>

<ul>
<li>複数のPrometheusを横断してメトリクスの収集を可能にする</li>
<li>無制限にログを保管する</li>
<li><p>上記を応答時間を犠牲にすることなく実現</p></li>
<li><p>Querier</p>

<ul>
<li>Querier がSIdecar経由でPrometheusから時系列データを取得</li>
</ul>
</li>
<li>Sidecar → Object Storage</li>
<li>Store</li>
<li>Compactor: 圧縮とダウンサンプリングを行う</li>
<li><p>Ruler: 通知用</p></li>
<li><p>2019年1月時点ではGCSのみ対応</p></li>
</ul>


<h3>Loki</h3>

<ul>
<li>ログの収集と可視化ツール</li>
<li>メトリクスだけではインシデントの全容の半分しかわからない</li>
<li>メトリクスとログの参照時の切替コストを最小限に抑える</li>
<li>Prometheusを参考にラベルを活用した時系列にデータを格納</li>
<li>アーキテクチャはCortexと同じ

<ul>
<li>ソースコードもCortexを使いまわし…</li>
</ul>
</li>
<li>まだAlpha版</li>
</ul>


<h3>監視の目指すとこ</h3>

<ul>
<li>Alert → Dashboard → Adhoc Query → Log Aggregation → Distribute Tracing</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[serverless framework による AWS Lambda ローカル開発]]></title>
    <link href="http://momota.github.io/blog/2018/11/05/serverless-framework/"/>
    <updated>2018-11-05T20:11:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/11/05/serverless-framework</id>
    <content type="html"><![CDATA[<p><img src="http://momota.github.io/images/20181105_serverless-framework/serverless-framework-logo.png" alt="serverless framework logo" /></p>

<p><a href="https://serverless.com/">Serverless Framework</a> を使うことにより、FaaS (AWS Lambda, GCP Cloud Functions, Azure functions, など) の開発をローカルで実施できる。
ローカル環境で自分の好きなエディタ・IDEで開発やテストが可能になるし、デプロイも容易になる。</p>

<p>AWS には AWS SAM もあるが、他のクラウドプロバイダでも開発物やノウハウが使い回せることが期待できるので、3rd パーティ製の Serverless Framework を選ぶ。</p>

<p>本稿では、Serverless Framework の導入と、Hello Worldアプリ (AWS Lambda) のデプロイについて書く。</p>

<h2>環境</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat /etc/lsb-release
</span><span class='line'><span class="nv">DISTRIB_ID</span><span class="o">=</span>Ubuntu
</span><span class='line'><span class="nv">DISTRIB_RELEASE</span><span class="o">=</span>18.04
</span><span class='line'><span class="nv">DISTRIB_CODENAME</span><span class="o">=</span>bionic
</span><span class='line'><span class="nv">DISTRIB_DESCRIPTION</span><span class="o">=</span><span class="s2">&quot;Ubuntu 18.04.3 LTS&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Serverless framework のインストール</h2>

<p>まず Node.js (v6.5.0以降) と npm をインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install nodejs
</span><span class='line'><span class="nv">$ </span>nodejs --version
</span><span class='line'>v8,10,0
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install npm
</span><span class='line'><span class="nv">$ </span>npm --version
</span><span class='line'>3.5.2
</span></code></pre></td></tr></table></div></figure>


<p>npm で serverless framework をインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo npm install -g serverless
</span><span class='line'><span class="nv">$ </span>serverless --version
</span><span class='line'>1.32.0
</span></code></pre></td></tr></table></div></figure>


<h2>AWS アクセスキーを設定する</h2>

<ol>
<li>AWSアカウントを作り、マネージドコンソールからIAMページにアクセスする</li>
<li>ペインのユーザをクリックし、「ユーザを追加」をクリックする

<ul>
<li>適切なユーザ名を入力する</li>
<li>アクセスの種類の、「プログラムによるアクセス」にチェックをいれ、次へ</li>
<li>アクセス許可の設定は、「既存のポリシーを直接アタッチ」で、「AdministratorAccess」を選択し、次へ</li>
<li>レビューして、問題なければ作成する</li>
</ul>
</li>
<li>アクセスキーIDとシークレットアクセスキーをコピーする</li>
<li>Serverless framework に設定する</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># パターン1: 環境変数に設定</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span>&lt;your-key-here&gt;
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span>&lt;your-secret-key-here&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># パターン2: serverless config credentials コマンドで設定</span>
</span><span class='line'><span class="nv">$ </span>serverless config credentials --provider aws --key &lt;your-key-here&gt; --secret &lt;your-secret-key-here&gt;
</span><span class='line'><span class="c"># =&gt; ~/.aws/credentials が生成される</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Serverless framework で Hello World</h2>

<p>まず、作業ディレクトリの作成と、<code>package.json</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir my-express-application <span class="o">&amp;&amp;</span> <span class="nb">cd </span>my-express-application
</span><span class='line'><span class="nv">$ </span>npm init -f
</span></code></pre></td></tr></table></div></figure>


<p>いくつかのライブラリをインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install --save express serverless-http
</span></code></pre></td></tr></table></div></figure>


<p>アプリケーションを <code>index.js</code> に書く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">serverless</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;serverless-http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;00001&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello World!&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="nx">serverless</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはルートパス <code>/</code> にアクセスがあった場合に、 <code>{ id: '00001', message: 'Hello World!' }</code> を返す単純なアプリ。</p>

<p>これをデプロイするため、以下の <code>serverless.yml</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-express-application</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">aws</span>
</span><span class='line'>  <span class="l-Scalar-Plain">runtime</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nodejs8.10</span>
</span><span class='line'>  <span class="l-Scalar-Plain">stage</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>  <span class="l-Scalar-Plain">region</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ap-northeast-1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">functions</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">index.handler</span>
</span><span class='line'>    <span class="l-Scalar-Plain">events</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ANY /</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http</span><span class="p-Indicator">:</span> <span class="s">&#39;ANY</span><span class="nv"> </span><span class="s">{proxy+}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>関数をデプロイする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>serverless deploy
</span><span class='line'>...snip...
</span><span class='line'>Service Information
</span><span class='line'>service: my-express-application
</span><span class='line'>stage: dev
</span><span class='line'>region: ap-northeast-1
</span><span class='line'>stack: my-express-application-dev
</span><span class='line'>api keys:
</span><span class='line'>  None
</span><span class='line'>endpoints:
</span><span class='line'>  ANY - https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/dev
</span><span class='line'>  ANY - https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/dev/<span class="o">{</span>proxy+<span class="o">}</span>
</span><span class='line'>functions:
</span><span class='line'>  app: my-express-application-dev-app
</span></code></pre></td></tr></table></div></figure>


<p>数分後にデプロイが完了し、<code>endpoints</code> の情報が出力される。
この URL へアクセスし、動作確認する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -X GET https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/dev
</span><span class='line'><span class="o">{</span><span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;00001&quot;</span>,<span class="s2">&quot;message&quot;</span>:<span class="s2">&quot;Hello World!&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>アプリケーションで定義した JSON が返ってくる。</p>

<h2>参考</h2>

<ul>
<li><a href="https://serverless.com/framework/docs/providers/aws/guide/quick-start/">Serverless Framework &ndash; AWS Lambda Guide &ndash; Quick Start</a></li>
<li><a href="https://serverless.com/framework/docs/providers/aws/guide/credentials/">Serverless Framework &ndash; AWS Lambda Guide &ndash; Credentials</a></li>
<li><a href="https://serverless.com/blog/serverless-express-rest-api/">Deploy a REST API using Serverless, Express and Node.js</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kong でアクセス制御]]></title>
    <link href="http://momota.github.io/blog/2018/10/29/acl-on-kong/"/>
    <updated>2018-10-29T14:02:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/10/29/acl-on-kong</id>
    <content type="html"><![CDATA[<p><img src="http://momota.github.io/images/20181029_acl-on-kong/kong-diag.png" alt="kong diagram" /></p>

<p>Kong を利用して、各 API に対して上記のようなアクセスを制御する。</p>

<ul>
<li>Consumer <code>aaa</code> は API a に対してアクセスできる。しかし、API b にはアクセスできない。</li>
<li>Consumer <code>bbb</code> は API b に対してアクセスできる。しかし、API a にはアクセスできない。</li>
</ul>


<p>Kong のプラグイン <code>key-auth</code> と <code>acl</code> により実装する。</p>

<p>各設定をまとめると以下。</p>

<table>
<thead>
<tr>
<th>ユーザ </th>
<th> service </th>
<th> route (kong path) </th>
<th> api key   </th>
<th> consumer </th>
<th> group</th>
</tr>
</thead>
<tbody>
<tr>
<td>aaa    </td>
<td> aaa-api </td>
<td> /aaa              </td>
<td> aaaaaaaaa </td>
<td> aaa      </td>
<td> aaa-group</td>
</tr>
<tr>
<td>bbb    </td>
<td> bbb-api </td>
<td> /bbb              </td>
<td> bbbbbbbbb </td>
<td> bbb      </td>
<td> bbb-group</td>
</tr>
</tbody>
</table>


<!-- more -->


<h2>Service の設定</h2>

<p>API a の service を定義する。</p>

<p>Service 名は <code>aaa-api</code>, 実体は mockbin.org。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST --url http://localhost:8001/services <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;name=aaa-api&quot;</span> <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;url=http://mockbin.org&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 06:47:50 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 251
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;host&quot;</span>: <span class="s2">&quot;mockbin.org&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540536470,
</span><span class='line'>  <span class="s2">&quot;connect_timeout&quot;</span>: 60000,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;b371024b-cebf-4065-a1bf-58ed9aad8dce&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;protocol&quot;</span>: <span class="s2">&quot;http&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;aaa-api&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;read_timeout&quot;</span>: 60000,
</span><span class='line'>  <span class="s2">&quot;port&quot;</span>: 80,
</span><span class='line'>  <span class="s2">&quot;path&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;updated_at&quot;</span>: 1540536470,
</span><span class='line'>  <span class="s2">&quot;retries&quot;</span>: 5,
</span><span class='line'>  <span class="s2">&quot;write_timeout&quot;</span>: 60000
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>API b の service を定義する。</p>

<p>Service 名は <code>bbb-api</code>, 実体は www.gaitameonline.com。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/services/ <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;name=bbb-api&quot;</span> <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;url=https://www.gaitameonline.com/rateaj/getrate&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:08:42 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 278
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;host&quot;</span>: <span class="s2">&quot;www.gaitameonline.com&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540537722,
</span><span class='line'>  <span class="s2">&quot;connect_timeout&quot;</span>: 60000,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;1d85e93c-8bc7-46f8-afed-a864ea8e0340&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;protocol&quot;</span>: <span class="s2">&quot;https&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;bbb-api&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;read_timeout&quot;</span>: 60000,
</span><span class='line'>  <span class="s2">&quot;port&quot;</span>: 443,
</span><span class='line'>  <span class="s2">&quot;path&quot;</span>: <span class="s2">&quot;/rateaj/getrate&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;updated_at&quot;</span>: 1540537722,
</span><span class='line'>  <span class="s2">&quot;retries&quot;</span>: 5,
</span><span class='line'>  <span class="s2">&quot;write_timeout&quot;</span>: 60000
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Route の定義</h2>

<p>API a に route を設定する。</p>

<p>Consumer <code>aaa</code> には、Kong の <code>/aaa</code> という PATH を公開したいので、<code>paths[]=/aaa</code> を定義する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/services/aaa-api/routes <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;paths[]=/aaa&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 06:55:40 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 284
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540536940,
</span><span class='line'>  <span class="s2">&quot;strip_path&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>  <span class="s2">&quot;hosts&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;preserve_host&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>  <span class="s2">&quot;regex_priority&quot;</span>: 0,
</span><span class='line'>  <span class="s2">&quot;updated_at&quot;</span>: 1540536940,
</span><span class='line'>  <span class="s2">&quot;paths&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;/aaa&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;service&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;b371024b-cebf-4065-a1bf-58ed9aad8dce&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;methods&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;protocols&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;http&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;https&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;8ecba70c-41c8-4152-b2c1-5caaca7e42ac&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>API b にも同様に route を設定する。
Consumer <code>bbb</code> に、Kong の <code>/bbb</code> という PATHを公開する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/services/bbb-api/routes <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;paths[]=/bbb&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:12:23 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 284
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540537943,
</span><span class='line'>  <span class="s2">&quot;strip_path&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>  <span class="s2">&quot;hosts&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;preserve_host&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>  <span class="s2">&quot;regex_priority&quot;</span>: 0,
</span><span class='line'>  <span class="s2">&quot;updated_at&quot;</span>: 1540537943,
</span><span class='line'>  <span class="s2">&quot;paths&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;/bbb&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;service&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;1d85e93c-8bc7-46f8-afed-a864ea8e0340&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;methods&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;protocols&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;http&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;https&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;6bea20ce-39c3-48ad-a912-948b33764453&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでで、以下のようなプロキシ設定ができた</p>

<table>
<thead>
<tr>
<th>アクセス先                </th>
<th> プロキシ先</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://localhost:8000/aaa">http://localhost:8000/aaa</a> </td>
<td> <a href="http://mockbin.org">http://mockbin.org</a></td>
</tr>
<tr>
<td><a href="http://localhost:8000/bbb">http://localhost:8000/bbb</a> </td>
<td> <a href="https://www.gaitameonline.com/rateaj/getrate">https://www.gaitameonline.com/rateaj/getrate</a></td>
</tr>
</tbody>
</table>


<h2>key-auth プラグインによる API キー認証設定</h2>

<p>key-auth プラグインを有効化し、API キーがない場合はアクセス拒否する。</p>

<p>各 service に対して有効化する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/services/aaa-api/plugins --data <span class="s2">&quot;name=key-auth&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:15:31 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 276
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540538131449,
</span><span class='line'>  <span class="s2">&quot;config&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;key_in_body&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;run_on_preflight&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;anonymous&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;hide_credentials&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;key_names&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;apikey&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;d54ca015-295b-4c5a-a8bf-718f05a80d3c&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;service_id&quot;</span>: <span class="s2">&quot;b371024b-cebf-4065-a1bf-58ed9aad8dce&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;key-auth&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;enabled&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/services/bbb-api/plugins --data <span class="s2">&quot;name=key-auth&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:16:19 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 276
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540538179280,
</span><span class='line'>  <span class="s2">&quot;config&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;key_in_body&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;run_on_preflight&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;anonymous&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;hide_credentials&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;key_names&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;apikey&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;dd6fbb6c-29dd-47ad-b4b1-ac5f82065b20&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;service_id&quot;</span>: <span class="s2">&quot;1d85e93c-8bc7-46f8-afed-a864ea8e0340&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;key-auth&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;enabled&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>API キーがないとアクセスできないことを検証する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET http://localhost:8000/aaa
</span><span class='line'>HTTP/1.1 401 Unauthorized
</span><span class='line'>Date: Fri, 26 Oct 2018 07:16:35 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>WWW-Authenticate: Key <span class="nv">realm</span><span class="o">=</span><span class="s2">&quot;kong&quot;</span>
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 41
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;No API key found in request&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -i -X GET http://localhost:8000/bbb
</span><span class='line'>HTTP/1.1 401 Unauthorized
</span><span class='line'>Date: Fri, 26 Oct 2018 07:17:05 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>WWW-Authenticate: Key <span class="nv">realm</span><span class="o">=</span><span class="s2">&quot;kong&quot;</span>
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 41
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;No API key found in request&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Consumer の定義</h2>

<p>Consumer <code>aaa</code> と <code>bbb</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/consumers <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;username=aaa&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:18:35 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 104
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;custom_id&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540432512,
</span><span class='line'>  <span class="s2">&quot;username&quot;</span>: <span class="s2">&quot;aaa&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;3cb5f512-ad07-4f27-9aed-4ddff00a020e&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/consumers <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;username=bbb&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:18:40 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 104
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;custom_id&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540538320,
</span><span class='line'>  <span class="s2">&quot;username&quot;</span>: <span class="s2">&quot;bbb&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;9f8e8674-8d0d-43c9-8c58-59331949e0bd&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各 Consumer に API キーを発行する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/consumers/aaa/key-auth --data <span class="s2">&quot;key=aaaaaaaaa&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:22:12 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 144
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;c3c822ba-b676-48fe-b0ec-cf2507ec37d6&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540538532052,
</span><span class='line'>  <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;aaaaaaaaa&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;consumer_id&quot;</span>: <span class="s2">&quot;3cb5f512-ad07-4f27-9aed-4ddff00a020e&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/consumers/bbb/key-auth --data <span class="s2">&quot;key=bbbbbbbbb&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:22:30 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 144
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;2102cddb-8b79-4c6d-bd77-a942430a0bb4&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540538550275,
</span><span class='line'>  <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;bbbbbbbbb&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;consumer_id&quot;</span>: <span class="s2">&quot;9f8e8674-8d0d-43c9-8c58-59331949e0bd&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上の設定で、API キーがあれば API a, API b にはアクセスできるようになった。
しかし、Consumer <code>aaa</code> の API キーで、API a および API b の双方にアクセスできる。
Consumer <code>bbb</code> も双方の API にアクセスできる。</p>

<p>アクセス制御するために、ACL プラグインを利用する。</p>

<h2>acl プラグインの有効化</h2>

<p>acl プラグインを利用することで、service や route 単位のアクセス制御が可能になる。
Consumer をグループに所属させ、グループ単位にアクセス許可する (<code>config.whitelist</code> に許可するグループを定義する) か、アクセス拒否する(<code>config.blacklist</code> に拒否するグループを定義する)。</p>

<p>ここでは、consumer <code>aaa</code> をグループ <code>aaa-group</code> へ、consumer <code>bbb</code> を <code>bbb-group</code> へ所属させ、各サービスへ許可設定をする。</p>

<p>まずは、各サービスに対して、acl プラグインを有効化する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/services/aaa-api/plugins <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;name=acl&quot;</span> <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;config.whitelist=aaa-group&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:41:16 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 217
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540539676065,
</span><span class='line'>  <span class="s2">&quot;config&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;whitelist&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;acl-group&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;hide_groups_header&quot;</span>: <span class="nb">false</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;8625c0cf-ad86-4416-b3f9-08cfb4224fe4&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;service_id&quot;</span>: <span class="s2">&quot;b371024b-cebf-4065-a1bf-58ed9aad8dce&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;acl&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;enabled&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/services/bbb-api/plugins <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;name=acl&quot;</span> <span class="se">\</span>
</span><span class='line'>&gt; --data <span class="s2">&quot;config.whitelist=bbb-group&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:41:52 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 217
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540539712346,
</span><span class='line'>  <span class="s2">&quot;config&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;whitelist&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;bbb-group&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;hide_groups_header&quot;</span>: <span class="nb">false</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;d01dfc1e-5a60-4cf5-a8d5-a4d2dd974a4a&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;service_id&quot;</span>: <span class="s2">&quot;1d85e93c-8bc7-46f8-afed-a864ea8e0340&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;acl&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;enabled&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各 consumer にグループを設定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/consumers/aaa/acls --data <span class="s2">&quot;group=aaa-group&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:49:50 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 146
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;group&quot;</span>: <span class="s2">&quot;aaa-group&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540540190325,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;32928438-8d23-4efe-b457-d735be430f7e&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;consumer_id&quot;</span>: <span class="s2">&quot;3cb5f512-ad07-4f27-9aed-4ddff00a020e&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>curl -i -X POST http://localhost:8001/consumers/bbb/acls --data <span class="s2">&quot;group=bbb-group&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Fri, 26 Oct 2018 07:50:09 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 146
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;group&quot;</span>: <span class="s2">&quot;bbb-group&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540540209260,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;32db4c2b-2c2e-4f20-b869-d9e784fd8a6b&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;consumer_id&quot;</span>: <span class="s2">&quot;9f8e8674-8d0d-43c9-8c58-59331949e0bd&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Consumer <code>aaa</code> が API a にはアクセスでき、API b にはアクセスできないことを検証する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET http://localhost:8000/aaa --header <span class="s2">&quot;apikey:aaaaaaaaa&quot;</span>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: text/html; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Content-Length: 10750
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Server: openresty/1.13.6.2
</span><span class='line'>Date: Fri, 26 Oct 2018 07:52:40 GMT
</span><span class='line'>Etag: W/<span class="s2">&quot;29fe-zRGDbSTAzeA2BElashPm2g&quot;</span>
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Via: kong/0.14.1
</span><span class='line'>X-Kong-Upstream-Status: 200
</span><span class='line'>X-Kong-Upstream-Latency: 288
</span><span class='line'>X-Kong-Proxy-Latency: 587
</span><span class='line'>Kong-Request-ID: b85769d55d4927681238e50b07b6ba8c
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span>&gt;&lt;title&gt;Mockbin by Mashape&lt;/title&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/css/bootstrap.min.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,600|Source+Code+Pro:200,300,400,500,600,700,900&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/static/main.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/zeroclipboard/2.2.0/ZeroClipboard.min.js&quot;</span>&gt;&lt;/script&gt;&lt;meta http-equiv<span class="o">=</span><span class="s2">&quot;X-UA-Compatible&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;IE=edge&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;robots&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;index,follow&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;name&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:title&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:title&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;author&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://www.mashape.com/&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;author&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:creator&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;@Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;image&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:image&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:image:src&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:card&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;summary_large_image&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:site&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;@mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:domain&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;mockbin.org&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;canonical&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:url&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:url&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:type&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;website&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:site_name&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;fb:admins&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;227304446&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;fb:admins&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;576641408&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;shortcut icon&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/favicon.ico&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;icon&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;image/x-icon&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/favicon.ico&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,800,700,600,300|Source+Code+Pro:200,300,400,500,600,700,900&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/style.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;google-site-verification&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;OIx3DxcNRJ_Kyd7hAtGRhZnggKpv6DRWutY7Ih9R3Ww&quot;</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;header&gt;&lt;nav <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar navbar-default&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-header&quot;</span>&gt;&lt;button <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> data-toggle<span class="o">=</span><span class="s2">&quot;collapse&quot;</span> data-target<span class="o">=</span><span class="s2">&quot;#navbar&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-toggle collapsed&quot;</span>&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;/button&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-brand logo&quot;</span>&gt;&lt;span&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/&quot;</span>&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;logo fa fa-terminal&quot;</span>&gt;&lt;/span&gt; mockbin&lt;/a&gt; &lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;text-muted&quot;</span>&gt;by &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://www.mashape.com&quot;</span>&gt;Mashape&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;navbar&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;collapse navbar-collapse&quot;</span>&gt;&lt;ul <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;nav navbar-nav navbar-right&quot;</span>&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/docs&quot;</span>&gt;Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span>&gt;Create Bin&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/Mashape/mockbin&quot;</span>&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/nav&gt;&lt;/header&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;home&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;showcase&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;h1&gt;Mockbin&lt;/h1&gt;&lt;p <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;col-lg-offset-2 col-lg-8 lead&quot;</span>&gt;Mockbin allows you to generate &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span>&gt;custom endpoints&lt;/a&gt; to <span class="nb">test</span>, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn-toolbar&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/bbe7f656-12d6-4877-9fa8-5cd61f9522a9/view&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-primary&quot;</span>&gt;View Sample Bin&lt;/a&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span>&gt;Create Bin&lt;/a&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#example&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-primary hidden-xs&quot;</span>&gt;Send a Request&lt;/a&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;text-center&quot;</span>&gt;Feature Highlights&lt;/h2&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;row features&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;col-md-6&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-left&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/public/friendly.png&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-object&quot;</span>&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-body&quot;</span>&gt;&lt;h4 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-heading&quot;</span>&gt;Mock Custom Endpoints&lt;/h4&gt;&lt;p&gt;Mock custom endpoints using any &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://ahmadnassri.github.io/har-resources/&quot;</span> <span class="nv">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span>&gt;HTTP Archive <span class="o">(</span>HAR<span class="o">)</span>&lt;/a&gt; response object &lt;em&gt;<span class="o">(</span>can be used as webhooks, api mocks, or anything you want!<span class="o">)</span>&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/docs&quot;</span>&gt;Learn More &lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;fa fa-angle-right&quot;</span>&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-left&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/public/formats.png&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-object&quot;</span>&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-body&quot;</span>&gt;&lt;h4 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-heading&quot;</span>&gt;JSON, XML, YAML, HTML&lt;/h4&gt;&lt;p&gt;Don<span class="s1">&#39;t like JSON? No problem! Mockbin supports output in JSON, YAML and XML, as well as an HTML view for in-browser testing&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs#content-negotiation&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/history.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Log and Inspect Calls&lt;/h4&gt;&lt;p&gt;Log and inspect incoming calls to your custom endpoints &lt;em&gt;(get detailed view to how clients are calling your api/webhook)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/mock.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Custom HTTP Method&lt;/h4&gt;&lt;p&gt;No longer are you limited to &lt;code&gt;GET&lt;/code&gt; &amp;amp; &lt;code&gt;POST&lt;/code&gt;, Mockbin accepts all standard Methods and allows method overriding&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs#http-methods&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/inspect.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;CORS Headers&lt;/h4&gt;&lt;p&gt;Debug your front-end JavaScript HTTP calls from any domain, Mockbin will dynamically generate Cross-Origin resource sharing headers&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/har.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;HTTP Archive (HAR)&lt;/h4&gt;&lt;p&gt;Mockbin relies on the popular &lt;a href=&quot;https://ahmadnassri.github.io/har-resources/&quot; target=&quot;_blank&quot;&gt;HTTP Archive (HAR)&lt;/a&gt; format to create mock endpoints (Bins), import data and describe HTTP call logs.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2 class=&quot;text-center&quot;&gt;Test using your preferred language:&lt;/h2&gt;&lt;iframe id=&quot;example&quot; src=&quot;https://api.apiembed.com/?source=http://mockbin.org/public/samples/request.json&amp;amp;targets=all&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; width=&quot;100%&quot; height=&quot;500&quot; seamless class=&quot;embed&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;footer class=&quot;hidden-xs&quot;&gt;&lt;nav class=&quot;navbar navbar-default navbar-fixed-bottom&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;navbar-text&quot;&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin&quot; data-icon=&quot;octicon-star&quot; data-count-href=&quot;/Mashape/mockbin/stargazers&quot; data-count-api=&quot;/repos/Mashape/mockbin#stargazers_count&quot; class=&quot;github-button&quot;&gt;Star&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin&quot; data-icon=&quot;octicon-eye&quot; data-count-href=&quot;/Mashape/mockbin/watchers&quot; data-count-api=&quot;/repos/Mashape/mockbin#subscribers_count&quot; class=&quot;github-button&quot;&gt;Watch&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin/issues&quot; data-icon=&quot;octicon-issue-opened&quot; data-count-api=&quot;/repos/Mashape/mockbin#open_issues_count&quot; class=&quot;github-button&quot;&gt;Issue&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;nav navbar-right navbar-text hidden-xs&quot;&gt;&lt;a href=&quot;https://twitter.com/share&quot; data-url=&quot;http://mockbin.org&quot; data-via=&quot;Mashape&quot; data-related=&quot;Mashape&quot; data-hashtags=&quot;Mock, Test, Track, HTTP&quot; data-dnt=&quot;true&quot; class=&quot;twitter-share-button&quot;&gt;Tweet&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/nav&gt;&lt;/footer&gt;&lt;script type=&quot;text/javascript&quot; id=&quot;twitter-wjs&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; id=&quot;github-bjs&quot; src=&quot;https://buttons.github.io/buttons.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//mashape.github.io/notification-bar/embed.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&amp;&amp;console.error&amp;&amp;console.error(&quot;Segment snippet included twice.&quot;);else{analytics.invoked=!0;analytics.methods=[&quot;trackSubmit&quot;,&quot;trackClick&quot;,&quot;trackLink&quot;,&quot;trackForm&quot;,&quot;pageview&quot;,&quot;identify&quot;,&quot;group&quot;,&quot;track&quot;,&quot;ready&quot;,&quot;alias&quot;,&quot;page&quot;,&quot;once&quot;,&quot;off&quot;,&quot;on&quot;];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t&lt;analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement(&quot;script&quot;);e.type=&quot;text/javascript&quot;;e.async=!0;e.src=(&quot;https:&quot;===document.location.protocol?&quot;https://&quot;:&quot;http://&quot;)+&quot;cdn.segment.com/analytics.js/v1/&quot;+t+&quot;/analytics.min.js&quot;;var n=document.getElementsByTagName(&quot;script&quot;)[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION=&quot;3.0.1&quot;;</span>
</span><span class='line'><span class="s1">  analytics.load(&#39;</span>tUiM2iBCz991uF4rDF0a4WSr6NEjiVuU<span class="err">&#39;</span><span class="o">)</span>;
</span><span class='line'>  analytics.page<span class="o">()</span>
</span><span class='line'><span class="o">}}()</span>;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET http://localhost:8000/bbb --header <span class="s2">&quot;apikey: aaaaaaaaa&quot;</span>
</span><span class='line'>HTTP/1.1 403 Forbidden
</span><span class='line'>Date: Fri, 26 Oct 2018 07:53:19 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 46
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;You cannot consume this service&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>アクセス制御が効いていることを確認できた。</p>

<h2>関連</h2>

<ul>
<li><a href="http://momota.github.io/blog/2018/10/26/kong/">API アグリゲーション： Kong &ndash; momota.txt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API アグリゲーション: Kong]]></title>
    <link href="http://momota.github.io/blog/2018/10/26/kong/"/>
    <updated>2018-10-26T11:55:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/10/26/kong</id>
    <content type="html"><![CDATA[<p><img src="http://momota.github.io/images/20181026_kong/kong-logo.png" alt="kong-logo" /></p>

<h2>Kong の概要</h2>

<ul>
<li>Kong は、オープンソースの API ゲートウェイソフトウェア</li>
<li>低レイテンシー、スケーラブルなアーキテクチャ</li>
<li>フロントはNginx、バックエンド DB は PostgreSQL or Cassandra で構成される</li>
<li>複数のマイクロサービス (API) をアグリゲーションし、以下のような機能を統合的に提供する

<ul>
<li>認証

<ul>
<li>Basic 認証</li>
<li>API キー</li>
<li>OAuth2</li>
<li>JWT</li>
<li>HMAC</li>
<li>LDAP</li>
</ul>
</li>
<li>セキュリティ

<ul>
<li>ACL</li>
<li>CORS</li>
<li>IP制限</li>
<li>ボット検出</li>
<li>SSL</li>
</ul>
</li>
<li>トラフィック制御

<ul>
<li>レート制限</li>
<li>応答速度制限</li>
<li>リクエストサイズ制限</li>
</ul>
</li>
<li>変換

<ul>
<li>リクエスト変換</li>
<li>レスポンス変換</li>
<li>Correlation ID</li>
</ul>
</li>
<li>ロギング

<ul>
<li>TCP、UDP、HTTP、ファイル、Syslog、StatsD、Loggly</li>
</ul>
</li>
<li>分析

<ul>
<li>Datadog、Galileo、Runscope</li>
</ul>
</li>
<li>ロードバランシング</li>
<li>サーキットブレーカー</li>
</ul>
</li>
</ul>


<p>最近はあまり流行っていないらしく、Web 上の記事が古かったので、使い方に関するメモ。といってもほぼチュートリアル通り。</p>

<p>古いなと感じたのは、たとえば、マイクロサービスの流行りを受けてか、api という概念が service に置き換えられている感じだった。</p>

<ul>
<li>昔: <a href="http://kong-server:8001/apis">http://kong-server:8001/apis</a></li>
<li>今: <a href="http://kong-server:8001/services">http://kong-server:8001/services</a></li>
</ul>


<h2>環境</h2>

<ul>
<li>Azure</li>
<li>Kong: 0.14.1</li>
</ul>


<!-- more -->


<h2>インストール</h2>

<p>Docker や Vagrant など様々な形で提供されているので、略。</p>

<ul>
<li><a href="https://konghq.com/install/">Installations &ndash; KongHQ</a></li>
</ul>


<h2>Service の設定</h2>

<p>kong に API を追加するためには、まず Service を追加する必要がある。
Service は、Kong が管理する上流の API およびマイクロサービスを参照するための名前。</p>

<p>ここでは、<a href="https://mockbin.com/">Mockbin API</a> を利用する。
Mockbin は「echo」タイプの Web サービスで、リクエストをレスポンスとして返すサービス。</p>

<p>Service には、route を追加する必要がある。
Route は、Kongにリクエストが到達したあとに、バックエンドの service 郡に対するリクエスト送信方法を指定する。1つの service に複数の route を含めることができる。</p>

<p>Service と route を設定したら、Kong 経由の API リクエストが可能になる。</p>

<p>これらの設定は、<a href="https://docs.konghq.com/0.14.x/admin-api/">RESTful Admin API</a> を利用する。
(デフォルトでは、TCP ポート <code>:8001</code> で公開されている)</p>

<h3>Admin APIを使った service 追加</h3>

<p><a href="https://mockbin.com/">Mockbin API</a> を指す、service <code>example-service</code> を追加する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST --url http://localhost:8001/services/ --data <span class="s2">&quot;name=example-service&quot;</span> --data <span class="s2">&quot;url=http://mockbin.org&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Tue, 23 Oct 2018 10:00:25 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 259
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;host&quot;</span>: <span class="s2">&quot;mockbin.org&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540288825,
</span><span class='line'>  <span class="s2">&quot;connect_timeout&quot;</span>: 60000,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;85a5f745-2e9f-4f6e-b093-fce81476d374&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;protocol&quot;</span>: <span class="s2">&quot;http&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;example-service&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;read_timeout&quot;</span>: 60000,
</span><span class='line'>  <span class="s2">&quot;port&quot;</span>: 80,
</span><span class='line'>  <span class="s2">&quot;path&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;updated_at&quot;</span>: 1540288825,
</span><span class='line'>  <span class="s2">&quot;retries&quot;</span>: 5,
</span><span class='line'>  <span class="s2">&quot;write_timeout&quot;</span>: 60000
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Route の追加</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST --url http://localhost:8001/services/example-service/routes --data <span class="s2">&quot;hosts[]=example.com&quot;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Tue, 23 Oct 2018 10:02:16 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 290
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540288936,
</span><span class='line'>  <span class="s2">&quot;strip_path&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>  <span class="s2">&quot;hosts&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;example.com&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;preserve_host&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>  <span class="s2">&quot;regex_priority&quot;</span>: 0,
</span><span class='line'>  <span class="s2">&quot;updated_at&quot;</span>: 1540288936,
</span><span class='line'>  <span class="s2">&quot;paths&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;service&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;85a5f745-2e9f-4f6e-b093-fce81476d374&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;methods&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;protocols&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;http&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;https&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;e984a73b-6d17-4e1a-85bf-3ace25905a33&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、Kong は service を認識し、リクエストをプロキシできる準備が整った。</p>

<h3>Kong を経由してリクエスト転送</h3>

<p>Kong はデフォルトで、TCP ポート <code>:8000</code> で API 利用者のリクエストを受け付ける。
HTTP レスポンス <code>200 OK</code> が返ってきており、Kong 経由で Mockbin のレスポンスが返っている。
Kong は、HTTP ヘッダ <code>Host: &lt;given host&gt;</code> でどうフォワーディングするかを認識する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET --url http://localhost:8000/ --header <span class="s1">&#39;Host: example.com&#39;</span>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: text/html; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Content-Length: 10750
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Server: openresty/1.13.6.2
</span><span class='line'>Date: Tue, 23 Oct 2018 10:03:23 GMT
</span><span class='line'>Etag: W/<span class="s2">&quot;29fe-zRGDbSTAzeA2BElashPm2g&quot;</span>
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Via: kong/0.14.1
</span><span class='line'>X-Kong-Upstream-Status: 200
</span><span class='line'>X-Kong-Upstream-Latency: 290
</span><span class='line'>X-Kong-Proxy-Latency: 992
</span><span class='line'>Kong-Request-ID: 9e23d34d93d3b9afb7ac4c23b954a528
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span>&gt;&lt;title&gt;Mockbin by Mashape&lt;/title&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/css/bootstrap.min.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,600|Source+Code+Pro:200,300,400,500,600,700,900&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/static/main.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/zeroclipboard/2.2.0/ZeroClipboard.min.js&quot;</span>&gt;&lt;/script&gt;&lt;meta http-equiv<span class="o">=</span><span class="s2">&quot;X-UA-Compatible&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;IE=edge&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;robots&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;index,follow&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;name&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:title&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:title&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;author&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://www.mashape.com/&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;author&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:creator&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;@Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;image&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:image&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:image:src&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:card&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;summary_large_image&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:site&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;@mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:domain&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;mockbin.org&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;canonical&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:url&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:url&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:type&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;website&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:site_name&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;fb:admins&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;227304446&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;fb:admins&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;576641408&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;shortcut icon&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/favicon.ico&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;icon&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;image/x-icon&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/favicon.ico&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,800,700,600,300|Source+Code+Pro:200,300,400,500,600,700,900&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/style.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;google-site-verification&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;OIx3DxcNRJ_Kyd7hAtGRhZnggKpv6DRWutY7Ih9R3Ww&quot;</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;header&gt;&lt;nav <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar navbar-default&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-header&quot;</span>&gt;&lt;button <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> data-toggle<span class="o">=</span><span class="s2">&quot;collapse&quot;</span> data-target<span class="o">=</span><span class="s2">&quot;#navbar&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-toggle collapsed&quot;</span>&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;/button&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-brand logo&quot;</span>&gt;&lt;span&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/&quot;</span>&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;logo fa fa-terminal&quot;</span>&gt;&lt;/span&gt; mockbin&lt;/a&gt; &lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;text-muted&quot;</span>&gt;by &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://www.mashape.com&quot;</span>&gt;Mashape&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;navbar&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;collapse navbar-collapse&quot;</span>&gt;&lt;ul <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;nav navbar-nav navbar-right&quot;</span>&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/docs&quot;</span>&gt;Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span>&gt;Create Bin&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/Mashape/mockbin&quot;</span>&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/nav&gt;&lt;/header&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;home&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;showcase&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;h1&gt;Mockbin&lt;/h1&gt;&lt;p <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;col-lg-offset-2 col-lg-8 lead&quot;</span>&gt;Mockbin allows you to generate &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span>&gt;custom endpoints&lt;/a&gt; to <span class="nb">test</span>, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn-toolbar&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/bbe7f656-12d6-4877-9fa8-5cd61f9522a9/view&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-primary&quot;</span>&gt;View Sample Bin&lt;/a&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span>&gt;Create Bin&lt;/a&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#example&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-primary hidden-xs&quot;</span>&gt;Send a Request&lt;/a&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;text-center&quot;</span>&gt;Feature Highlights&lt;/h2&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;row features&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;col-md-6&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-left&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/public/friendly.png&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-object&quot;</span>&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-body&quot;</span>&gt;&lt;h4 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-heading&quot;</span>&gt;Mock Custom Endpoints&lt;/h4&gt;&lt;p&gt;Mock custom endpoints using any &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://ahmadnassri.github.io/har-resources/&quot;</span> <span class="nv">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span>&gt;HTTP Archive <span class="o">(</span>HAR<span class="o">)</span>&lt;/a&gt; response object &lt;em&gt;<span class="o">(</span>can be used as webhooks, api mocks, or anything you want!<span class="o">)</span>&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/docs&quot;</span>&gt;Learn More &lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;fa fa-angle-right&quot;</span>&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-left&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/public/formats.png&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-object&quot;</span>&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-body&quot;</span>&gt;&lt;h4 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-heading&quot;</span>&gt;JSON, XML, YAML, HTML&lt;/h4&gt;&lt;p&gt;Don<span class="s1">&#39;t like JSON? No problem! Mockbin supports output in JSON, YAML and XML, as well as an HTML view for in-browser testing&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs#content-negotiation&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/history.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Log and Inspect Calls&lt;/h4&gt;&lt;p&gt;Log and inspect incoming calls to your custom endpoints &lt;em&gt;(get detailed view to how clients are calling your api/webhook)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/mock.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Custom HTTP Method&lt;/h4&gt;&lt;p&gt;No longer are you limited to &lt;code&gt;GET&lt;/code&gt; &amp;amp; &lt;code&gt;POST&lt;/code&gt;, Mockbin accepts all standard Methods and allows method overriding&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs#http-methods&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/inspect.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;CORS Headers&lt;/h4&gt;&lt;p&gt;Debug your front-end JavaScript HTTP calls from any domain, Mockbin will dynamically generate Cross-Origin resource sharing headers&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/har.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;HTTP Archive (HAR)&lt;/h4&gt;&lt;p&gt;Mockbin relies on the popular &lt;a href=&quot;https://ahmadnassri.github.io/har-resources/&quot; target=&quot;_blank&quot;&gt;HTTP Archive (HAR)&lt;/a&gt; format to create mock endpoints (Bins), import data and describe HTTP call logs.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2 class=&quot;text-center&quot;&gt;Test using your preferred language:&lt;/h2&gt;&lt;iframe id=&quot;example&quot; src=&quot;https://api.apiembed.com/?source=http://mockbin.org/public/samples/request.json&amp;amp;targets=all&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; width=&quot;100%&quot; height=&quot;500&quot; seamless class=&quot;embed&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;footer class=&quot;hidden-xs&quot;&gt;&lt;nav class=&quot;navbar navbar-default navbar-fixed-bottom&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;navbar-text&quot;&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin&quot; data-icon=&quot;octicon-star&quot; data-count-href=&quot;/Mashape/mockbin/stargazers&quot; data-count-api=&quot;/repos/Mashape/mockbin#stargazers_count&quot; class=&quot;github-button&quot;&gt;Star&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin&quot; data-icon=&quot;octicon-eye&quot; data-count-href=&quot;/Mashape/mockbin/watchers&quot; data-count-api=&quot;/repos/Mashape/mockbin#subscribers_count&quot; class=&quot;github-button&quot;&gt;Watch&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin/issues&quot; data-icon=&quot;octicon-issue-opened&quot; data-count-api=&quot;/repos/Mashape/mockbin#open_issues_count&quot; class=&quot;github-button&quot;&gt;Issue&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;nav navbar-right navbar-text hidden-xs&quot;&gt;&lt;a href=&quot;https://twitter.com/share&quot; data-url=&quot;http://mockbin.org&quot; data-via=&quot;Mashape&quot; data-related=&quot;Mashape&quot; data-hashtags=&quot;Mock, Test, Track, HTTP&quot; data-dnt=&quot;true&quot; class=&quot;twitter-share-button&quot;&gt;Tweet&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/nav&gt;&lt;/footer&gt;&lt;script type=&quot;text/javascript&quot; id=&quot;twitter-wjs&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; id=&quot;github-bjs&quot; src=&quot;https://buttons.github.io/buttons.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//mashape.github.io/notification-bar/embed.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&amp;&amp;console.error&amp;&amp;console.error(&quot;Segment snippet included twice.&quot;);else{analytics.invoked=!0;analytics.methods=[&quot;trackSubmit&quot;,&quot;trackClick&quot;,&quot;trackLink&quot;,&quot;trackForm&quot;,&quot;pageview&quot;,&quot;identify&quot;,&quot;group&quot;,&quot;track&quot;,&quot;ready&quot;,&quot;alias&quot;,&quot;page&quot;,&quot;once&quot;,&quot;off&quot;,&quot;on&quot;];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t&lt;analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement(&quot;script&quot;);e.type=&quot;text/javascript&quot;;e.async=!0;e.src=(&quot;https:&quot;===document.location.protocol?&quot;https://&quot;:&quot;http://&quot;)+&quot;cdn.segment.com/analytics.js/v1/&quot;+t+&quot;/analytics.min.js&quot;;var n=document.getElementsByTagName(&quot;script&quot;)[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION=&quot;3.0.1&quot;;</span>
</span><span class='line'><span class="s1">  analytics.load(&#39;</span>tUiM2iBCz991uF4rDF0a4WSr6NEjiVuU<span class="err">&#39;</span><span class="o">)</span>;
</span><span class='line'>  analytics.page<span class="o">()</span>
</span><span class='line'><span class="o">}}()</span>;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>Service の一覧</h3>

<p>登録した service の一覧は、<a href="http://localhost:8001/services/">http://localhost:8001/services/</a> に GET リクエストを投げる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET http://localhost:8001/services/
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Date: Wed, 24 Oct 2018 06:46:28 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 282
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;next&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;data&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;host&quot;</span>: <span class="s2">&quot;mockbin.org&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;created_at&quot;</span>: 1540288825,
</span><span class='line'>      <span class="s2">&quot;connect_timeout&quot;</span>: 60000,
</span><span class='line'>      <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;85a5f745-2e9f-4f6e-b093-fce81476d374&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;protocol&quot;</span>: <span class="s2">&quot;http&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;example-service&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;read_timeout&quot;</span>: 60000,
</span><span class='line'>      <span class="s2">&quot;port&quot;</span>: 80,
</span><span class='line'>      <span class="s2">&quot;path&quot;</span>: null,
</span><span class='line'>      <span class="s2">&quot;updated_at&quot;</span>: 1540288825,
</span><span class='line'>      <span class="s2">&quot;retries&quot;</span>: 5,
</span><span class='line'>      <span class="s2">&quot;write_timeout&quot;</span>: 60000
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>プラグインの有効化</h2>

<p>Kong はプラグインにより拡張できる。
ここでは、<a href="https://docs.konghq.com/hub/kong-inc/key-auth/">key-auth plugin</a> を service に追加する。
これまでの設定では、すべてのリクエストが上流サービスに流れる。
key-auth プラグインを設定することにより、適切な API キーを持つリクエストのみがプロキシされる。</p>

<h3>key-auth プラグインの設定</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST --url http://localhost:8001/services/example-service/plugins/ --data <span class="s1">&#39;name=key-auth&#39;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Tue, 23 Oct 2018 10:05:50 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 276
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540289149992,
</span><span class='line'>  <span class="s2">&quot;config&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;key_in_body&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;run_on_preflight&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;anonymous&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;hide_credentials&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;key_names&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;apikey&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;7aadeb9d-cbc1-4480-9ea1-6771e85b9bfb&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;service_id&quot;</span>: <span class="s2">&quot;85a5f745-2e9f-4f6e-b093-fce81476d374&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;key-auth&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;enabled&quot;</span>: <span class="nb">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>key-auth プラグインは、<code>config.key_names</code> パラメータを受け付ける。
デフォルトは <code>['apikey']</code> になる。</p>

<h3>プラグイン設定の検証</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET --url http://localhost:8000/ --header <span class="s1">&#39;Host: example.com&#39;</span>
</span><span class='line'>HTTP/1.1 401 Unauthorized
</span><span class='line'>Date: Tue, 23 Oct 2018 10:06:21 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>WWW-Authenticate: Key <span class="nv">realm</span><span class="o">=</span><span class="s2">&quot;kong&quot;</span>
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 41
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;No API key found in request&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>必要な <code>apikey</code> ヘッダーまたはパラメータを指定していないため、応答は401 Unauthorized になる。</p>

<h2>Consumer の登録</h2>

<p>Kong インスタンスに consumer (APIの利用者) を追加する方法を学習します。
Consumer は API を使用する個人に関連付けられ、追跡、アクセス管理などに使用できる。</p>

<h3>RESTful APIを利用した consumer の登録</h3>

<p><code>Jason</code> という名のユーザを追加する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST --url http://localhost:8001/consumers/ --data <span class="s1">&#39;username=Jason&#39;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Tue, 23 Oct 2018 10:13:39 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 106
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;custom_id&quot;</span>: null,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540289619,
</span><span class='line'>  <span class="s2">&quot;username&quot;</span>: <span class="s2">&quot;Jason&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;a05abe3c-c397-45c6-b032-742505bce425&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Consumer へのキークレデンシャルの発行</h3>

<p><code>Jason</code> に対して、キーを作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X POST --url http://localhost:8001/consumers/Jason/key-auth/ --data <span class="s1">&#39;key=hogehogehogehoge&#39;</span>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Date: Tue, 23 Oct 2018 10:15:41 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 151
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;21eae9cb-74a3-4130-b4f2-71e2406e0187&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;created_at&quot;</span>: 1540289741055,
</span><span class='line'>  <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;hogehogehogehoge&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;consumer_id&quot;</span>: <span class="s2">&quot;a05abe3c-c397-45c6-b032-742505bce425&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クレデンシャルが有効なことを検証</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET http://localhost:8000 --header <span class="s2">&quot;Host: example.com&quot;</span> --header <span class="s2">&quot;apikey: hogehogehogehoge&quot;</span>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: text/html; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Content-Length: 10750
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Server: openresty/1.13.6.2
</span><span class='line'>Date: Tue, 23 Oct 2018 10:17:34 GMT
</span><span class='line'>Etag: W/<span class="s2">&quot;29fe-zRGDbSTAzeA2BElashPm2g&quot;</span>
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Via: kong/0.14.1
</span><span class='line'>X-Kong-Upstream-Status: 200
</span><span class='line'>X-Kong-Upstream-Latency: 296
</span><span class='line'>X-Kong-Proxy-Latency: 470
</span><span class='line'>Kong-Request-ID: 592552e61fb104c1a9d9c188882c31cf
</span><span class='line'>
</span><span class='line'>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">&quot;utf-8&quot;</span>&gt;&lt;title&gt;Mockbin by Mashape&lt;/title&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/css/bootstrap.min.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,600|Source+Code+Pro:200,300,400,500,600,700,900&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/static/main.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js&quot;</span>&gt;&lt;/script&gt;&lt;script <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://cdnjs.cloudflare.com/ajax/libs/zeroclipboard/2.2.0/ZeroClipboard.min.js&quot;</span>&gt;&lt;/script&gt;&lt;meta http-equiv<span class="o">=</span><span class="s2">&quot;X-UA-Compatible&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;IE=edge&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;robots&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;index,follow&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;name&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:title&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:title&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;author&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://www.mashape.com/&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;author&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:creator&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;@Mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:description&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin allows you to generate custom endpoints to test, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs. Made with Love by Mashape.&quot;</span>&gt;&lt;meta <span class="nv">itemprop</span><span class="o">=</span><span class="s2">&quot;image&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:image&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:image:src&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;https://mockbin.org/public/share.png&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:card&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;summary_large_image&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:site&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;@mashape&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:domain&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;mockbin.org&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;canonical&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;twitter:url&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:url&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;http://mockbin.org/&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:type&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;website&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;og:site_name&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;Mockbin by Mashape&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;fb:admins&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;227304446&quot;</span>&gt;&lt;meta <span class="nv">property</span><span class="o">=</span><span class="s2">&quot;fb:admins&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;576641408&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;shortcut icon&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/favicon.ico&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;icon&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;image/x-icon&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/favicon.ico&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,800,700,600,300|Source+Code+Pro:200,300,400,500,600,700,900&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;link <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/public/style.css&quot;</span> <span class="nv">media</span><span class="o">=</span><span class="s2">&quot;all&quot;</span>&gt;&lt;meta <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;google-site-verification&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;OIx3DxcNRJ_Kyd7hAtGRhZnggKpv6DRWutY7Ih9R3Ww&quot;</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;header&gt;&lt;nav <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar navbar-default&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-header&quot;</span>&gt;&lt;button <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> data-toggle<span class="o">=</span><span class="s2">&quot;collapse&quot;</span> data-target<span class="o">=</span><span class="s2">&quot;#navbar&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-toggle collapsed&quot;</span>&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;icon-bar&quot;</span>&gt;&lt;/span&gt;&lt;/button&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;navbar-brand logo&quot;</span>&gt;&lt;span&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/&quot;</span>&gt;&lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;logo fa fa-terminal&quot;</span>&gt;&lt;/span&gt; mockbin&lt;/a&gt; &lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;text-muted&quot;</span>&gt;by &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://www.mashape.com&quot;</span>&gt;Mashape&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;navbar&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;collapse navbar-collapse&quot;</span>&gt;&lt;ul <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;nav navbar-nav navbar-right&quot;</span>&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/docs&quot;</span>&gt;Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span>&gt;Create Bin&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/Mashape/mockbin&quot;</span>&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/nav&gt;&lt;/header&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;home&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;showcase&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;h1&gt;Mockbin&lt;/h1&gt;&lt;p <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;col-lg-offset-2 col-lg-8 lead&quot;</span>&gt;Mockbin allows you to generate &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span>&gt;custom endpoints&lt;/a&gt; to <span class="nb">test</span>, mock, and track HTTP requests &amp;amp; responses between libraries, sockets and APIs.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn-toolbar&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/bbe7f656-12d6-4877-9fa8-5cd61f9522a9/view&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-primary&quot;</span>&gt;View Sample Bin&lt;/a&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/bin/create&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span>&gt;Create Bin&lt;/a&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#example&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;btn btn-primary hidden-xs&quot;</span>&gt;Send a Request&lt;/a&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;text-center&quot;</span>&gt;Feature Highlights&lt;/h2&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;row features&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;col-md-6&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-left&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/public/friendly.png&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-object&quot;</span>&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-body&quot;</span>&gt;&lt;h4 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-heading&quot;</span>&gt;Mock Custom Endpoints&lt;/h4&gt;&lt;p&gt;Mock custom endpoints using any &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://ahmadnassri.github.io/har-resources/&quot;</span> <span class="nv">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span>&gt;HTTP Archive <span class="o">(</span>HAR<span class="o">)</span>&lt;/a&gt; response object &lt;em&gt;<span class="o">(</span>can be used as webhooks, api mocks, or anything you want!<span class="o">)</span>&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/docs&quot;</span>&gt;Learn More &lt;span <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;fa fa-angle-right&quot;</span>&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media&quot;</span>&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-left&quot;</span>&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/public/formats.png&quot;</span> <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-object&quot;</span>&gt;&lt;/div&gt;&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-body&quot;</span>&gt;&lt;h4 <span class="nv">class</span><span class="o">=</span><span class="s2">&quot;media-heading&quot;</span>&gt;JSON, XML, YAML, HTML&lt;/h4&gt;&lt;p&gt;Don<span class="s1">&#39;t like JSON? No problem! Mockbin supports output in JSON, YAML and XML, as well as an HTML view for in-browser testing&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs#content-negotiation&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/history.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Log and Inspect Calls&lt;/h4&gt;&lt;p&gt;Log and inspect incoming calls to your custom endpoints &lt;em&gt;(get detailed view to how clients are calling your api/webhook)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/mock.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Custom HTTP Method&lt;/h4&gt;&lt;p&gt;No longer are you limited to &lt;code&gt;GET&lt;/code&gt; &amp;amp; &lt;code&gt;POST&lt;/code&gt;, Mockbin accepts all standard Methods and allows method overriding&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs#http-methods&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/inspect.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;CORS Headers&lt;/h4&gt;&lt;p&gt;Debug your front-end JavaScript HTTP calls from any domain, Mockbin will dynamically generate Cross-Origin resource sharing headers&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;media&quot;&gt;&lt;div class=&quot;media-left&quot;&gt;&lt;img src=&quot;/public/har.png&quot; class=&quot;media-object&quot;&gt;&lt;/div&gt;&lt;div class=&quot;media-body&quot;&gt;&lt;h4 class=&quot;media-heading&quot;&gt;HTTP Archive (HAR)&lt;/h4&gt;&lt;p&gt;Mockbin relies on the popular &lt;a href=&quot;https://ahmadnassri.github.io/har-resources/&quot; target=&quot;_blank&quot;&gt;HTTP Archive (HAR)&lt;/a&gt; format to create mock endpoints (Bins), import data and describe HTTP call logs.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/docs&quot;&gt;Learn More &lt;span class=&quot;fa fa-angle-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr&gt;&lt;h2 class=&quot;text-center&quot;&gt;Test using your preferred language:&lt;/h2&gt;&lt;iframe id=&quot;example&quot; src=&quot;https://api.apiembed.com/?source=http://mockbin.org/public/samples/request.json&amp;amp;targets=all&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; width=&quot;100%&quot; height=&quot;500&quot; seamless class=&quot;embed&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;footer class=&quot;hidden-xs&quot;&gt;&lt;nav class=&quot;navbar navbar-default navbar-fixed-bottom&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;navbar-text&quot;&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin&quot; data-icon=&quot;octicon-star&quot; data-count-href=&quot;/Mashape/mockbin/stargazers&quot; data-count-api=&quot;/repos/Mashape/mockbin#stargazers_count&quot; class=&quot;github-button&quot;&gt;Star&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin&quot; data-icon=&quot;octicon-eye&quot; data-count-href=&quot;/Mashape/mockbin/watchers&quot; data-count-api=&quot;/repos/Mashape/mockbin#subscribers_count&quot; class=&quot;github-button&quot;&gt;Watch&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://github.com/Mashape/mockbin/issues&quot; data-icon=&quot;octicon-issue-opened&quot; data-count-api=&quot;/repos/Mashape/mockbin#open_issues_count&quot; class=&quot;github-button&quot;&gt;Issue&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;nav navbar-right navbar-text hidden-xs&quot;&gt;&lt;a href=&quot;https://twitter.com/share&quot; data-url=&quot;http://mockbin.org&quot; data-via=&quot;Mashape&quot; data-related=&quot;Mashape&quot; data-hashtags=&quot;Mock, Test, Track, HTTP&quot; data-dnt=&quot;true&quot; class=&quot;twitter-share-button&quot;&gt;Tweet&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/nav&gt;&lt;/footer&gt;&lt;script type=&quot;text/javascript&quot; id=&quot;twitter-wjs&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; id=&quot;github-bjs&quot; src=&quot;https://buttons.github.io/buttons.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//mashape.github.io/notification-bar/embed.js&quot; async defer&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&amp;&amp;console.error&amp;&amp;console.error(&quot;Segment snippet included twice.&quot;);else{analytics.invoked=!0;analytics.methods=[&quot;trackSubmit&quot;,&quot;trackClick&quot;,&quot;trackLink&quot;,&quot;trackForm&quot;,&quot;pageview&quot;,&quot;identify&quot;,&quot;group&quot;,&quot;track&quot;,&quot;ready&quot;,&quot;alias&quot;,&quot;page&quot;,&quot;once&quot;,&quot;off&quot;,&quot;on&quot;];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t&lt;analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement(&quot;script&quot;);e.type=&quot;text/javascript&quot;;e.async=!0;e.src=(&quot;https:&quot;===document.location.protocol?&quot;https://&quot;:&quot;http://&quot;)+&quot;cdn.segment.com/analytics.js/v1/&quot;+t+&quot;/analytics.min.js&quot;;var n=document.getElementsByTagName(&quot;script&quot;)[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION=&quot;3.0.1&quot;;</span>
</span><span class='line'><span class="s1">  analytics.load(&#39;</span>tUiM2iBCz991uF4rDF0a4WSr6NEjiVuU<span class="err">&#39;</span><span class="o">)</span>;
</span><span class='line'>  analytics.page<span class="o">()</span>
</span><span class='line'><span class="o">}}()</span>;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>kong 設定</h2>

<p>Kong の設定も RESTful API で確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -i -X GET http://localhost:8001
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Date: Wed, 24 Oct 2018 06:31:51 GMT
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Server: kong/0.14.1
</span><span class='line'>Content-Length: 5968
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;plugins&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;enabled_in_cluster&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;key-auth&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;available_on_server&quot;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;response-transformer&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;oauth2&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;acl&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;correlation-id&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;pre-function&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;jwt&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;cors&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;ip-restriction&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;basic-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;key-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;rate-limiting&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;request-transformer&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;http-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;file-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;hmac-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;ldap-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;datadog&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;tcp-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;zipkin&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;post-function&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;request-size-limiting&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;bot-detection&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;syslog&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;loggly&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;azure-functions&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;udp-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;response-ratelimiting&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;aws-lambda&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;statsd&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;prometheus&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;request-termination&quot;</span>: <span class="nb">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;tagline&quot;</span>: <span class="s2">&quot;Welcome to kong&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;configuration&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;plugins&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;bundled&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;admin_ssl_enabled&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;lua_ssl_verify_depth&quot;</span>: 1,
</span><span class='line'>    <span class="s2">&quot;trusted_ips&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>    <span class="s2">&quot;prefix&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;loaded_plugins&quot;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;response-transformer&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;request-termination&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;prometheus&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;ip-restriction&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;pre-function&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;jwt&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;cors&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;statsd&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;basic-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;key-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;ldap-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;aws-lambda&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;http-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;response-ratelimiting&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;hmac-auth&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;request-size-limiting&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;datadog&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;tcp-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;zipkin&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;post-function&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;bot-detection&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;acl&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;loggly&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;syslog&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;azure-functions&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;udp-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;file-log&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;request-transformer&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;correlation-id&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;rate-limiting&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;oauth2&quot;</span>: <span class="nb">true</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_username&quot;</span>: <span class="s2">&quot;bn_kong&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;admin_ssl_cert_csr_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/admin-kong-default.csr&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;ssl_cert_key&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.key&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;admin_ssl_cert_key&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/admin-kong-default.key&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;dns_resolver&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>    <span class="s2">&quot;pg_user&quot;</span>: <span class="s2">&quot;kong&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;mem_cache_size&quot;</span>: <span class="s2">&quot;128m&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_data_centers&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;dc1:2&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;dc2:3&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_admin_directives&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_password&quot;</span>: <span class="s2">&quot;******&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;custom_plugins&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>    <span class="s2">&quot;pg_host&quot;</span>: <span class="s2">&quot;127.0.0.1&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_acc_logs&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/logs/access.log&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;proxy_listen&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;0.0.0.0:80&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;0.0.0.0:443 ssl&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;client_ssl_cert_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.crt&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;ssl_cert_key_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.key&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;dns_no_sync&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;db_update_propagation&quot;</span>: 5,
</span><span class='line'>    <span class="s2">&quot;nginx_err_logs&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/logs/error.log&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_port&quot;</span>: 9042,
</span><span class='line'>    <span class="s2">&quot;dns_order&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;LAST&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;SRV&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;A&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;CNAME&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;dns_error_ttl&quot;</span>: 1,
</span><span class='line'>    <span class="s2">&quot;headers&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;server_tokens&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;latency_tokens&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;dns_stale_ttl&quot;</span>: 4,
</span><span class='line'>    <span class="s2">&quot;nginx_optimizations&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;database&quot;</span>: <span class="s2">&quot;cassandra&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;pg_database&quot;</span>: <span class="s2">&quot;kong&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_worker_processes&quot;</span>: <span class="s2">&quot;auto&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;lua_package_cpath&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;admin_acc_logs&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/logs/admin_access.log&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;lua_package_path&quot;</span>: <span class="s2">&quot;./?.lua;./?/init.lua;&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_pid&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/pids/nginx.pid&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;upstream_keepalive&quot;</span>: 60,
</span><span class='line'>    <span class="s2">&quot;cassandra_contact_points&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;client_ssl_cert_csr_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.csr&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;proxy_listeners&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;ssl&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;ip&quot;</span>: <span class="s2">&quot;0.0.0.0&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;proxy_protocol&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;port&quot;</span>: 80,
</span><span class='line'>        <span class="s2">&quot;http2&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;listener&quot;</span>: <span class="s2">&quot;0.0.0.0:80&quot;</span>
</span><span class='line'>      <span class="o">}</span>,
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;ssl&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>        <span class="s2">&quot;ip&quot;</span>: <span class="s2">&quot;0.0.0.0&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;proxy_protocol&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;port&quot;</span>: 443,
</span><span class='line'>        <span class="s2">&quot;http2&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;listener&quot;</span>: <span class="s2">&quot;0.0.0.0:443 ssl&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;proxy_ssl_enabled&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;admin_access_log&quot;</span>: <span class="s2">&quot;logs/admin_access.log&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_schema_consensus_timeout&quot;</span>: 10000,
</span><span class='line'>    <span class="s2">&quot;enabled_headers&quot;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;latency_tokens&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;X-Kong-Proxy-Latency&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;Via&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;server_tokens&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;Server&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;X-Kong-Upstream-Latency&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>      <span class="s2">&quot;X-Kong-Upstream-Status&quot;</span>: <span class="nb">false</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_ssl&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;ssl_cert_csr_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.csr&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;db_resurrect_ttl&quot;</span>: 30,
</span><span class='line'>    <span class="s2">&quot;client_ssl&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_consistency&quot;</span>: <span class="s2">&quot;ONE&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;client_max_body_size&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;admin_error_log&quot;</span>: <span class="s2">&quot;logs/error.log&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;pg_ssl_verify&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;dns_not_found_ttl&quot;</span>: 30,
</span><span class='line'>    <span class="s2">&quot;pg_ssl&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;db_update_frequency&quot;</span>: 5,
</span><span class='line'>    <span class="s2">&quot;cassandra_repl_factor&quot;</span>: 1,
</span><span class='line'>    <span class="s2">&quot;cassandra_repl_strategy&quot;</span>: <span class="s2">&quot;SimpleStrategy&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_kong_conf&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/nginx-kong.conf&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_lb_policy&quot;</span>: <span class="s2">&quot;RoundRobin&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_http_directives&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;prometheus_metrics 5m&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;lua_shared_dict&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;admin_ssl_cert&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/admin-kong-default.crt&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;kong_env&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/.kong_env&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;real_ip_header&quot;</span>: <span class="s2">&quot;X-Real-IP&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;dns_hostsfile&quot;</span>: <span class="s2">&quot;/etc/hosts&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;admin_listeners&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;ssl&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;ip&quot;</span>: <span class="s2">&quot;127.0.0.1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;proxy_protocol&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;port&quot;</span>: 8001,
</span><span class='line'>        <span class="s2">&quot;http2&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;listener&quot;</span>: <span class="s2">&quot;127.0.0.1:8001&quot;</span>
</span><span class='line'>      <span class="o">}</span>,
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;ssl&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>        <span class="s2">&quot;ip&quot;</span>: <span class="s2">&quot;127.0.0.1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;proxy_protocol&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;port&quot;</span>: 8444,
</span><span class='line'>        <span class="s2">&quot;http2&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>        <span class="s2">&quot;listener&quot;</span>: <span class="s2">&quot;127.0.0.1:8444 ssl&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;error_default_type&quot;</span>: <span class="s2">&quot;text/plain&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;ssl_cert&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.crt&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;db_cache_ttl&quot;</span>: 3600,
</span><span class='line'>    <span class="s2">&quot;admin_ssl_cert_key_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/admin-kong-default.key&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_ssl_verify&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;proxy_access_log&quot;</span>: <span class="s2">&quot;logs/access.log&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;ssl_cipher_suite&quot;</span>: <span class="s2">&quot;modern&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;real_ip_recursive&quot;</span>: <span class="s2">&quot;off&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;proxy_error_log&quot;</span>: <span class="s2">&quot;logs/error.log&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;client_ssl_cert_key_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.key&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_daemon&quot;</span>: <span class="s2">&quot;on&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;anonymous_reports&quot;</span>: <span class="nb">true</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_timeout&quot;</span>: 5000,
</span><span class='line'>    <span class="s2">&quot;nginx_proxy_directives&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>    <span class="s2">&quot;pg_port&quot;</span>: 5432,
</span><span class='line'>    <span class="s2">&quot;log_level&quot;</span>: <span class="s2">&quot;notice&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;client_body_buffer_size&quot;</span>: <span class="s2">&quot;8k&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;ssl_ciphers&quot;</span>: <span class="s2">&quot;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;lua_socket_pool_size&quot;</span>: 30,
</span><span class='line'>    <span class="s2">&quot;admin_ssl_cert_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/admin-kong-default.crt&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;cassandra_keyspace&quot;</span>: <span class="s2">&quot;bitnami_kong&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;ssl_cert_default&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/ssl/kong-default.crt&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;nginx_conf&quot;</span>: <span class="s2">&quot;/opt/bitnami/apps/kong/server/nginx.conf&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;admin_listen&quot;</span>: <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;127.0.0.1:8001&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;127.0.0.1:8444 ssl&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;0.14.1&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;node_id&quot;</span>: <span class="s2">&quot;7aac7417-40ac-426e-9b42-9f8cf4e56026&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;lua_version&quot;</span>: <span class="s2">&quot;LuaJIT 2.1.0-beta3&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;prng_seeds&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;pid: 2331&quot;</span>: 191239192120,
</span><span class='line'>    <span class="s2">&quot;pid: 2332&quot;</span>: 214860234107
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;timers&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;pending&quot;</span>: 4,
</span><span class='line'>    <span class="s2">&quot;running&quot;</span>: 0
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;hostname&quot;</span>: <span class="s2">&quot;kong-app&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>関連</h2>

<ul>
<li><a href="http://momota.github.io/blog/2018/10/29/acl-on-kong/">kong でアクセス制御 &ndash; momota.txt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows + Chrome Headless mode + Ruby + Selenium]]></title>
    <link href="http://momota.github.io/blog/2018/10/16/selenium-with-headless-mode-browser/"/>
    <updated>2018-10-16T11:31:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/10/16/selenium-with-headless-mode-browser</id>
    <content type="html"><![CDATA[<p>Selenium と Ruby によりテストの自動化であったり、入力の自動化を進めている。
コマンドラインから実行すればよいことがほとんどで、ブラウザのGUIが起動しなくてもよい。
したがって、GUI が起動しない Google Chrome の Headless モードを使った Selenium スクリプトへ順次移行していこうと思う。</p>

<p>動作の軽量化もちょっとは期待できるかも。 (比較計測はしていない)</p>

<p>以下は、関連記事。</p>

<ul>
<li><a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化： selenium と ruby &ndash; momota.txt</a></li>
<li><a href="http://momota.github.io/blog/2016/05/28/selenium-know-how/">seleniumノウハウ &ndash; momota.txt</a></li>
</ul>


<!-- more -->


<h2>環境情報</h2>

<table>
<thead>
<tr>
<th>ソフトウェア           </th>
<th> バージョン</th>
</tr>
</thead>
<tbody>
<tr>
<td>OS                     </td>
<td> Windows 10 Pro 1709</td>
</tr>
<tr>
<td>ブラウザ               </td>
<td> Google Chrome 69.0.3497.100</td>
</tr>
<tr>
<td>ChromeDriver           </td>
<td> 2.39.562718</td>
</tr>
<tr>
<td>ruby                   </td>
<td> 2.5.1p57</td>
</tr>
<tr>
<td>gem selenium-webdriver </td>
<td> (3.14.1, 3.12.0)</td>
</tr>
</tbody>
</table>


<p>Ruby と gem はインストールされているものとする。</p>

<h2>Chrome headless モードの動作確認</h2>

<p>Chrome のバージョン59以降からヘッドレスモードを搭載している。
Chrome をインストールしていない場合は、インストールする。</p>

<p>動作確認はコマンドライン (Powershell or コマンドプロンプト) から可能で、以下のように動けば OK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cd "C:\Program Files (x86)\Google\Chrome\Application"
</span><span class='line'>&gt; ls
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    ディレクトリ: C:\Program Files (x86)\Google\Chrome\Application
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Mode                LastWriteTime         Length Name
</span><span class='line'>----                -------------         ------ ----
</span><span class='line'>d-----       2018/09/21     19:12                69.0.3497.100
</span><span class='line'>d-----       2018/09/25     16:45                SetupMetrics
</span><span class='line'>-a----       2018/09/15     17:47        1378648 chrome.exe
</span><span class='line'>-a----       2018/09/25     16:45            410 chrome.VisualElementsManifest.xml
</span><span class='line'>-a----       2018/05/17     17:06         122574 master_preferences
</span><span class='line'>
</span><span class='line'>&gt; .\chrome.exe --enable-logging --headless --disable-gpu --dump-dom https://www.chromestatus.com
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html lang="en"&gt;&lt;head&gt;
</span><span class='line'>&lt;meta charset="utf-8"&gt;
</span><span class='line'>&lt;title&gt;Chrome Platform Status&lt;/title&gt;
</span><span class='line'>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0"&gt;
</span><span class='line'>
</span><span class='line'>&lt;link rel="manifest" href="http://momota.github.io/static/manifest.json"&gt;
</span><span class='line'>... (snip) ...</span></code></pre></td></tr></table></div></figure>


<p>Proxy 環境下にいる場合は、<code>--proxy-server</code> や <code>--proxy-auth</code> オプションで指定してあげればよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; .\chrome.exe --enable-logging --headless --disable-gpu --dump-dom --proxy-server=http://PROXY_HOST:PORT --proxy-auth=USER:PASSWORD https://www.chromestatus.com</span></code></pre></td></tr></table></div></figure>


<p>詳細は <a href="https://developers.google.com/web/updates/2017/04/headless-chrome?hl=ja">ヘッドレス Chrome ことはじめ | Web | Google Developers</a> のあたりを参照。</p>

<h2>ChromeDriver</h2>

<p>Selenium WebDriver は Selenium から Web ブラウザをコントロールするライブラリ群。
各ブラウザ向けに実装されていて、ChromeDriver は Chrome 用の WebDriver。</p>

<p>以下から入手し、PATHを通す。(もしくは通っているところに置く)</p>

<ul>
<li><a href="http://chromedriver.chromium.org/downloads">Downloads &ndash; ChromeDriver &ndash; WebDriver for Chrome</a></li>
</ul>


<p>コンソールからバージョンが表示できれば PATH 設定の確認になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; chromedriver.exe -v
</span><span class='line'>ChromeDriver 2.39.562718 (9a2698cba08cf5a471a29d30c8b3e12becabb0e9)</span></code></pre></td></tr></table></div></figure>


<h2>Selenium スクリプト</h2>

<p>サンプルとして、本ブログのいくつかのページのスクリーンショットを取得する。
<a href="http://momota.github.io/blog/page/2/">http://momota.github.io/blog/page/2/</a> ～ <a href="http://momota.github.io/blog/page/4/">http://momota.github.io/blog/page/4/</a> のスクリーンショットを取得してみる。</p>

<p>Headless モードといっても特段難しいことはなく、以下のように Webdriver にオプションしてあげるだけでよい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Chrome</span><span class="p">:</span><span class="ss">:Options</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--headless&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--disable-gpu&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--window-size=1929,2160&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:chrome</span><span class="p">,</span> <span class="ss">options</span><span class="p">:</span> <span class="n">options</span>
</span></code></pre></td></tr></table></div></figure>


<p>Proxy の設定が必要な場合は、以下のようにオプションで指定する。
環境変数 <code>ENV['http_proxy']</code> に設定してもだめなので注意。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+ proxy_host = &#39;PROXY_HOST&#39;</span>
</span><span class='line'><span class="gi">+ proxy_port = &#39;PORT&#39;</span>
</span><span class='line'>
</span><span class='line'>options = Selenium::WebDriver::Chrome::Options.new
</span><span class='line'>options.add_argument(&#39;--headless&#39;)
</span><span class='line'>options.add_argument(&#39;--disable-gpu&#39;)
</span><span class='line'>options.add_argument(&#39;--window-size=1929,2160&#39;)
</span><span class='line'><span class="gi">+ options.add_argument(&quot;--proxy-server=http://#{proxy_host}:#{proxy_port}&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>スクリプトとしては以下のような感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># conding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Blog</span>
</span><span class='line'>  <span class="no">SCREENSHOT_DIR</span> <span class="o">=</span> <span class="s1">&#39;./screenshot/&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="n">proxy_host</span> <span class="o">=</span> <span class="s1">&#39;PROXY_HOST&#39;</span>
</span><span class='line'>    <span class="n">proxy_port</span> <span class="o">=</span> <span class="s1">&#39;PORT&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">options</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Chrome</span><span class="p">:</span><span class="ss">:Options</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--headless&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--disable-gpu&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--window-size=1929,2160&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&quot;--proxy-server=http://</span><span class="si">#{</span><span class="n">proxy_host</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">proxy_port</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:chrome</span><span class="p">,</span> <span class="ss">options</span><span class="p">:</span> <span class="n">options</span>
</span><span class='line'>    <span class="vi">@base_url</span> <span class="o">=</span> <span class="s1">&#39;http://momota.github.io/&#39;</span>
</span><span class='line'>    <span class="vi">@accept_next_alert</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="vi">@driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">timeouts</span><span class="o">.</span><span class="n">implicit_wait</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>    <span class="vi">@verification_errors</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="no">SCREENSHOT_DIR</span><span class="p">)</span> <span class="k">unless</span> <span class="no">Dir</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="no">SCREENSHOT_DIR</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_and_screenshot</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@base_url</span><span class="si">}</span><span class="s2">blog/page/</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">/&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@driver</span><span class="o">.</span><span class="n">save_screenshot</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">SCREENSHOT_DIR</span><span class="si">}</span><span class="s2">headless_</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;access and save screenshot: </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">close</span>
</span><span class='line'>    <span class="vi">@driver</span><span class="o">.</span><span class="n">quit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ----------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># main</span>
</span><span class='line'><span class="c1"># ----------------------------------------------------------------------</span>
</span><span class='line'><span class="k">if</span> <span class="bp">__FILE__</span> <span class="o">==</span> <span class="vg">$PROGRAM_NAME</span>
</span><span class='line'>  <span class="n">blog</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">blog</span><span class="o">.</span><span class="n">get_and_screenshot</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通に <code>ruby script.rb</code> で実行すると、スクリーンショット <code>実行ディレクトリ/screeshot/headless_i.png</code> が出力される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">PS</span> <span class="o">&gt;</span> <span class="n">ls</span> <span class="o">.</span><span class="p">\</span><span class="n">screenshot</span><span class="p">\</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="err">ディレクトリ</span><span class="p">:</span> <span class="ss">C</span><span class="p">:\</span><span class="no">SOMEWHERE</span><span class="p">\</span><span class="n">screenshot</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Mode</span>                <span class="no">LastWriteTime</span>         <span class="no">Length</span> <span class="no">Name</span>
</span><span class='line'><span class="o">----</span>                <span class="o">-------------</span>         <span class="o">------</span> <span class="o">----</span>
</span><span class='line'><span class="o">-</span><span class="n">a</span><span class="o">----</span>       <span class="mi">2018</span><span class="o">/</span><span class="mi">10</span><span class="o">/</span><span class="mi">16</span>     <span class="mi">12</span><span class="p">:</span><span class="mi">39</span>         <span class="mi">438601</span> <span class="n">headless_2</span><span class="o">.</span><span class="n">png</span>
</span><span class='line'><span class="o">-</span><span class="n">a</span><span class="o">----</span>       <span class="mi">2018</span><span class="o">/</span><span class="mi">10</span><span class="o">/</span><span class="mi">16</span>     <span class="mi">12</span><span class="p">:</span><span class="mi">39</span>         <span class="mi">405054</span> <span class="n">headless_3</span><span class="o">.</span><span class="n">png</span>
</span><span class='line'><span class="o">-</span><span class="n">a</span><span class="o">----</span>       <span class="mi">2018</span><span class="o">/</span><span class="mi">10</span><span class="o">/</span><span class="mi">16</span>     <span class="mi">12</span><span class="p">:</span><span class="mi">39</span>         <span class="mi">399793</span> <span class="n">headless_4</span><span class="o">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask アプリ (チャットボット) のコンテナ化]]></title>
    <link href="http://momota.github.io/blog/2018/10/11/dockerize-flask-app/"/>
    <updated>2018-10-11T10:54:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/10/11/dockerize-flask-app</id>
    <content type="html"><![CDATA[<p>以下で作ったようなFlaskアプリ (チャットボット) をコンテナ化 (Docker) する。</p>

<ul>
<li><a href="http://momota.github.io/blog/2018/06/19/unittest/">Python unittest で Flask (チャットボット) の単体テスト &ndash; momota.txt</a></li>
</ul>


<!-- more -->


<h2>Flask アプリ</h2>

<p>Python のバージョンは 3.6。</p>

<p>Flask アプリのディレクトリ構成は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree
</span><span class='line'>.
</span><span class='line'>|____log
</span><span class='line'>| |____mattermost_bot.log
</span><span class='line'>|____mattermostbot.py</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>mattermostbot.py</code>: ボット本体</li>
<li><code>log/</code> : ログ保存用のディレクトリ</li>
</ul>


<p><code>mattermost.py</code> は簡易的なオウム返しするボットで以下のようなスクリプト。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">logging.handlers</span> <span class="kn">import</span> <span class="n">RotatingFileHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">SCRIPT_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>
</span><span class='line'><span class="n">BOT_LOG</span>    <span class="o">=</span> <span class="n">SCRIPT_DIR</span> <span class="o">+</span> <span class="s">&#39;/log/mattermost_bot.log&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/bot&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">bot</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># mattermost -&gt; bot へ送信される JSON データの取得</span>
</span><span class='line'>    <span class="n">post_dict</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">post_dict</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># JSONから token と text (ユーザが入力したメッセージ) を取得</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="n">post_dict</span><span class="p">[</span><span class="s">&#39;token&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">income_text</span> <span class="o">=</span> <span class="n">post_dict</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># income_text は `bot_name COMMAND ARGUMENT` のような形式なので</span>
</span><span class='line'>    <span class="c"># 半角スペースで分割し、それぞれの要素を変数に格納する</span>
</span><span class='line'>    <span class="n">text_array</span> <span class="o">=</span> <span class="n">income_text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bot_name</span> <span class="o">=</span> <span class="n">text_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="n">text_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">arg</span> <span class="o">=</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">text_array</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">payload_text</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># command によって処理を分岐する</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s">&quot;echo&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">payload_text</span> <span class="o">=</span> <span class="n">echo</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">payload_text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># レスポンス用の JSON を組み立てる</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="n">bot_name</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;icon_url&#39;</span><span class="p">:</span> <span class="s">&#39;http://your-server/images/bot_icon.png&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;text&#39;</span><span class="p">:</span> <span class="n">payload_text</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;MATTERMOST_TOKEN&#39;</span><span class="p">:</span> <span class="n">token</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">json_payload</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">json_payload</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ログ出力用メソッド</span>
</span><span class='line'><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="n">RotatingFileHandler</span><span class="p">(</span><span class="n">BOT_LOG</span><span class="p">,</span> <span class="n">maxBytes</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">backupCount</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>    <span class="n">formatter</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">Formatter</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(asctime)s</span><span class="se">\t</span><span class="si">%(lineno)d</span><span class="se">\t</span><span class="si">%(levelname)s</span><span class="se">\t</span><span class="si">%(name)s</span><span class="se">\t</span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="n">setFormatter</span><span class="p">(</span><span class="n">formatter</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="c"># echo command</span>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">echo</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">text</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Requirements File</h2>

<p>コンテナにインストールする必要のある Python パッケージ を <code>requirements.txt</code> に書き出す。ようは <code>pip</code> でインストールやつを列挙する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Flask</span><span class="o">==</span><span class="mf">0.12</span><span class="o">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>手で作らなくても、すでに Flask アプリを動かしている環境があれば、以下のコマンドで出力できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip freeze &gt; requirements.txt
</span></code></pre></td></tr></table></div></figure>


<h2>Dockerfile</h2>

<p>Docker イメージを生成するため、以下のような <code>Dockerfile</code> を作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FROM python:3.6
</span><span class='line'>
</span><span class='line'>ARG <span class="nv">project_dir</span><span class="o">=</span>/chatbot/
</span><span class='line'>
</span><span class='line'>ADD requirements.txt <span class="nv">$project_dir</span>
</span><span class='line'>ADD mattermostbot.py <span class="nv">$project_dir</span>
</span><span class='line'>ADD log <span class="s2">&quot;${project_dir}log&quot;</span>
</span><span class='line'>
</span><span class='line'>WORKDIR <span class="nv">$project_dir</span>
</span><span class='line'>
</span><span class='line'>RUN pip install -r requirements.txt
</span><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;python&quot;</span>, <span class="s2">&quot;mattermostbot.py&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>プロキシ環境下でビルドする場合は、以下のようにコンテナ内の環境変数を設定してあげれば良い。
追記する場所は、<code>RUN pip install -r requirements.txt</code> より前。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ARG <span class="nv">proxy_host</span><span class="o">=</span><span class="s2">&quot;proxy.co.jp&quot;</span>
</span><span class='line'>ARG <span class="nv">proxy_port</span><span class="o">=</span><span class="s2">&quot;85&quot;</span>
</span><span class='line'>ARG <span class="nv">proxy_user</span><span class="o">=</span><span class="s2">&quot;USER&quot;</span>
</span><span class='line'>ARG <span class="nv">proxy_pass</span><span class="o">=</span><span class="s2">&quot;PASSWORD&quot;</span>
</span><span class='line'>ARG <span class="nv">PROXY</span><span class="o">=</span><span class="s2">&quot;${proxy_user}:${proxy_pass}@${proxy_host}:${proxy_port}&quot;</span>
</span><span class='line'>
</span><span class='line'>ENV <span class="nv">http_proxy</span><span class="o">=</span><span class="s2">&quot;http://${PROXY}&quot;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nv">https_proxy</span><span class="o">=</span><span class="s2">&quot;https://${PROXY}&quot;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nv">ftp_proxy</span><span class="o">=</span><span class="s2">&quot;ftp://${PROXY}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Docker イメージのビルド</h2>

<p>以下のコマンドで Docker イメージをビルドする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build -t mattemost_bot:latest .
</span></code></pre></td></tr></table></div></figure>


<p>できたイメージは以下で確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker images
</span></code></pre></td></tr></table></div></figure>


<h2>コンテナの実行</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run -p 5000:5000 -it mattermost_bot
</span></code></pre></td></tr></table></div></figure>


<p>起動状態などの詳細は以下で確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker ps -a
</span></code></pre></td></tr></table></div></figure>


<h2>動作確認</h2>

<p><code>curl</code> や POSTMAN などを使って HTTP POST リクエストを投げて確認する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -X POST <span class="se">\</span>
</span><span class='line'>&gt;   http://localhost:5000/bot <span class="se">\</span>
</span><span class='line'>&gt;   -H <span class="s1">&#39;cache-control: no-cache&#39;</span> <span class="se">\</span>
</span><span class='line'>&gt;   -H <span class="s1">&#39;content-type: application/x-www-form-urlencoded&#39;</span> <span class="se">\</span>
</span><span class='line'>&gt;   -d <span class="s1">&#39;token=dummy&amp;text=botname%20echo%20hogehoge&#39;</span>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;username&quot;</span>: <span class="s2">&quot;botname&quot;</span>, <span class="s2">&quot;icon_url&quot;</span>: <span class="s2">&quot;http://your-server/images/bot_icon.png&quot;</span>, <span class="s2">&quot;text&quot;</span>: <span class="s2">&quot;hogehoge&quot;</span>, <span class="s2">&quot;MATTERMOST_TOKEN&quot;</span>: <span class="s2">&quot;dummy&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Script でサーバレスな為替レート取得クローラをつくる]]></title>
    <link href="http://momota.github.io/blog/2018/06/25/apps-script/"/>
    <updated>2018-06-25T14:35:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/06/25/apps-script</id>
    <content type="html"><![CDATA[<p><a href="https://script.google.com/home">Google Apps Script</a> (GAS) は、Google が提供する JavaScript プラットフォームで、Google apps (Calendar, Docs, Drive, Gmail, Sheets, and Slides) に対して処理する JavaScript を簡単に書ける。
Excel マクロのすごい版みたいな感覚。</p>

<p>このスクリプトからHTTP GETリクエストを出したり、受け付けたりできる。</p>

<p>今回は、この GAS を使って、無料の Web クローラをサーバレスでつくってみる。</p>

<!-- more -->


<h2>処理の流れ</h2>

<ol>
<li>GAS から為替レート API をたたく</li>
<li>取得した為替レートデータを Google Sheets へ出力する</li>
<li>上記を1分間隔で実行する。</li>
</ol>


<h2>1. GAS から為替レート API をたたく</h2>

<h3>為替レート API の確認</h3>

<p>API は <a href="https://www.gaitameonline.com/rateaj/getrate">https://www.gaitameonline.com/rateaj/getrate</a> を利用する。
ここへ HTTP GET すると以下のような JSON フォーマットが返ってくる。 (整形済み)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">quotes=[</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">high=1.9196,</span>
</span><span class='line'>      <span class="err">low=1.9162,</span>
</span><span class='line'>      <span class="err">ask=1.9212,</span>
</span><span class='line'>      <span class="err">bid=1.9195,</span>
</span><span class='line'>      <span class="err">currencyPairCode=GBPNZD,</span>
</span><span class='line'>      <span class="err">open=1.9167</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">high=82.83,</span>
</span><span class='line'>      <span class="err">low=82.35,</span>
</span><span class='line'>      <span class="err">ask=82.41,</span>
</span><span class='line'>      <span class="err">bid=82.36,</span>
</span><span class='line'>      <span class="err">currencyPairCode=CADJPY,</span>
</span><span class='line'>      <span class="err">open=82.76</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">//</span> <span class="err">...</span> <span class="err">(snip)</span> <span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSON の quotes は各通貨ペアの配列になっており、各要素に high, low, &hellip; などのフィールドがある構造になっている。</p>

<p><a href="https://www.gaitameonline.com/robots.txt">robots.txt</a> には特に言及されていないが、非常識なアクセスはしないように注意。</p>

<h3>GAS の作成</h3>

<p><a href="https://script.google.com/home">Apps Script</a> のメニューから <code>+ 新規スクリプト</code> をクリックすると、新規プロジェクトが立ち上がる。
プロジェクト名やスクリプト名は適当に変更する。 (デフォルト <code>Code.gs</code>)</p>

<p>GAS で API をたたく処理は以下のように書ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">callExchangeAPI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">now</span>      <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">url</span>      <span class="o">=</span> <span class="s2">&quot;https://www.gaitameonline.com/rateaj/getrate&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">response</span> <span class="o">=</span> <span class="nx">UrlFetchApp</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">content</span>  <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">getContentText</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">fx</span>       <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fx</span><span class="p">.</span><span class="nx">date</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fx</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fx</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UrlFetchApp.fetch(url)</code> で API の URL をたたきにいける。
<code>fx.date = now</code> で、取得した JSON に取得日時フィールド <code>date</code> を足している。</p>

<p>上記をコピペして実行する (▶ボタンを押す) と初回実行時には以下のような確認ダイアログがでるので <code>Review Permissions</code> を押して許可する。</p>

<p><img src="http://momota.github.io/images/20180625_gas/01_notice_initial_run.png" alt="01_notice_initial_run" /></p>

<p>その後、Choose an account画面で自分のアカウントを選ぶと、確認画面 <code>YOUR-PROJECT-NAME wants to access your Google Account</code> が出てくるので <code>ALLOW</code> ボタンを押す。そうすると実行できる。</p>

<p><code>Logger.log(fx)</code> 部分でログ出力しているので、メニュー <code>View</code> > <code>Logs</code> からログ出力できていることが確認できる。
ログは以下のように出力される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">18</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">24</span> <span class="mi">23</span><span class="o">:</span><span class="mi">24</span><span class="o">:</span><span class="mi">06</span><span class="o">:</span><span class="mi">486</span> <span class="nx">PDT</span><span class="p">]</span> <span class="p">{</span><span class="nx">date</span><span class="o">=</span><span class="nx">Mon</span> <span class="nx">Jun</span> <span class="mi">25</span> <span class="mi">15</span><span class="o">:</span><span class="mi">24</span><span class="o">:</span><span class="mi">06</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">09</span><span class="o">:</span><span class="mi">00</span> <span class="mi">2018</span><span class="p">,</span> <span class="nx">quotes</span><span class="o">=</span><span class="p">[{</span><span class="nx">high</span><span class="o">=</span><span class="mf">1.9224</span><span class="p">,</span> <span class="nx">low</span><span class="o">=</span><span class="mf">1.9162</span><span class="p">,</span> <span class="nx">ask</span><span class="o">=</span><span class="mf">1.9223</span><span class="p">,</span> <span class="nx">bid</span><span class="o">=</span><span class="mf">1.9206</span><span class="p">,</span> <span class="nx">currencyPairCode</span><span class="o">=</span><span class="nx">GBPNZD</span><span class="p">,</span> <span class="nx">open</span><span class="o">=</span><span class="mf">1.9167</span><span class="p">},</span> <span class="p">{</span><span class="nx">high</span><span class="o">=</span><span class="mf">82.83</span><span class="p">,</span> <span class="nx">low</span><span class="o">=</span><span class="mf">82.22</span><span class="p">,</span> <span class="nx">ask</span><span class="o">=</span><span class="mf">82.45</span><span class="p">,</span> <span class="nx">bid</span><span class="o">=</span><span class="mf">82.40</span><span class="p">,</span> <span class="nx">currencyPairCode</span><span class="o">=</span><span class="nx">CADJPY</span><span class="p">,</span> <span class="nx">open</span><span class="o">=</span><span class="mf">82.76</span><span class="p">},</span> <span class="p">{</span><span class="nx">high</span><span class="o">=</span><span class="mf">1.7870</span><span class="p">,</span> <span class="nx">low</span><span class="o">=</span><span class="mf">1.7817</span><span class="p">,</span> <span class="nx">ask</span><span class="o">=</span><span class="mf">1.7855</span><span class="p">,</span> <span class="nx">bid</span><span class="o">=</span><span class="mf">1.7846</span><span class="p">,</span> <span class="nx">currencyPairCode</span><span class="o">=</span><span class="nx">GBPAUD</span><span class="p">,</span> <span class="nx">open</span><span class="o">=</span><span class="mf">1.7817</span><span class="p">},</span>
</span><span class='line'><span class="p">...</span> <span class="nx">snip</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 取得した為替レートデータを Google Sheets へ出力する</h2>

<p>取得した為替レートを以下のように Google sheetsに出力する。</p>

<p><img src="http://momota.github.io/images/20180625_gas/03_sheet.png" alt="03_sheet" /></p>

<p>シートの 1 行目はヘッダ、列の定義は以下。通貨ペア種別すべての Ask や Bid などを取得したタイミングごとに1行で表現する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">date</span><span class="p">,</span> <span class="nx">currencyPairCode1</span><span class="p">,</span> <span class="nx">high1</span><span class="p">,</span> <span class="nx">low1</span><span class="p">,</span> <span class="nx">ask1</span><span class="p">,</span> <span class="nx">bid1</span><span class="p">,</span> <span class="nx">open1</span><span class="p">,</span> <span class="nx">currencyPairCode2</span><span class="p">,</span> <span class="nx">high2</span><span class="p">,</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>まずは、出力先にあたる Google sheets を新規作成し、その URL をコピーする。</p>

<p>個別の URL をコードに埋め込みたくないので、<code>Script properties</code> に値をセットしてそれをコードの中から利用する。</p>

<p>GAS のメニュー <code>File</code> > <code>Project properties</code> から <code>Script properties</code> タブへ移動する。
<code>+ Add row</code> のリンクから行をエントリーする。
<code>Property</code> に SHEET_URL、<code>Value</code> に先程コピーした Google sheets の URLを登録する。
登録するURL は <code>https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxxxxxxxx/edit</code> のような形式。</p>

<p>上述した <code>Script properties</code> から値を参照して、Sheet オブジェクトを取得する処理は以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SHEET_URL</span> <span class="o">=</span> <span class="nx">PropertiesService</span><span class="p">.</span><span class="nx">getScriptProperties</span><span class="p">().</span><span class="nx">getProperty</span><span class="p">(</span><span class="s1">&#39;SHEET_URL&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">SHEET_URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="s1">&#39;You should set &quot;SHEET_URL&quot; property from [File] &gt; [Project properties] &gt; [Script properties]&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sheets</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">openByUrl</span><span class="p">(</span><span class="nx">SHEET_URL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span> <span class="o">=</span> <span class="nx">sheets</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>API から取得してきた JSON データをシートに出力する。</p>

<p>シートに対して入力するには、<code>sheet.getRange(row, column).setValue(something)</code> のようにシートの行 (row) と列 (column) を指定して setValue を呼べば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">ex_json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sheet</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// データ追加行 (Sheetの最終行 + 1) を取得する</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">last_row</span> <span class="o">=</span> <span class="nx">sheet</span><span class="p">.</span><span class="nx">getLastRow</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">col</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">ex_json</span><span class="p">.</span><span class="nx">date</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">each</span><span class="p">(</span><span class="kd">var</span> <span class="nx">quote</span> <span class="k">in</span> <span class="nx">ex_json</span><span class="p">.</span><span class="nx">quotes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">currencyPairCode</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">high</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">low</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">ask</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">bid</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">open</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記をまとめると以下。
以下をコピペして実行する (▶ボタンを押す) と Google sheets に為替データが挿入される。
初回実行時に権限の確認ダイアログがでると思うが許可してあげる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Main</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">scrapeExchangeToSheet</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ex_json</span> <span class="o">=</span> <span class="nx">exchange</span><span class="p">.</span><span class="nx">callExchangeAPI</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">exchange</span><span class="p">.</span><span class="nx">writeSheets</span><span class="p">(</span><span class="nx">ex_json</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">exchange</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getSheet</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SHEET_URL</span> <span class="o">=</span> <span class="nx">PropertiesService</span><span class="p">.</span><span class="nx">getScriptProperties</span><span class="p">().</span><span class="nx">getProperty</span><span class="p">(</span><span class="s1">&#39;SHEET_URL&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">SHEET_URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="s1">&#39;You should set &quot;SHEET_URL&quot; property from [File] &gt; [Project properties] &gt; [Script properties]&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sheets</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">openByUrl</span><span class="p">(</span><span class="nx">SHEET_URL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span> <span class="o">=</span> <span class="nx">sheets</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">.</span><span class="nx">sheet</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// call exchange API</span>
</span><span class='line'>  <span class="nx">callExchangeAPI</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">now</span>      <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">url</span>      <span class="o">=</span> <span class="s2">&quot;https://www.gaitameonline.com/rateaj/getrate&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">response</span> <span class="o">=</span> <span class="nx">UrlFetchApp</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">content</span>  <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">getContentText</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">fx</span>       <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fx</span><span class="p">.</span><span class="nx">date</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fx</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Write exchange data (JSON) to the Google Sheet</span>
</span><span class='line'>  <span class="nx">writeSheets</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ex_json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">sheet</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSheet</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get last row to add exchange data</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">last_row</span> <span class="o">=</span> <span class="nx">sheet</span><span class="p">.</span><span class="nx">getLastRow</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">col</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">ex_json</span><span class="p">.</span><span class="nx">date</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">each</span><span class="p">(</span><span class="kd">var</span> <span class="nx">quote</span> <span class="k">in</span> <span class="nx">ex_json</span><span class="p">.</span><span class="nx">quotes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">currencyPairCode</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">high</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">low</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">ask</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">bid</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">last_row</span><span class="p">,</span> <span class="nx">col</span><span class="o">++</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">quote</span><span class="p">.</span><span class="nx">open</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. 上記を1分間隔で実行する。</h2>

<p>上記の処理を定期的に実行する。</p>

<p>時計マークのアイコンをクリックする。もしくは、メニュー <code>Edit</code> > <code>Current project's trigger</code> を選択する。
そうするとダイアログが出てくるので、<code>No triggers set up. Click here to add one now.</code> をクリックする。</p>

<p><code>Run</code> にはメイン処理の <code>scrapeExchangeToSheet</code>, <code>Events</code> には好きな起動時間を設定できる。
ここでは1分間隔で実行するため、<code>Time-driven : Minutes timer: Every minute</code> を選択する。</p>

<p>1分間隔で Google sheets にデータが挿入されていることが確認できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python unittest で Flask (チャットボット) の単体テスト]]></title>
    <link href="http://momota.github.io/blog/2018/06/19/unittest/"/>
    <updated>2018-06-19T18:58:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/06/19/unittest</id>
    <content type="html"><![CDATA[<p>最近 Slack クローンの mattermost のチャットボットを Python で作った。
そのコードをテストしたかったときに unittest を覚えたのでそのメモ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python -V
</span><span class='line'>Python 3.6.4 :: Anaconda, Inc.
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>ディレクトリ構成は以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tree
</span><span class='line'>.
</span><span class='line'>|____log
</span><span class='line'>| |____mattermost_bot.log
</span><span class='line'>|____mattermostbot.py
</span><span class='line'>|____test_mattermostbot.py
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>mattermostbot.py</code>: ボット本体</li>
<li><code>test_mattermostbot.py</code>: テストコード</li>
<li><code>log/</code> : ログ保存用のディレクトリ</li>
</ul>


<h2>チャットボット</h2>

<p>mattermost の統合機能から「外向きのウェブフック」を設定する。</p>

<p><img src="http://momota.github.io/images/20180619_unittest/20180619_mattermost_webhook.png" alt="webhook" /></p>

<p>チャットボットは <code>bot_name COMMAND ARGUMENT</code> のように呼び出す。
ここではコマンドは以下の5種類をテストすることにする。</p>

<ul>
<li>echo: <code>ARGUMENT</code> をそのまま返す</li>
<li>hoge: &ldquo;hoge&rdquo; と返す</li>
<li>ping: &ldquo;pong :ping_pong:&rdquo; と返す</li>
<li>sushi: &ldquo;（っ&#8217;&ndash;&lsquo;)╮ =͟͟͞͞ :sushi: ﾌﾞｫﾝ&rdquo; を返す</li>
<li>tenki: 今日と明日の天気を返す (Livedoor の天気 API を利用)</li>
</ul>


<p>チャットボットのコード <code>mattermostbot.py</code> は以下。Slack のボットとしても機能するはず。</p>

<p>Flask を使って HTTP POST で送られてくる JSON データを mattermost から受け取って、処理している。
<code>bot()</code> メソッドがボットメイン処理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">logging.handlers</span> <span class="kn">import</span> <span class="n">RotatingFileHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/bot&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">bot</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># mattermost -&gt; bot へ送信される JSON データの取得</span>
</span><span class='line'>    <span class="n">post_dict</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">post_dict</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># JSONから token と text (ユーザが入力したメッセージ) を取得</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="n">post_dict</span><span class="p">[</span><span class="s">&#39;token&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">income_text</span> <span class="o">=</span> <span class="n">post_dict</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># income_text は `bot_name COMMAND ARGUMENT` のような形式なので</span>
</span><span class='line'>    <span class="c"># 半角スペースで分割し、それぞれの要素を変数に格納する</span>
</span><span class='line'>    <span class="n">text_array</span> <span class="o">=</span> <span class="n">income_text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bot_name</span> <span class="o">=</span> <span class="n">text_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="n">text_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">arg</span> <span class="o">=</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">text_array</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">payload_text</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># command によって処理を分岐する</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s">&quot;echo&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">payload_text</span> <span class="o">=</span> <span class="n">echo</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">&quot;hoge&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">payload_text</span> <span class="o">=</span> <span class="n">hoge</span><span class="p">()</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">&quot;ping&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">payload_text</span> <span class="o">=</span> <span class="n">pong</span><span class="p">()</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">&quot;sushi&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">payload_text</span> <span class="o">=</span> <span class="n">sushi</span><span class="p">()</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">&quot;tenki&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">payload_text</span> <span class="o">=</span> <span class="n">tenki</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">payload_text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># レスポンス用の JSON を組み立てる</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;username&#39;</span><span class="p">:</span> <span class="n">bot_name</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;icon_url&#39;</span><span class="p">:</span> <span class="s">&#39;http://your-server/images/bot_icon.png&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;text&#39;</span><span class="p">:</span> <span class="n">payload_text</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;MATTERMOST_TOKEN&#39;</span><span class="p">:</span> <span class="n">token</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">json_payload</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">json_payload</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ログ出力用メソッド</span>
</span><span class='line'><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">app</span><span class="p">):</span>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="n">RotatingFileHandler</span><span class="p">(</span><span class="s">&#39;log/mattermost_bot.log&#39;</span><span class="p">,</span> <span class="n">maxBytes</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">backupCount</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>    <span class="n">formatter</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">Formatter</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(asctime)s</span><span class="se">\t</span><span class="si">%(lineno)d</span><span class="se">\t</span><span class="si">%(levelname)s</span><span class="se">\t</span><span class="si">%(name)s</span><span class="se">\t</span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="n">setFormatter</span><span class="p">(</span><span class="n">formatter</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="c"># echo command</span>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">echo</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">text</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="c"># hoge command</span>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hoge</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;hoge&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="c"># ping command</span>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pong</span><span class="p">():</span>
</span><span class='line'>    <span class="n">pong_msg</span> <span class="o">=</span> <span class="s">&quot;pong :ping_pong:&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pong_msg</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="c"># sushi command</span>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sushi</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;（っ&#39;-&#39;)╮ =͟͟͞͞ :sushi: ﾌﾞｫﾝ&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="c"># tenki command</span>
</span><span class='line'><span class="c"># -------------------------------------------------------</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tenki</span><span class="p">():</span>
</span><span class='line'>    <span class="n">api_url</span> <span class="o">=</span> <span class="s">&quot;http://weather.livedoor.com/forecast/webservice/json/v1?city=&quot;</span>
</span><span class='line'>    <span class="c"># 横浜の city id</span>
</span><span class='line'>    <span class="c"># その他のIDはここから探して: http://weather.livedoor.com/forecast/rss/primary_area.xml</span>
</span><span class='line'>    <span class="n">city_id</span> <span class="o">=</span> <span class="s">&quot;140010&quot;</span>
</span><span class='line'>    <span class="n">api_res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">api_url</span> <span class="o">+</span> <span class="n">city_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">json_res</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">api_res</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">today</span> <span class="o">=</span> <span class="n">json_res</span><span class="p">[</span><span class="s">&#39;forecasts&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">tomorrow</span> <span class="o">=</span> <span class="n">json_res</span><span class="p">[</span><span class="s">&#39;forecasts&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">+=</span> <span class="n">format_tenki_json</span><span class="p">(</span><span class="n">today</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">+=</span> <span class="n">format_tenki_json</span><span class="p">(</span><span class="n">tomorrow</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tenki_info</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">format_tenki_json</span><span class="p">(</span><span class="n">j</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">=</span> <span class="s">&quot;# &quot;</span>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">+=</span> <span class="n">j</span><span class="p">[</span><span class="s">&#39;dateLabel&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot; (&quot;</span> <span class="o">+</span> <span class="n">j</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;) の横浜の天気は&quot;</span> <span class="o">+</span> <span class="n">j</span><span class="p">[</span><span class="s">&#39;telop&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">+=</span> <span class="s">&quot; ![](&quot;</span> <span class="o">+</span> <span class="n">j</span><span class="p">[</span><span class="s">&#39;image&#39;</span><span class="p">][</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t_min</span> <span class="o">=</span> <span class="n">j</span><span class="p">[</span><span class="s">&#39;temperature&#39;</span><span class="p">][</span><span class="s">&#39;min&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">t_max</span> <span class="o">=</span> <span class="n">j</span><span class="p">[</span><span class="s">&#39;temperature&#39;</span><span class="p">][</span><span class="s">&#39;max&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">t_min_str</span> <span class="o">=</span> <span class="s">&quot; -- &quot;</span> <span class="k">if</span> <span class="n">t_min</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="nb">str</span><span class="p">(</span><span class="n">t_min</span><span class="p">[</span><span class="s">&#39;celsius&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">t_max_str</span> <span class="o">=</span> <span class="s">&quot; -- &quot;</span> <span class="k">if</span> <span class="n">t_max</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="nb">str</span><span class="p">(</span><span class="n">t_max</span><span class="p">[</span><span class="s">&#39;celsius&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">+=</span> <span class="s">&quot;- 最低気温は &quot;</span> <span class="o">+</span> <span class="n">t_min_str</span> <span class="o">+</span><span class="s">&quot;℃</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="n">tenki_info</span> <span class="o">+=</span> <span class="s">&quot;- 最高気温は &quot;</span> <span class="o">+</span> <span class="n">t_max_str</span>  <span class="o">+</span><span class="s">&quot;℃</span><span class="se">\n\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tenki_info</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テスト</h2>

<p>以下を参考にした。</p>

<p><a href="http://momijiame.tumblr.com/post/39324429279/python-%E3%81%AE-flask-%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B">Python の Flask で作ったアプリケーションをテストする | CUBE SUGAR STORAGE</a></p>

<p>各チャットボットコマンドに対応するテストケースを以下のように書ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mattermostbot</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestMattermostBot</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># mattermost -&gt; bot へのリクエスト JSON のダミーデータ雛形</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">channel_id</span> <span class="o">=</span> <span class="s">&#39;xxxxxxxxxxxxxxxxxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">channel_name</span> <span class="o">=</span> <span class="s">&#39;some_channel&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">file_ids</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">post_id</span> <span class="o">=</span> <span class="s">&#39;xxxxxxxxxxxxxxxxxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">team_domain</span> <span class="o">=</span> <span class="s">&#39;some_team&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">team_id</span> <span class="o">=</span> <span class="s">&#39;xxxxxxxxxxxxxxxxxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">text</span> <span class="o">=</span> <span class="s">&#39;your_bot_name &#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">timestamp</span> <span class="o">=</span> <span class="s">&#39;9999999999&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">token</span> <span class="o">=</span> <span class="s">&#39;xxxxxxxxxxxxxxxxxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">trigger_word</span> <span class="o">=</span> <span class="s">&#39;your_bot_name&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">user_id</span> <span class="o">=</span> <span class="s">&#39;xxxxxxxxxxxxxxxxxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">user_name</span> <span class="o">=</span> <span class="s">&#39;your_name&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">mattermostbot</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_post_echo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">TestMattermostBot</span><span class="o">.</span><span class="n">req</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;echo fuga&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response_data</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;fuga&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_post_hoge</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">TestMattermostBot</span><span class="o">.</span><span class="n">req</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;hoge&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response_data</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;hoge&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_post_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">TestMattermostBot</span><span class="o">.</span><span class="n">req</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response_data</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;pong :ping_pong:&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_post_sushi</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">TestMattermostBot</span><span class="o">.</span><span class="n">req</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;sushi&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response_data</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;（っ&#39;-&#39;)╮ =͟͟͞͞ :sushi: ﾌﾞｫﾝ&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_post_tenki</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">TestMattermostBot</span><span class="o">.</span><span class="n">req</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;tenki&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span> <span class="ow">in</span> <span class="n">response_data</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">req</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">TestMattermostBot</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;text&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">command</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;/bot&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストを実行するとこんな感じになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python test_mattermostbot.py
</span><span class='line'>.....
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>Ran 5 tests in 0.115s
</span><span class='line'>
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker で Elasticsearch]]></title>
    <link href="http://momota.github.io/blog/2018/06/07/elasticsearch/"/>
    <updated>2018-06-07T13:56:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/06/07/elasticsearch</id>
    <content type="html"><![CDATA[<p>Docker for Windows で Windows10 上に Elasticsearch を動かしたときのメモ。</p>

<ul>
<li>Docker: 18.03.1-ce-win65 (17513)</li>
<li>Elasticsearch: 6.2.4</li>
</ul>


<!-- more -->


<p>日本語を扱いたいのでプラグイン <code>kuromoji</code> をインストールする Dockerfile を用意する。</p>

<p>Dockerfile の内容は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM docker.elastic.co/elasticsearch/elasticsearch:6.2.4
</span><span class='line'>
</span><span class='line'># Plugin x-pack already exists in this image
</span><span class='line'># RUN elasticsearch-plugin install --batch x-pack
</span><span class='line'>RUN elasticsearch-plugin install analysis-kuromoji</span></code></pre></td></tr></table></div></figure>


<p>この Dockerfile に基づいてイメージをビルドする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; docker build -t es-kuromoji:1.0 ./
</span><span class='line'>&gt; docker images
</span><span class='line'>REPOSITORY                                               TAG                 IMAGE ID            CREATED              SIZE
</span><span class='line'>es-kuromoji                                              1.0                 dxxxxxxxxxxx        About a minute ago   519MB
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-cli-run">Install Elasticsearch with Docker | Elasticsearch Reference ［6.2］ | Elastic</a> に書いてあるとおりに起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; docker run -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" es-kuromoji:1.0</span></code></pre></td></tr></table></div></figure>


<p>起動を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                                            NAMES
</span><span class='line'>xxxxxxxxxxxx        es-kuromoji:1.0     "/usr/local/bin/dock…"  About a minute ago   Up Ab out a minute  0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   sharp_hypatia</span></code></pre></td></tr></table></div></figure>


<p>Elasticsearch の正常稼働を REST APIから確認する。 Ubuntu (WSL) から <code>curl</code> を使う。</p>

<p><code>health</code> が <code>green</code> なので問題ない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># In my environment, need `noproxy` option: curl http://localhost:9200/_cat/indices?v --noproxy localhost</span>
</span><span class='line'><span class="nv">$ </span>curl http://localhost:9200/_cat/indices?v
</span><span class='line'>health status index                       uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   .monitoring-es-6-2018.06.07 xxxxxxxxxxxxxxxxxxxxxx   1   0       3094            2      1.1mb          1.1mb
</span></code></pre></td></tr></table></div></figure>


<p>Windows側で確認する場合は、<code>curl</code> の代わりに PowerShell <code>Invoke-WebRequest</code> コマンドで確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># In windows, we can confirm Elasticsearch is running by using powershell</span>
</span><span class='line'>PS C:<span class="se">\&gt;</span> Invoke-WebRequest -Uri http://localhost:9200/_cat/indices?v
</span><span class='line'>
</span><span class='line'>StatusCode        : 200
</span><span class='line'>StatusDescription : OK
</span><span class='line'>Content           : health status index                       uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>                    green  open   .monitoring-es-6-2018.06.07 xxxxxxxxxxxxxxxxxxxxxx   1   0     ...
</span><span class='line'>RawContent        : HTTP/1.1 200 OK
</span><span class='line'>                    Content-Length: 246
</span><span class='line'>                    Content-Type: text/plain; <span class="nv">charset</span><span class="o">=</span>UTF-8
</span><span class='line'>
</span><span class='line'>                    health status index                       uuid                   pri rep docs.count docs.deleted store.size pri.store.s...
</span><span class='line'>Forms             : <span class="o">{}</span>
</span><span class='line'>Headers           : <span class="o">{[</span>Content-Length, 246<span class="o">]</span>, <span class="o">[</span>Content-Type, text/plain; <span class="nv">charset</span><span class="o">=</span>UTF-8<span class="o">]}</span>
</span><span class='line'>Images            : <span class="o">{}</span>
</span><span class='line'>InputFields       : <span class="o">{}</span>
</span><span class='line'>Links             : <span class="o">{}</span>
</span><span class='line'>ParsedHtml        : mshtml.HTMLDocumentClass
</span><span class='line'>RawContentLength  : 246
</span></code></pre></td></tr></table></div></figure>


<p>index を作ってみる。
index は RDB のテーブルやビューにあたる。</p>

<p>PUT メソッドを使って <code>customer</code> という index を作る。
<code>pretty</code> は JSON を pretty-print (pretty-print) してくれる。 <code>jq</code> みたいに整形してくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -X PUT http://localhost:9200/customer?pretty
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;acknowledged&quot;</span> : <span class="nb">true</span>,
</span><span class='line'>  <span class="s2">&quot;shards_acknowledged&quot;</span> : <span class="nb">true</span>,
</span><span class='line'>  <span class="s2">&quot;index&quot;</span> : <span class="s2">&quot;customer&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>index が増えていることが確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl http://localhost:9200/_cat/indices?v
</span><span class='line'>health status index                       uuid                   pri rep docs.count docs.deleted store.size pri.store.size
</span><span class='line'>green  open   .monitoring-es-6-2018.06.07 xxxxxxxxxxxxxxxxxxxxxx   1   0       4775           44      1.9mb          1.9mb
</span><span class='line'>yellow open   customer                    xxxxxxxxxxxxxxxxxxxxxx   5   1          0            0      1.1kb          1.1kb
</span></code></pre></td></tr></table></div></figure>


<p>document を追加する。
RDB のレコードみたいなもの。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -X PUT http://localhost:9200/customer/_doc/1?pretty -d <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">&gt; {</span>
</span><span class='line'><span class="s1">&gt;   &quot;name&quot;: &quot;John Doe&quot;</span>
</span><span class='line'><span class="s1">&gt; }</span>
</span><span class='line'><span class="s1">&gt; &#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;_index&quot;</span> : <span class="s2">&quot;customer&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;_type&quot;</span> : <span class="s2">&quot;_doc&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span> : <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;_version&quot;</span> : 1,
</span><span class='line'>  <span class="s2">&quot;result&quot;</span> : <span class="s2">&quot;created&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;_shards&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;total&quot;</span> : 2,
</span><span class='line'>    <span class="s2">&quot;successful&quot;</span> : 1,
</span><span class='line'>    <span class="s2">&quot;failed&quot;</span> : 0
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;_seq_no&quot;</span> : 0,
</span><span class='line'>  <span class="s2">&quot;_primary_term&quot;</span> : 1
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PowerShell バージョンは以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$person</span> <span class="o">=</span> @<span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;John Doe&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">$json</span> <span class="o">=</span> <span class="nv">$person</span> | ConvertTo-Json
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> Invoke-RestMethod <span class="s1">&#39;http://localhost:9200/customer/_doc/1&#39;</span> -Method Put -Body <span class="nv">$json</span> -ContentType <span class="s1">&#39;application/json&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>document の確認。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -sS -w <span class="s1">&#39;\n&#39;</span> http://localhost:9200/customer/_doc/1?pretty
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;_index&quot;</span> : <span class="s2">&quot;customer&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;_type&quot;</span> : <span class="s2">&quot;_doc&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span> : <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;_version&quot;</span> : 1,
</span><span class='line'>  <span class="s2">&quot;found&quot;</span> : <span class="nb">true</span>,
</span><span class='line'>  <span class="s2">&quot;_source&quot;</span> : <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;John Doe&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python クライアントからアクセス</h2>

<p>pip で Python Elasticsearch Client をインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install elasticsearch
</span></code></pre></td></tr></table></div></figure>


<h3>CSV ファイルを突っ込む</h3>

<p><code>質問, 回答</code> みたいな FAQ をためている CSV ファイルを Elasticsearch へインポートする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">elasticsearch</span> <span class="kn">import</span> <span class="n">Elasticsearch</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">es</span> <span class="o">=</span> <span class="n">Elasticsearch</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">9200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;data/faq.csv&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;question&#39;</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">&#39;question&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&#39;answer&#39;</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">&#39;answer&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">es</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="s">&#39;faq&#39;</span><span class="p">,</span> <span class="n">doc_type</span><span class="o">=</span><span class="s">&#39;XXXXX&#39;</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>あいまい検索する</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">faq</span><span class="p">(</span><span class="n">query</span><span class="p">):</span>
</span><span class='line'>    <span class="n">top3</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query_json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;query&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;more_like_this&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;fields&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;question&#39;</span><span class="p">,</span> <span class="s">&#39;answer&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="s">&#39;like&#39;</span><span class="p">:</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;min_term_freq&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;max_query_terms&#39;</span><span class="p">:</span> <span class="mi">12</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="n">es</span> <span class="o">=</span> <span class="n">Elasticsearch</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">9200</span><span class="p">)</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="n">es</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="s">&#39;faq&#39;</span><span class="p">,</span> <span class="n">doc_type</span><span class="o">=</span><span class="s">&#39;XXXXX&#39;</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="n">query_json</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">top3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows ログイン時に、Cドライブ以外のBitLockerを解除する]]></title>
    <link href="http://momota.github.io/blog/2018/05/25/bitlocker/"/>
    <updated>2018-05-25T17:23:00+09:00</updated>
    <id>http://momota.github.io/blog/2018/05/25/bitlocker</id>
    <content type="html"><![CDATA[<p>BitLocker は Windows 10 Professional/Enterprise に標準搭載されているディスク暗号化機能。
最近、会社 PC を Windows 10 にアップデートしたので使うようになった。</p>

<p>BitLocker は OS ログイン前に C ドライブの暗号化を解除しろ、とパスワード入力を求めてくる。
ただし、その後、OS ログインしても、C ドライブ以外 (たとえば、D ドライブ) は暗号化されたままとなっており、いちいち当該ドライブへアクセスしてパスワード入力して暗号化を解除する必要があった。
また、暗号化解除前に D ドライブ上のファイルへアクセスするとエラーが起きてしまい、大変うざったい。</p>

<p>そこで、OS ログイン時に自動的に C ドライブ以外のディスク暗号化解除するために PowerShell とバッチを書いてスタートアッププログラムに登録した話を書く。</p>

<p>セキュリティクラスタには怒られるのかもしれないが、OS に管理者権限ユーザでログインできている時点でもういろいろ見れて当たり前やろ、という思想。</p>

<p>全体の流れは以下。</p>

<ol>
<li>BitLocker 解除用の PowerShell を書く</li>
<li>バッチファイル unlock-bitLocker.cmd を書く</li>
<li>バッチファイル unlock-bitLocker.cmd をタスクスケジューラに登録する</li>
<li>タスクを呼び出すバッチファイル trigger_unlock-bitLocker.cmd を書く</li>
<li>バッチファイル unlock-bitLocker.cmd をスタートアッププログラムに登録してあげる</li>
</ol>


<!-- more -->


<h2>1. BitLocker 解除用の PowerShell を書く</h2>

<p>ここでは D ドライブの BitLocker 解除するスクリプト <code>C:\PATH-YOU-WANT\unlock-bitLocker.ps1</code> を書く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="nv">$password</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="s2">&quot;YOUR_PASSWORD&quot;</span> <span class="n">-AsPlainText</span> <span class="n">-Force</span>
</span><span class='line'><span class="nv">$d_drive</span> <span class="p">=</span> <span class="s2">&quot;D:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Unlock-BitLocker</span> <span class="n">-MountPoint</span> <span class="nv">$d_drive</span> <span class="n">-Password</span> <span class="nv">$password</span>
</span></code></pre></td></tr></table></div></figure>


<p>複数のドライブがある場合は以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ps1'><span class='line'><span class="nv">$password</span> <span class="p">=</span> <span class="nb">ConvertTo-SecureString</span> <span class="s2">&quot;YOUR_PASSWORD&quot;</span> <span class="n">-AsPlainText</span> <span class="n">-Force</span>
</span><span class='line'><span class="nv">$drives</span> <span class="p">=</span> <span class="err">@</span><span class="p">(</span><span class="s2">&quot;D:&quot;</span><span class="p">,</span> <span class="s2">&quot;E:&quot;</span><span class="p">,</span> <span class="s2">&quot;F:&quot;</span><span class="p">,</span> <span class="s2">&quot;G:&quot;</span><span class="p">,</span> <span class="s2">&quot;H:&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">Foreach</span><span class="p">(</span><span class="nv">$drive</span> <span class="k">in</span> <span class="nv">$drives</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Unlock-BitLocker</span> <span class="n">-MountPoint</span> <span class="nv">$drive</span> <span class="n">-Password</span> <span class="nv">$password</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. バッチファイル unlock-bitLocker.cmd を書く</h2>

<p>上述の PowerShell スクリプトを管理者権限で実行し、かつ、スタートアッププログラムに登録するために、上記の PowerShell を呼び出すバッチファイル <code>C:\PATH-YOU-WANT\unlock-bitLocker.cmd</code> を書いてあげる。
PowerShell を直接登録したかったのだが、調査力が足りず変な構成になった…</p>

<p>もしくは、これくらいなら PowerShell スクリプトはいらず、バッチスクリプトだけでもよかったかもしれない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">setlocal</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">DDrive</span><span class="o">=</span>D:
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> SleepInterval<span class="o">=</span><span class="m">5</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> Unlocking bitlocker <span class="k">on</span> <span class="nv">%DDrive%</span> drive...
</span><span class='line'><span class="p">@</span>powershell -Command <span class="s2">&quot;Start-Process powershell.exe -ArgumentList C:\PATH-YOU-WANT\unlock_bitlocker.ps1 -Verb runas&quot;</span>
</span><span class='line'>timeout <span class="nv">%SleepInterval%</span> <span class="n">/nobreak</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="k">ERRORLEVEL</span> <span class="m">0</span> (
</span><span class='line'>  dir <span class="nv">%DDrive%</span>
</span><span class='line'>  <span class="k">echo</span> Yey<span class="p">,</span> unlocked bitlocker <span class="k">on</span> <span class="nv">%DDrive%</span> drive !!
</span><span class='line'>) <span class="k">else</span> (
</span><span class='line'>  <span class="k">echo</span> Error occured: unloker script returned error code: <span class="nv">%ERRORLEVEL%</span>
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">endlocal</span>
</span><span class='line'><span class="k">pause</span> <span class="p">&gt;</span> <span class="n">nul</span>
</span><span class='line'>exit
</span></code></pre></td></tr></table></div></figure>


<h2>3. バッチファイル unlock-bitLocker.cmd をタスクスケジューラに登録する</h2>

<p><code>unlock-bitLocker.cmd</code> をスタートアッププログラムに登録すると、実行時に管理者権限で実行するかという確認ダイアログがでて毎回うざったい。
そこで、いったん上記のバッチスクリプトをタスクスケジューラに管理者権限実行のタスクとして登録してそのタスクをスタートアッププログラムから起動する。</p>

<ol>
<li><code>Windows キー + r</code> : ファイル名を指定して実行を起動</li>
<li><code>taskschd.msc</code> を入力: タスクスケジューラが開く</li>
<li>新規タスクの作成:

<ul>
<li>「タスクの作成」から <code>unlock_bitlocker.cmd</code> を起動するタスクを作成する</li>
<li>「全般」タブの「最上位の特権で実行する」にチェックを入れる</li>
<li>「操作」タブから「新規」ボタンを押す。操作は「プログラムの開始」、プログラム/スクリプトに <code>C:\PATH-YOU-WANT\unlock-bitLocker.cmd</code> を指定</li>
<li>「トリガー」は空でOK</li>
</ul>
</li>
</ol>


<h2>4. タスクを呼び出すバッチファイル trigger_unlock-bitLocker.cmd を書く</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">setlocal</span>
</span><span class='line'><span class="c">rem ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>schtasks.exe <span class="n">/run</span> <span class="n">/tn</span> unlock_bitlocker
</span><span class='line'>
</span><span class='line'><span class="c">rem ------------------------------------------------------------------</span>
</span><span class='line'><span class="k">endlocal</span>
</span><span class='line'>exit
</span></code></pre></td></tr></table></div></figure>


<h2>5. バッチファイル unlock-bitLocker.cmd をスタートアッププログラムに登録してあげる</h2>

<ol>
<li><code>Windows キー + r</code> : ファイル名を指定して実行を起動</li>
<li><code>shell:startup</code> を入力: スタートアップのフォルダが開く</li>
<li>作ったバッチファイル <code>trigger_unlock-bitLocker.cmd</code> のショートカットをスタートアップフォルダの中に作成</li>
</ol>


<p>以上で、OS ログイン後に D ドライブの BitLocker を解除できる。</p>

<p>BitLocker を有効にしていると、初回起動時に NumLock が有効になっているのを無効化したいんだが、だれか方法を教えてほしい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL パフォーマンスチューニング]]></title>
    <link href="http://momota.github.io/blog/2017/04/20/mysql/"/>
    <updated>2017-04-20T22:41:00+09:00</updated>
    <id>http://momota.github.io/blog/2017/04/20/mysql</id>
    <content type="html"><![CDATA[<p>MySQL 5.7 のパフォーマンスチューニングについて、調べてたのでまとめる。</p>

<p>// 結構な文量になってしまった…</p>

<p>大きく、2つのアプローチがある。</p>

<ol>
<li>DBチューニング

<ul>
<li>システム変数 (my.cnf) のチューニング</li>
<li>全体最適</li>
</ul>
</li>
<li>アプリ (SQL) チューニング

<ul>
<li>個別最適</li>
</ul>
</li>
</ol>


<p>まあ、地道に、計測→問題点の特定→修正→計測… のサイクルを回すしかない。</p>

<!-- more -->


<h1>1. DBチューニング</h1>

<h2>ディスク構成関連</h2>

<ul>
<li>ログファイルとデータファイル (たとえば、システム表領域データファイル) を別の物理ディスクに配置することでI/O性能が向上する</li>
<li>InnoDBデータファイルをRawデバイスに置くことで、I/O性能が向上する</li>
<li>OSマウントオプション noatime を無効化する

<ul>
<li>Linuxのファイルシステムには、ファイル読み込み時刻が「atime」として保存される。1ファイルアクセス当たりのオーバーヘッドはささやかだが、大量のファイルに対して頻繁にアクセスするシステムでは、atimeの更新にかかる時間も無視できなくなる。atimeが不要なシステムであれば、atimeの更新を無効化することでディスクのパフォーマンスが向上する可能性がある。</li>
</ul>
</li>
</ul>


<h2>ストレージエンジン関連</h2>

<ul>
<li><p>バッファプールサイズ <code>innodb_buffer_pool_size</code></p>

<ul>
<li>バッファプールサイズ <code>innodb_buffer_pool_size</code> は InnoDB のデータとインデックスをキャッシュするメモリ上の領域。可能な限り大きくすることが基本方針。</li>
<li>MySQL (InnoDB) のみを利用していれば、バッファプールサイズ <code>innodb_buffer_pool_size</code> はメインメモリの 70-80% 程度を割り当てる。データとインデックスの両方をキャッシュする。(デフォルトは128MB)</li>
<li>ログファイル全体をOSがキャッシュできる程度の余裕を持たせると更新系の性能に利点が大きい。</li>
</ul>
</li>
<li><p>バッファプールインスタンス <code>innodb_buffer_pool_instances</code></p>

<ul>
<li>バッファプールをいくつのインスタンスに分けるか指定する。デフォルト8</li>
<li>十分なメモリがある場合、複数のバッファプールインスタンスに分割することで、グローバル Mutex の衝突を減らすことができ同時並行性を改善可能。キャッシュされたページに対して、異なるスレッドがI/Oを行うときの競合が減るため並列性が増す。</li>
<li><code>innodb_buffer_pool_size</code> が大きく、mutex競合がオーバヘッドとなっている場合は、2以上に設定</li>
<li><code>innodb_buffer_pool_size</code> は <code>N * innodb_buffer_pool_chunk_size * innodb_buffer_pool_instances</code>に等しいサイズにする必要あり。</li>
<li>オンラインでもサイズ変更可能。</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-init-startup-configuration.html">MySQL :: MySQL 5.7 Reference Manual :: 15.6.1 InnoDB Startup Configuration</a>

<ul>
<li>mutex 競合確認方法の例は以下。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; select event_name, count_star, sum_timer_wait/1000000000 sum_timer_wait_ms
</span><span class='line'>-&gt; from performance_schema.events_waits_summary_global_by_event_name
</span><span class='line'>-&gt; where event_name like '%buf_pool_mutex%';
</span><span class='line'>+----------------------------------------+------------+-------------------+
</span><span class='line'>| event_name                             | count_star | sum_timer_wait_ms |
</span><span class='line'>+----------------------------------------+------------+-------------------+
</span><span class='line'>| wait/synch/mutex/innodb/buf_pool_mutex | 0          | 0.0000            |
</span><span class='line'>+----------------------------------------+------------+-------------------+
</span><span class='line'>1 row in set (0.00 sec)</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>innoDB_page_size</code></p>

<ul>
<li>デフォルト16k。16KBは、幅広いワークロードに適しているサイズ。特にテーブルスキャンを含むクエリだったり、バルクアップデートを含むDML操作など。</li>
<li>環境によって調整する。
<img src="http://momota.github.io/images/20170420_mysql/mysql_file.png" alt="innodb file structure" /></li>
</ul>
</li>
<li><p>データファイルアクセスに OSキャッシュを無駄に消費しないよう <code>innodb_flush_method</code> を <code>O_DIRECT</code> にする。</p>

<ul>
<li><code>O_DIRECT</code> にすると、OSのDirect I/O機能を利用し、OSのキャッシュをバイパスする。MySQL は自前のキャッシュ機構があるので、OSキャッシュは冗長なので、バイパスしたほうがよい。</li>
<li>Linuxでは、多くの場合 <code>O_DIRECT</code> にしたほうがオーバヘッドが下がる</li>
</ul>
</li>
<li><p><code>innodb_log_file_size</code></p>

<ul>
<li>ログファイル(WAL: Write Ahead Log)はトランザクション更新ログ。ログファイルがどの程度頻繁に切り替わっているかをチェックしておく。</li>
<li>大きくしすぎるとOSキャッシュに載らず、性能劣化する場合あり。また、クラッシュ後のリカバリ時間が長くなる。</li>
<li><code>innodb_buffer_pool_size</code> の25%～100%。デフォルト45MB。最大リカバリ時間に影響するので考慮しつつ大きく設定する。</li>
</ul>
</li>
<li><p><code>innodb_log_buffer_size</code></p>

<ul>
<li>InnoDB は、変更されたデータのレコードを、メモリ上のバッファに書き込み、トランザクションがコミットする前にログがディスクに書き込まれないようにすることで、大きなトランザクション
のI/Oを節約する。</li>
<li>大量・巨大な blob を書き込む必要がなければ、4MB-8MBが適切。</li>
</ul>
</li>
<li><p><code>innodb_flush_log_at_trx_commit</code></p>

<ul>
<li><code>innodb_flush_log_log_at_trx_commit</code> が 1 の時、ログバッファはトランザクションがコミットされるたびにディスク上のログファイルに書き出され、データの整合性を最大限保つ。しかし、これはパフォーマンスへの影響がある。この値を2にすると、ログバッファはトランザクションのコミットごとにOSのファイルキャッシュへ書き出される。これにより、ACIDを意識しないのであればパフ
ォーマンスを最適化・高速化できるが、OSのクラッシュ時には数秒分のトランザクションが消えてしまう可能</li>
</ul>
</li>
<li><p><code>innodb_file_per_table</code></p>

<ul>
<li>テーブル単位でOS上のデータファイルを分ける設定</li>
<li>ディスクI/O分散やibdata ファイルの肥大化を防ぐためONを推奨</li>
<li>pros / cons: <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multiple-tablespaces.html">MySQL :: MySQL 5.7 Reference Manual :: 15.7.4 InnoDB File-Per-Table Tablespaces</a></li>
<li>ibdataファイル肥大化時の運用を検討する必要あり: <a href="http://nippondanji.blogspot.jp/2009/01/innodb_16.html">漢(オトコ)のコンピュータ道: InnoDBのファイルサイズ管理</a></li>
</ul>
</li>
<li><p>Double Write Buffer</p>

<ul>
<li>クラッシュ時のpartial write (書き込み途中状態での終了) によるデータページ破壊への対策機能で、InnoDBで使われているファイルFlush技術。

<ul>
<li>InnoDBデータファイルにページを書き出す前に、隣接領域 (これをdoublewrite bufferと呼ぶ)にまず書き出す。double write bufferへの書き込みおよびFlushが完了したら、InnoDBはデータをデータファイルの適切な位置に書き込む。これによりページファイルへの書き込み途中にクラッシュしても (OSやストレージサブシステム、mysqldプロセス)、doublewrite buffer からクラッシュリカバリできる。ただし、これはI/Oオーバヘッドが2倍以上かかるため、性能とのトレードオフ。</li>
</ul>
</li>
<li>障害復旧可能性を高めるため、<code>innodb_doublewrite = ON</code> (デフォルト設定) が推奨</li>
</ul>
</li>
<li><p><code>innodb_thread_concurrency</code> で同時実行スレッド数を調整する。</p>

<ul>
<li>処理を並列に行うとスループットの向上が期待出来るが、同時に実行中のスレッドがあまりに多すぎるとロックの競合が多発してしまって返って性能を落とす原因になってしまう。</li>
<li>5.5 以上であればリミットをかける必要はない。現代的なOSであれば、マルチコア・プロセッサのコンテキストスイッチを効果的に実施してくれる。0は上限なし。デフォルトでOK</li>
<li>並列度で問題が出た場合は、値を調整する。この場合の推奨値は、CPU 数の 2 倍にディスクの数を足したもの。動的変数なのでオンラインで変更可能。</li>
</ul>
</li>
<li><p>InnoDB compression (圧縮機能)</p>

<ul>
<li>以下のメリットがある

<ul>
<li>DBデータファイルサイズを縮小化</li>
<li>I/O削減</li>
<li>スループットの改善</li>
<li>データ量削減</li>
</ul>
</li>
<li>条件

<ul>
<li><code>innodb_file_per_table</code> を有効化すること</li>
<li><code>innodb_file_format</code> が Barracuda であること</li>
</ul>
</li>
<li><code>CREATE TABLE</code> もしくは <code>ALTER TABLE</code> で <code>ROW_FORMAT=COMPRESSED</code> か <code>KEY_BLOCK_SIZE</code> を指定する</li>
</ul>
</li>
<li><p><code>innodb_io_capacity</code></p>

<ul>
<li>InnoDB のバックグラウンドタスクに使用するI/Oキャパシティ(IOPS)の上限を設定する。デフォルト200。</li>
<li>高速なストレージを使用している場合は拡大する。</li>
<li>デフォルト値 (200) は、ストライプされた2本のディスクを目安にした値</li>
</ul>
</li>
<li><code>innodb_read_io_threads</code>, <code>innodb_write_io_threads</code>

<ul>
<li>高速なストレージを使用している場合は拡大する。</li>
<li>デフォルト値 (4) は、一般的には十分な値</li>
</ul>
</li>
</ul>


<h2>コネクションスレッドプール関連</h2>

<ul>
<li><code>max_connections</code>

<ul>
<li>サーバが許容可能なコネクション数。デフォルト151。</li>
<li>多すぎるとメモリを消費し切る可能性あり</li>
</ul>
</li>
<li><code>thread_cache_size</code>

<ul>
<li>スレッドをコネクションの切断後にもキャッシュしておく数。</li>
<li>一般的には <code>max_connections / 3</code></li>
<li>計算式 <code>8 + (max_connections / 100)</code> により自動計算。</li>
</ul>
</li>
<li><code>sort_buffer_size</code>

<ul>
<li>ソート用のメモリサイズ。このサイズを超えるとディスクを利用する。OLTPでは256KB〜1MBを割り当てる。</li>
</ul>
</li>
</ul>


<h2>クエリキャッシュ関連</h2>

<ul>
<li><code>query_cache_size</code>

<ul>
<li>クエリキャッシュに割り当てるメモリサイズ</li>
<li>一般的には32MでOK。デフォルト1MB。</li>
</ul>
</li>
<li><code>query_cache_type</code>

<ul>
<li>最悪のケースでは、パフォーマンスのオーバヘッドが約15%</li>
<li>select 比率が高いサーバで有効</li>
<li>DEMAND に設定すると、クエリ実行時にSQL_CACHE句をつけたクエリだけキャッシュ可能</li>
</ul>
</li>
</ul>


<h2>その他</h2>

<ul>
<li><p><code>autocommit</code> は高負荷なのでOFFが推奨。</p>

<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-best-practices.html">MySQL :: MySQL 5.7 Reference Manual :: 15.1.2 Best Practices for InnoDB Tables</a></li>
<li>トランザクション文で明確にコミットすること</li>
</ul>
</li>
<li><p>Read-Ahead</p>

<ul>
<li>read-aheadリクエストは、バッファプールへ近い将来必要になりそうな複数のページを先読みするI/Oリクエスト。1エクステントの全ページに対してリクエストする。I/O性能の改善効果がある。Linear read-head(デフォルト)とRandom read-headの2つのアルゴリズムがある</li>
<li>この関連パラメータはチューニングする余地あり</li>
</ul>
</li>
<li><p>再起動時のウォームアップ運用</p>

<ul>
<li>バッファプールの中身を保存・リストアする機能がある。この機能を利用して、再起動後、データをキャッシュに載せ高速化する。</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-preload-buffer-pool.html">MySQL :: MySQL 5.7 Reference Manual :: 15.6.3.8 Saving and Restoring the Buffer Pool State</a></li>
</ul>
</li>
</ul>


<h1>2. アプリ (SQL) チューニング</h1>

<ul>
<li><p>適切なSQLを使う (クエリ最適化)</p>

<ul>
<li>まずはスロークエリの分析</li>
<li><code>SHOW FULL PROCESSLIST</code> で現在実行中の時間がかかっているクエリを特定する</li>
<li>EXPLAIN で実行計画の評価

<ul>
<li>たとえば、全件フェッチしてからアプリケーション側で行を絞り込むというようなロジックはNG</li>
</ul>
</li>
<li>フェッチする行数を減らすようなクエリを組み立てる。

<ul>
<li>サブクエリをJOINに書き換えたり、インデックスを適切に貼ったり。</li>
</ul>
</li>
</ul>
</li>
<li><p>テーブルの最適化</p>

<ul>
<li>適切なデータタイプを選択する

<ul>
<li>数値をVARCHAR(桁数)はNG。INT (もしくはBIGINT) にすることで高速かつデータサイズが小さい</li>
</ul>
</li>
<li>インデックスを適切に作成する

<ul>
<li>付けすぎると更新時のオーバヘッドが増える</li>
<li>無駄に付けない。たとえば、性別などの二値にインデックスを張っても意味がない。</li>
</ul>
</li>
<li>適切に正規化する

<ul>
<li>JOIN処理により性能が出ない場合は非正規化も検討する</li>
</ul>
</li>
</ul>
</li>
<li><p>適切な粒度でcommitする</p>

<ul>
<li>グループコミットの利用</li>
</ul>
</li>
<li><p>レプリケーションを利用した負荷分散</p>

<ul>
<li>参照処理はSlave側を向ける、など</li>
</ul>
</li>
<li><p>コネクションプーリングする</p></li>
<li><p>Innodb compression</p>

<ul>
<li>テーブル単位に圧縮オプションを選択可能</li>
<li>DML操作の実行時に compresson failure を引き起こす可能性あり。パラメータをチューニングする。</li>
<li>繰り返しの値や一般的に文字列 (CHAR, VARCHAR, TEXT or BLOB列) は圧縮効果が大きい</li>
<li>ほとんどバイナリデータ (integer or floating point number) や事前に圧縮されているデータ (たとえば JPEG た PNG) は圧縮効果が少ない

<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-compression-tuning.html">MySQL :: MySQL 5.7 Reference Manual :: 15.9.1.3 Tuning Compression for InnoDB Tables</a></li>
</ul>
</li>
<li>画像データが入っていないテーブルに適用すると効果あり</li>
</ul>
</li>
</ul>


<h1>性能測定</h1>

<p>推測するな、計測せよ。</p>

<p>設定を変えたり、プログラムを変えたりしても、効果を測れないと意味がない。</p>

<h2>MySQL のステータス</h2>

<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-buffer-pool-monitoring.html">MySQL :: MySQL 5.7 Reference Manual :: 15.6.3.9 Monitoring the Buffer Pool Using the InnoDB Standard Monitor</a></li>
<li><code>INFORMATION_SCHEMA</code>

<ul>
<li><code>INNODB_CMP*</code> : 圧縮の状況</li>
<li><code>INNODB_TRX</code>, <code>INNODB_LOCKS*</code> : ロック状況</li>
<li><code>INNODB_SYS_*</code> : システムテーブル (メタデータ)</li>
<li><code>INNODB_BUFFER_*</code> : バッファプール</li>
</ul>
</li>
<li>PERFORMANCE_SCHEMA, sys スキーマ</li>
<li>InnoDB 監視

<ul>
<li>Pending file IOリクエスト</li>
<li>バッファプール統計</li>
<li>ロック、mutex</li>
<li><code>SHOW ENGINE INNODB STATUS</code></li>
</ul>
</li>
</ul>


<h2>性能測定ツール</h2>

<ul>
<li>innotop

<ul>
<li><code>top</code> 風に MySQL のステータスを表示するツール</li>
<li><a href="https://github.com/innotop/innotop">innotop/innotop</a></li>
</ul>
</li>
<li>dstat, sar

<ul>
<li>OSレイヤの性能値を取得する</li>
</ul>
</li>
</ul>


<h2>ベンチマークツール</h2>

<ul>
<li>DBT2

<ul>
<li><a href="https://dev.mysql.com/downloads/benchmarks.html">MySQL :: MySQL Benchmark Tool</a></li>
</ul>
</li>
<li>SysBench

<ul>
<li><a href="https://dev.mysql.com/downloads/benchmarks.html">MySQL :: MySQL Benchmark Tool</a></li>
</ul>
</li>
<li>mysqlslap

<ul>
<li>標準の負荷エミュレーションクライアントプログラム</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlslap.html">MySQL :: MySQL 5.7 Reference Manual :: 5.5.9 mysqlslap — Load Emulation Client</a></li>
</ul>
</li>
<li>flexAsynch

<ul>
<li>MySQL Cluster用のテストツール</li>
</ul>
</li>
</ul>


<h1>参考資料</h1>

<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/">MySQL :: MySQL 5.7 Reference Manual</a></li>
<li><a href="https://downloads.mysql.com/presentations/20151208_02_MySQL_Tuning_for_Beginners.pdf">20151208_02_MySQL_Tuning_for_Beginners.pdf</a></li>
<li><a href="http://nippondanji.blogspot.jp/2009/02/mysql10.html">漢(オトコ)のコンピュータ道: MySQLを高速化する10の方法</a></li>
<li><a href="https://yakst.com/ja/posts/65">(帰ってきた)InnoDBパフォーマンス最適化の基礎 | Yakst</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible ABC]]></title>
    <link href="http://momota.github.io/blog/2016/08/19/ansible-abc/"/>
    <updated>2016-08-19T08:22:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/08/19/ansible-abc</id>
    <content type="html"><![CDATA[<p>チーム内での Ansible 勉強会の資料を公開。</p>

<p><img src="http://momota.github.io/images/20160818_ansible-logo.png" alt="ansible logo" /></p>

<p>公式サイトは以下。</p>

<ul>
<li><a href="http://www.ansible.com">http://www.ansible.com</a></li>
<li><a href="http://docs.ansible.com">http://docs.ansible.com</a></li>
</ul>


<p>前提知識としては、以下。知っていたほうが理解が早い。</p>

<ul>
<li>unix コマンド</li>
<li>YAML

<ul>
<li><a href="http://blog.n-z.jp/blog/2014-06-21-ansible-yaml.html">ansible使いのためのYAML入門 &ndash; @znz blog</a></li>
</ul>
</li>
</ul>


<p>公式から引用すると、Ansible は <strong>simple IT automation engine</strong>。</p>

<blockquote><p>Ansible is a radically <strong>simple IT automation engine</strong> that automates cloud provisioning, configuration management, application deployment, intra-service orchestration, and many other IT needs.</p>

<p>&mdash;&ndash;    <a href="https://www.ansible.com/how-ansible-works">How Ansible Works</a> より</p></blockquote>

<!-- more -->


<h2>Ansible の概要</h2>

<ul>
<li>Ansible は、サーバの構成管理ツールと言われている。

<ul>
<li>サーバ構成管理とは? Ansible が主に対象としているのは以下。

<ul>
<li>サーバのソフトウェアインストール/アップデート</li>
<li>設定ファイルの作成/修正/削除</li>
<li>サービス停止/起動</li>
<li>ファイル (アプリケーション) の配布</li>
</ul>
</li>
<li>類似ツールに、Chef や Puppet がある。</li>
<li>Infrastructure as Code の流れや世の中のクラウド化に伴い、評価されている</li>
<li>Infrastructure as Code: インフラの状態をコード化できる

<ul>
<li>ソフトウェア開発でのナレッジが活かせる

<ul>
<li>バージョン管理: git, subversion, &hellip;</li>
<li>コードレビュー: pull request, other tools, &hellip;</li>
<li>テスト: test framework like serverspec, infrataster, &hellip;</li>
<li>デプロイ、CI &hellip; : jenkins, &hellip;</li>
</ul>
</li>
<li>設計ドキュメントと実装との差分がある程度埋まる</li>
</ul>
</li>
</ul>
</li>
<li>もともとはAnsible, Inc により開発されていたが、2015年10月に Redhat により買収された</li>
</ul>


<p>以下は、Ansible の動作イメージ。(<a href="https://sysadmincasts.com/episodes/46-configuration-management-with-ansible-part-3-4">https://sysadmincasts.com/episodes/46-configuration-management-with-ansible-part-3-4</a> より引用)</p>

<p><img src="http://momota.github.io/images/20160818_ansible_overview.gif" alt="diagram" /></p>

<h1>Ansible の特徴・利点</h1>

<ul>
<li>冪等性

<ul>
<li>何回やっても同じ結果になること。

<ul>
<li>モジュール側でチェック処理などを吸収してくれる。</li>
<li>shell モジュールや rawモジュールなど、一部、冪等性が担保されないものもある。</li>
</ul>
</li>
<li>単純 re-run が可能。</li>
<li>Immutable Infrastructure との相性の良さ。</li>
</ul>
</li>
<li>Python の &ldquo;バッテリー同梱 (Battery Included)&rdquo; という考え方を引き継いでいる。

<ul>
<li>標準モジュール/機能の豊富さ。</li>
</ul>
</li>
<li>Push 型アーキテクチャ

<ul>
<li>管理対象ノード (Managed Node) に SSH さえできれば良い。</li>
<li>エージェントレス。</li>
<li>マルチプロセスで並列実行が可能。</li>
<li>Ansible 実行サーバを Control Machine, 管理対象ノードを Managed Nodeと呼ぶ。</li>
</ul>
</li>
<li>シンプル

<ul>
<li>独自 DSL ではなく、YAML。

<ul>
<li>データ志向の自動化言語である YAML</li>
<li>学習コストが低い。chef や puppet のように Ruby などの独自 DSL を覚える必要がない。</li>
</ul>
</li>
<li>ファイル・ディレクトリ構造の自由度の高さ。決まり事が少ない。</li>
<li>Ansible 自体は Python で書かれているが、プラグインなどの開発が不要であれば、Python を使う必要なし。</li>
</ul>
</li>
</ul>


<h1>Ansible の用途</h1>

<ul>
<li>複数サーバへの……

<ul>
<li>バッチ処理

<ul>
<li>システム全体の設定 (<code>/etc</code> 以下の設定)

<ul>
<li>hosts へのエントリ</li>
</ul>
</li>
<li>ネットワーク設定

<ul>
<li>ルーティングテーブルエントリの追加</li>
<li>SOCKS プロキシ</li>
<li>proxy.pac</li>
</ul>
</li>
<li>ファイル配布

<ul>
<li>SSHキーの配布</li>
</ul>
</li>
</ul>
</li>
<li>ミドルウェアのインストール/アップデート

<ul>
<li>yum</li>
<li>apt</li>
<li>homebrew</li>
<li>gem</li>
</ul>
</li>
<li>アプリケーションデプロイ</li>
</ul>
</li>
</ul>


<p>公式サイトの Use case を直訳すると、以下。</p>

<blockquote><ul>
<li>provisioning (Bootstrapping と呼ぶほうが正しいかも)

<ul>
<li>ベアメタルサーバやVMに対する、PXEブート (遠隔電源操作), キックスタート (linux の自動インストール)</li>
<li>VM (クラウドインスタンス) に対する、テンプレートからの作成</li>
</ul>
</li>
<li>configuration management

<ul>
<li>コンフィグファイルの中央管理</li>
</ul>
</li>
<li>application deployment

<ul>
<li>Ansible でアプリケーションを定義しデプロイすることで、開発環境から本番環境までのアプリケーション全体のライフサイクルを効果的に管理できる</li>
</ul>
</li>
<li>continuous delivery

<ul>
<li>CI/CD のパイプラインはたくさんのチームから依頼を引き受けることになる。だれもが使えるシンプルなAnsible を使うことで適切にアプリケーションのデプロイ管理ができる</li>
</ul>
</li>
<li>security &amp; compliance

<ul>
<li>Ansible でセキュリティポリシを定義することで、サイト全体のセキュリティポリシのスキャンと修復が可能になる。</li>
</ul>
</li>
<li>orchestration

<ul>
<li>管理対象のコンフィグは多種多様に存在し、かつ、それぞれが相互に作用している。Ansible は、この複雑で混沌とした中に秩序をもたらす。</li>
</ul>
</li>
</ul>
</blockquote>

<p>仕事ではあまり OS を扱うことは少なく、以下のようなレイヤの低いやつを raw モジュールを
駆使して構成変更したり情報取得したりしている。</p>

<ul>
<li>ESXi</li>
<li>iLO</li>
<li>BIOS</li>
<li>その他 SSH 可能なノード</li>
</ul>


<h1>Ansible を動かしてみよう</h1>

<h2>Ansible のインストール</h2>

<p><a href="http://docs.ansible.com/ansible/intro_installation.html#getting-ansible">Installation &ndash; Ansible Documentation</a> を参照</p>

<ol>
<li>Control Machine : Ansible 実行サーバ

<ul>
<li>Python 2.6 or 2.7 が必要</li>
<li>yum や rpm, apt などのパッケージ管理システムでインストール可能</li>
</ul>
</li>
<li>Managed Node : 管理対象ノード

<ul>
<li>Control Machine から SSH できればOK</li>
</ul>
</li>
</ol>


<h2>Ansible 実行してみる</h2>

<p>ansile を単体実行するコマンド書式は以下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>オプション </th>
<th> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f         </td>
<td> 実行多重度。デフォルトは5 (ansible.cfg で規定)</td>
</tr>
<tr>
<td>-m         </td>
<td> モジュール名</td>
</tr>
<tr>
<td>-a         </td>
<td> モジュール引数</td>
</tr>
</tbody>
</table>


<p><a href="http://docs.ansible.com/ansible/modules_by_category.html">モジュールはこちらを参照。</a></p>

<p>以下はローカルで動くモジュールの一部を紹介。</p>

<table>
<thead>
<tr>
<th>モジュール </th>
<th> 機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ping       </td>
<td> その名の通り ping</td>
</tr>
<tr>
<td>shell      </td>
<td> コマンドを引数に渡して shell 実行可能</td>
</tr>
<tr>
<td>file       </td>
<td> ファイルのパーミション設定とか、ディレクトリ作成とか</td>
</tr>
<tr>
<td>template   </td>
<td> Control Machine のテンプレートファイル (テンプレートエンジンは jinja2 ) を Managed Node に配布</td>
</tr>
<tr>
<td>service    </td>
<td> init system のサービスを制御</td>
</tr>
<tr>
<td>sysctrl    </td>
<td> カーネルパラメータの操作</td>
</tr>
<tr>
<td>raw        </td>
<td> ssh でナマの文字列をそのまま流し込む</td>
</tr>
</tbody>
</table>


<p>インターネットに接続していれば、以下も有用。</p>

<table>
<thead>
<tr>
<th>モジュール </th>
<th> 機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>yum        </td>
<td> yum によるソフトウェアパッケージ管理</td>
</tr>
<tr>
<td>get_url    </td>
<td> HTTP でのダウンロード (curl, wget 的な)</td>
</tr>
<tr>
<td>git        </td>
<td> git リポジトリからの clone</td>
</tr>
</tbody>
</table>


<p>バージョンが 2 系からJunos とか Cisco, ESXi 用のモジュールもある。</p>

<p><code>&lt;host-pattern&gt;</code> でホストを指定する。
all とすると、<code>/etc/ansible/hosts</code> で定義しているすべてのホストが対象となる。</p>

<p>以下は <code>ping</code> モジュールを利用したコマンド。
localhost に ping する ansible コマンド。
<code>-m</code> オプションのあとに <code>ping</code> モジュールを指定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible localhost -m ping
</span><span class='line'>localhost | success &gt;&gt; <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;changed&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;ping&quot;</span>: <span class="s2">&quot;pong&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下は、<code>shell</code> モジュールを利用したコマンド。
<code>-a</code> オプションのあとにモジュール引数を渡す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible localhost -m shell -a <span class="s2">&quot;uname -a; date; id; ifconfig&quot;</span>
</span><span class='line'>localhost | success | <span class="nv">rc</span><span class="o">=</span>0 &gt;&gt;
</span><span class='line'>Linux m 3.13.0-32-generic <span class="c">#57-Ubuntu SMP Tue Jul 15 03:51:12 UTC 2014 i686 i686 i686 GNU/Linux</span>
</span><span class='line'>Thu Aug  4 17:37:49 JST 2016
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>momota<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>momota<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>momota<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,33<span class="o">(</span>www-data<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,108<span class="o">(</span>lpadmin<span class="o">)</span>,124<span class="o">(</span>sambashare<span class="o">)</span>
</span><span class='line'>docker0   Link encap:Ethernet  HWaddr 56:84:7a:fe:97:99
</span><span class='line'>          inet addr:172.*.*.*  Bcast:0.0.0.0  Mask:255.255.0.0
</span><span class='line'>          UP BROADCAST MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0
</span><span class='line'>          RX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>  TX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 00:1e:c9:80:66:c6
</span><span class='line'>          inet addr:172.*.*.*  Bcast:172.104.43.255  Mask:255.255.254.0
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:40670341 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:1099217 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000
</span><span class='line'>          RX bytes:4490922632 <span class="o">(</span>4.4 GB<span class="o">)</span>  TX bytes:329019625 <span class="o">(</span>329.0 MB<span class="o">)</span>
</span><span class='line'>          Interrupt:21 Memory:febe0000-fec00000
</span><span class='line'>
</span><span class='line'>lo        Link encap:Local Loopback
</span><span class='line'>          inet addr:127.0.0.1  Mask:255.0.0.0
</span><span class='line'>          UP LOOPBACK RUNNING  MTU:65536  Metric:1
</span><span class='line'>          RX packets:47797 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:47797 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0
</span><span class='line'>          RX bytes:5233688 <span class="o">(</span>5.2 MB<span class="o">)</span>  TX bytes:5233688 <span class="o">(</span>5.2 MB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、実際には <code>ansible</code> コマンドを使うことはめったにない。</p>

<p>複数のノードに対してタスクを実行したり、複雑なタスクを実行する場合は、
Inventory ファイルや Playbook ファイルを利用する。</p>

<p>Ansible の主なファイルは以下。</p>

<ul>
<li>ansible.cfg

<ul>
<li>ansible に関するデフォルト設定ファイル。<code>/etc/ansible/ansible.cfg</code></li>
</ul>
</li>
<li>Inventory

<ul>
<li>ansible で管理対象ノードを定義するファイル</li>
</ul>
</li>
<li>Playbook

<ul>
<li>タスク (実行手順) を定義するファイル</li>
</ul>
</li>
</ul>


<h1>Inventory</h1>

<p>Inventory ファイルは、ansible 用の hosts ファイル。
ホストやグルーピングの設定、変数などの定義が可能。
ホストや IP アドレスはレンジでの指定も可能。</p>

<ul>
<li>ホストとグループの定義</li>
<li>ホスト変数とグループ変数</li>
<li>グループのグループ</li>
</ul>


<p>以下は、デフォルト設定 <code>/etc/ansible/hosts</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c1">#   - Comments begin with the &#39;#&#39; character</span>
</span><span class='line'><span class="c1">#   - Blank lines are ignored</span>
</span><span class='line'><span class="c1">#   - Groups of hosts are delimited by [header] elements</span>
</span><span class='line'><span class="c1">#   - You can enter hostnames or ip addresses</span>
</span><span class='line'><span class="c1">#   - A hostname/ip can be a member of multiple groups</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ex 1: Ungrouped hosts, specify before any group headers.</span>
</span><span class='line'>
</span><span class='line'><span class="err">green.example.com</span>
</span><span class='line'><span class="err">blue.example.com</span>
</span><span class='line'><span class="err">192.168.100.1</span>
</span><span class='line'><span class="err">192.168.100.10</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ex 2: A collection of hosts belonging to the &#39;webservers&#39; group</span>
</span><span class='line'>
</span><span class='line'><span class="k">[webservers]</span>
</span><span class='line'><span class="err">alpha.example.org</span>
</span><span class='line'><span class="err">beta.example.org</span>
</span><span class='line'><span class="err">192.168.1.100</span>
</span><span class='line'><span class="err">192.168.1.110</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If you have multiple hosts following a pattern you can specify</span>
</span><span class='line'><span class="c1"># them like this:</span>
</span><span class='line'>
</span><span class='line'><span class="err">www[001:006].example.com</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ex 3: A collection of database servers in the &#39;dbservers&#39; group</span>
</span><span class='line'>
</span><span class='line'><span class="k">[dbservers]</span>
</span><span class='line'>
</span><span class='line'><span class="err">db01.intranet.mydomain.net</span>
</span><span class='line'><span class="err">db02.intranet.mydomain.net</span>
</span><span class='line'><span class="err">10.25.1.56</span>
</span><span class='line'><span class="err">10.25.1.57</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Here&#39;s another example of host ranges, this time there are no</span>
</span><span class='line'><span class="c1"># leading 0s:</span>
</span><span class='line'>
</span><span class='line'><span class="err">db-[99:101]-node.example.com</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Playbook</h1>

<p>Playbook はタスクをまとめて、1つのファイルに記述したもの。
実行順序や依存関係、変数を利用した処理、ループ処理などが表現できる。</p>

<p>Playbookの基本的なフォーマットは以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;対象とするホスト/グループ&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">var</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;変数名1&gt;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;値&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;変数名2&gt;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;値&gt;</span>
</span><span class='line'>      <span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;処理を実行するユーザー名&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">become</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>   <span class="c1"># sudo するか</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;タスク1&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;タスク2&gt;</span>
</span><span class='line'>      <span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;ハンドラ1&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;ハンドラ2&gt;</span>
</span><span class='line'>      <span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<h2>タスク</h2>

<p>ansible ではホストに対する処理をタスクという単位で管理する。
通常、1つのタスクには1つのモジュールを指定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;タスクの説明&gt;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">&lt;モジュール名&gt;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;実行時に与えるパラメータ&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>name は description なので省略可能だが、メンテナンス性や playbook 実行時にわかりやすいので絶対書いたほうが良い。</p>

<p>name は日本語でも記載可能。 (文字コードは注意)</p>

<h2>ハンドラ</h2>

<p>ハンドラは、特定のタスクの実行後に、予め指定した処理を実行するための仕組み。
以下のように記述する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">be sure httpd is installed</span>
</span><span class='line'>    <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=httpd state=installed</span>
</span><span class='line'>    <span class="l-Scalar-Plain">notify</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">restart httpd</span>
</span><span class='line'><span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">restart httpd</span>
</span><span class='line'>    <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=httpd state=restarted</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、「be sure httpd is installed」というタスクが実行されると、続いて「notify」で指定された「restart httpd」というハンドラが実行される。</p>

<h2>ループ</h2>

<p><code>with_items</code> で列挙した項目に対してループ処理が可能。</p>

<p><a href="http://docs.ansible.com/ansible/playbooks_loops.html">Loops &ndash; Ansible Documentation</a></p>

<p>リモートのコマンド結果 (標準出力)に対して、一行ずつ処理するタスクが以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;リモートのコマンド結果を使ったループの例&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/usr/bin/something</span>
</span><span class='line'>  <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">command_result</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;結果を受け取って何かするタスク&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/usr/bin/something_else --param {{ item }}</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span> <span class="s">&quot;{{</span><span class="nv"> </span><span class="s">command_result.stdout_lines</span><span class="nv"> </span><span class="s">}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで直接リストを書いてもOK。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;リストからパッケージをインストールしていく&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name={{ item }} state=latest</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">httpd</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">zsh</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">tmux</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vim</span>
</span></code></pre></td></tr></table></div></figure>


<h1>playbook のサンプル</h1>

<p>まずはインベントリファイル <code>sample_hosts</code> を作成する</p>

<p>&ldquo;fujiko&rdquo; グループに所属しているホストのリスト (計3台分) を記述している。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[fujiko]</span>
</span><span class='line'><span class="err">doraemon</span>
</span><span class='line'><span class="err">nobita</span>
</span><span class='line'><span class="err">shizuka</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にplaybook ファイル <code>sample_playbook.yml</code> を作成する。</p>

<p>計 3 つのタスクを記述している。</p>

<p><code>register: &lt;変数名1&gt;</code> という書式でタスク実行結果を変数に保存する。 この変数を Registered Variable と呼ぶ。</p>

<p><code>debug: var=&lt;変数名1&gt;/stdout_lines</code> により、変数に保存したタスク実行結果 (の標準出力) を表示している。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">fujiko</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;死活&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">ping</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;ホスト名&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span>    <span class="l-Scalar-Plain">hostname</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">host</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">debug</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">var=host.stdout_lines</span>
</span><span class='line'>      <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">host | success</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&quot;ユーザ名&quot;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span>    <span class="l-Scalar-Plain">whoami</span>
</span><span class='line'>      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">user</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">debug</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">var=user.stdout_lines</span>
</span><span class='line'>      <span class="l-Scalar-Plain">when</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">user | success</span>
</span></code></pre></td></tr></table></div></figure>


<p>playbook の実行前に syntax check (構文の確認)をする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible-playbook -i sample_hosts sample_playbook.yml --syntax-check
</span><span class='line'>
</span><span class='line'>playbook: sample-playbook.yml
</span></code></pre></td></tr></table></div></figure>


<p>次に playbook を dry-run。
実行する前に何が変更されるか、特に、実行時に消えてしまうリソースや入れ替わるリソースを知りたい場合に有効。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible-playbook -i sample_hosts sample_playbook.yml --check
</span><span class='line'>--- snip ---
</span></code></pre></td></tr></table></div></figure>


<p>Playbook を実行する。<code>--step</code> オプションを付けると、タスク単位にステップ実行もできる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible-playbook -i sample_hosts sample_playbook.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>fujiko<span class="o">]</span> ********************************************************************
</span><span class='line'>
</span><span class='line'>GATHERING FACTS ***************************************************************
</span><span class='line'>ok: <span class="o">[</span>doraemon<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>nobita<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>shizuka<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>死活確認<span class="o">]</span> **********************************************************
</span><span class='line'>ok: <span class="o">[</span>nobita<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>doraemon<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>shizuka<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>ホスト名<span class="o">]</span> **********************************************************
</span><span class='line'>changed: <span class="o">[</span>nobita<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>doraemon<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>shizuka<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>debug <span class="nv">var</span><span class="o">=</span>host.stdout_lines<span class="o">]</span> *******************************************
</span><span class='line'>ok: <span class="o">[</span>nobita<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;var&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;host.stdout_lines&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;nobita&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>ok: <span class="o">[</span>doraemon<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;var&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;host.stdout_lines&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;doraemon&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>ok: <span class="o">[</span>shizuka<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;var&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;host.stdout_lines&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;shizuka&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>ユーザ名<span class="o">]</span> **********************************************************
</span><span class='line'>changed: <span class="o">[</span>nobita<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>doraemon<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>shizuka<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>debug <span class="nv">var</span><span class="o">=</span>user.stdout_lines<span class="o">]</span> *******************************************
</span><span class='line'>ok: <span class="o">[</span>nobita<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;var&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;user.stdout_lines&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;momota&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>ok: <span class="o">[</span>doraemon<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;var&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;user.stdout_lines&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;momota&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>ok: <span class="o">[</span>shizuka<span class="o">]</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;var&quot;</span>: <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;user.stdout_lines&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;momota&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>doraemon                   : <span class="nv">ok</span><span class="o">=</span>6    <span class="nv">changed</span><span class="o">=</span>2    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>nobita                     : <span class="nv">ok</span><span class="o">=</span>6    <span class="nv">changed</span><span class="o">=</span>2    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>shizuka                    : <span class="nv">ok</span><span class="o">=</span>6    <span class="nv">changed</span><span class="o">=</span>2    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>playbook は role という単位で分割可能。再利用性が高くなり、1 つ 1 つの playbook の
見通しも良くなるなるので、相互に関係のないタスクは分離していくほうが望ましい。</p>

<p>大規模な環境用に、<a href="http://docs.ansible.com/ansible/playbooks_best_practices.html">Best practices</a> が示されているので、ご参考に。</p>

<h1>システム情報を利用する: Facts</h1>

<p>Playbook 実行結果に「GATHERING FACTS」と出力されている。
これは対象サーバから情報を収集する処理。たとえば、リモートサーバのIPアドレスや
OS名などのシステム情報を、Playbook 中で変数として扱うことができる。</p>

<p>次のように <code>setup</code> モジュールにより、どんな変数が利用可能かを確認することができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">ansible</span> <span class="err">some-host</span> <span class="err">-m</span> <span class="err">setup</span>
</span><span class='line'><span class="s2">&quot;ansible_all_ipv4_addresses&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;REDACTED IP ADDRESS&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_all_ipv6_addresses&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;REDACTED IPV6 ADDRESS&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_architecture&quot;</span><span class="err">:</span> <span class="s2">&quot;x86_64&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_bios_date&quot;</span><span class="err">:</span> <span class="s2">&quot;09/20/2012&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_bios_version&quot;</span><span class="err">:</span> <span class="s2">&quot;6.00&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_cmdline&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;BOOT_IMAGE&quot;</span><span class="p">:</span> <span class="s2">&quot;/boot/vmlinuz-3.5.0-23-generic&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;quiet&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ro&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;root&quot;</span><span class="p">:</span> <span class="s2">&quot;UUID=4195bff4-e157-4e41-8701-e93f0aec9e22&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;splash&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_date_time&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;date&quot;</span><span class="p">:</span> <span class="s2">&quot;2013-10-02&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;day&quot;</span><span class="p">:</span> <span class="s2">&quot;02&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;epoch&quot;</span><span class="p">:</span> <span class="s2">&quot;1380756810&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;hour&quot;</span><span class="p">:</span> <span class="s2">&quot;19&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;iso8601&quot;</span><span class="p">:</span> <span class="s2">&quot;2013-10-02T23:33:30Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;iso8601_micro&quot;</span><span class="p">:</span> <span class="s2">&quot;2013-10-02T23:33:30.036070Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;minute&quot;</span><span class="p">:</span> <span class="s2">&quot;33&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;month&quot;</span><span class="p">:</span> <span class="s2">&quot;10&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;second&quot;</span><span class="p">:</span> <span class="s2">&quot;30&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;time&quot;</span><span class="p">:</span> <span class="s2">&quot;19:33:30&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;tz&quot;</span><span class="p">:</span> <span class="s2">&quot;EDT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;year&quot;</span><span class="p">:</span> <span class="s2">&quot;2013&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_default_ipv4&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;alias&quot;</span><span class="p">:</span> <span class="s2">&quot;eth0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;gateway&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;interface&quot;</span><span class="p">:</span> <span class="s2">&quot;eth0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;macaddress&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mtu&quot;</span><span class="p">:</span> <span class="mi">1500</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;netmask&quot;</span><span class="p">:</span> <span class="s2">&quot;255.255.255.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;network&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;ether&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_default_ipv6&quot;</span><span class="err">:</span> <span class="p">{}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_devices&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;fd0&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;holders&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nt">&quot;host&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;model&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;partitions&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nt">&quot;removable&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;rotational&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;scheduler_mode&quot;</span><span class="p">:</span> <span class="s2">&quot;deadline&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sectors&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sectorsize&quot;</span><span class="p">:</span> <span class="s2">&quot;512&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;0.00 Bytes&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;support_discard&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;vendor&quot;</span><span class="p">:</span> <span class="kc">null</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;sda&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;holders&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nt">&quot;host&quot;</span><span class="p">:</span> <span class="s2">&quot;SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;VMware Virtual S&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;partitions&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;sda1&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;sectors&quot;</span><span class="p">:</span> <span class="s2">&quot;39843840&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;sectorsize&quot;</span><span class="p">:</span> <span class="mi">512</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;19.00 GB&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;2048&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;sda2&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;sectors&quot;</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;sectorsize&quot;</span><span class="p">:</span> <span class="mi">512</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;1.00 KB&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;39847934&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;sda5&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;sectors&quot;</span><span class="p">:</span> <span class="s2">&quot;2093056&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;sectorsize&quot;</span><span class="p">:</span> <span class="mi">512</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;1022.00 MB&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;39847936&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;removable&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;rotational&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;scheduler_mode&quot;</span><span class="p">:</span> <span class="s2">&quot;deadline&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sectors&quot;</span><span class="p">:</span> <span class="s2">&quot;41943040&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sectorsize&quot;</span><span class="p">:</span> <span class="s2">&quot;512&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;20.00 GB&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;support_discard&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;vendor&quot;</span><span class="p">:</span> <span class="s2">&quot;VMware,&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;sr0&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;holders&quot;</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nt">&quot;host&quot;</span><span class="p">:</span> <span class="s2">&quot;IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;model&quot;</span><span class="p">:</span> <span class="s2">&quot;VMware IDE CDR10&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;partitions&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nt">&quot;removable&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;rotational&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;scheduler_mode&quot;</span><span class="p">:</span> <span class="s2">&quot;deadline&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sectors&quot;</span><span class="p">:</span> <span class="s2">&quot;2097151&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sectorsize&quot;</span><span class="p">:</span> <span class="s2">&quot;512&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="s2">&quot;1024.00 MB&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;support_discard&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;vendor&quot;</span><span class="p">:</span> <span class="s2">&quot;NECVMWar&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_distribution&quot;</span><span class="err">:</span> <span class="s2">&quot;Ubuntu&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_distribution_release&quot;</span><span class="err">:</span> <span class="s2">&quot;precise&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_distribution_version&quot;</span><span class="err">:</span> <span class="s2">&quot;12.04&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_domain&quot;</span><span class="err">:</span> <span class="s2">&quot;&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_env&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;COLORTERM&quot;</span><span class="p">:</span> <span class="s2">&quot;gnome-terminal&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;DISPLAY&quot;</span><span class="p">:</span> <span class="s2">&quot;:0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;HOME&quot;</span><span class="p">:</span> <span class="s2">&quot;/home/mdehaan&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;LANG&quot;</span><span class="p">:</span> <span class="s2">&quot;C&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;LESSCLOSE&quot;</span><span class="p">:</span> <span class="s2">&quot;/usr/bin/lesspipe %s %s&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;LESSOPEN&quot;</span><span class="p">:</span> <span class="s2">&quot;| /usr/bin/lesspipe %s&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;LOGNAME&quot;</span><span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;LS_COLORS&quot;</span><span class="p">:</span> <span class="s2">&quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;MAIL&quot;</span><span class="p">:</span> <span class="s2">&quot;/var/mail/root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;OLDPWD&quot;</span><span class="p">:</span> <span class="s2">&quot;/root/ansible/docsite&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;PATH&quot;</span><span class="p">:</span> <span class="s2">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;PWD&quot;</span><span class="p">:</span> <span class="s2">&quot;/root/ansible&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;SHELL&quot;</span><span class="p">:</span> <span class="s2">&quot;/bin/bash&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;SHLVL&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;SUDO_COMMAND&quot;</span><span class="p">:</span> <span class="s2">&quot;/bin/bash&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;SUDO_GID&quot;</span><span class="p">:</span> <span class="s2">&quot;1000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;SUDO_UID&quot;</span><span class="p">:</span> <span class="s2">&quot;1000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;SUDO_USER&quot;</span><span class="p">:</span> <span class="s2">&quot;mdehaan&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;TERM&quot;</span><span class="p">:</span> <span class="s2">&quot;xterm&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;USER&quot;</span><span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;USERNAME&quot;</span><span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;XAUTHORITY&quot;</span><span class="p">:</span> <span class="s2">&quot;/home/mdehaan/.Xauthority&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;_&quot;</span><span class="p">:</span> <span class="s2">&quot;/usr/local/bin/ansible&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_eth0&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;active&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;device&quot;</span><span class="p">:</span> <span class="s2">&quot;eth0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ipv4&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;netmask&quot;</span><span class="p">:</span> <span class="s2">&quot;255.255.255.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;network&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;ipv6&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;prefix&quot;</span><span class="p">:</span> <span class="s2">&quot;64&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;scope&quot;</span><span class="p">:</span> <span class="s2">&quot;link&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;macaddress&quot;</span><span class="p">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;module&quot;</span><span class="p">:</span> <span class="s2">&quot;e1000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mtu&quot;</span><span class="p">:</span> <span class="mi">1500</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;ether&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_form_factor&quot;</span><span class="err">:</span> <span class="s2">&quot;Other&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_fqdn&quot;</span><span class="err">:</span> <span class="s2">&quot;ubuntu2.example.com&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_hostname&quot;</span><span class="err">:</span> <span class="s2">&quot;ubuntu2&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_interfaces&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;lo&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;eth0&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_kernel&quot;</span><span class="err">:</span> <span class="s2">&quot;3.5.0-23-generic&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_lo&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;active&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;device&quot;</span><span class="p">:</span> <span class="s2">&quot;lo&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ipv4&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;netmask&quot;</span><span class="p">:</span> <span class="s2">&quot;255.0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;network&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.0&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;ipv6&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="s2">&quot;::1&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;prefix&quot;</span><span class="p">:</span> <span class="s2">&quot;128&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;scope&quot;</span><span class="p">:</span> <span class="s2">&quot;host&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;mtu&quot;</span><span class="p">:</span> <span class="mi">16436</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;loopback&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_lsb&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;codename&quot;</span><span class="p">:</span> <span class="s2">&quot;precise&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Ubuntu 12.04.2 LTS&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;Ubuntu&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;major_release&quot;</span><span class="p">:</span> <span class="s2">&quot;12&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;release&quot;</span><span class="p">:</span> <span class="s2">&quot;12.04&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_machine&quot;</span><span class="err">:</span> <span class="s2">&quot;x86_64&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_memfree_mb&quot;</span><span class="err">:</span> <span class="mi">74</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_memtotal_mb&quot;</span><span class="err">:</span> <span class="mi">991</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_mounts&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;device&quot;</span><span class="p">:</span> <span class="s2">&quot;/dev/sda1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;fstype&quot;</span><span class="p">:</span> <span class="s2">&quot;ext4&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;mount&quot;</span><span class="p">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;options&quot;</span><span class="p">:</span> <span class="s2">&quot;rw,errors=remount-ro&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;size_available&quot;</span><span class="p">:</span> <span class="mi">15032406016</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;size_total&quot;</span><span class="p">:</span> <span class="mi">20079898624</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_nodename&quot;</span><span class="err">:</span> <span class="s2">&quot;ubuntu2.example.com&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_os_family&quot;</span><span class="err">:</span> <span class="s2">&quot;Debian&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_pkg_mgr&quot;</span><span class="err">:</span> <span class="s2">&quot;apt&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_processor&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_processor_cores&quot;</span><span class="err">:</span> <span class="mi">1</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_processor_count&quot;</span><span class="err">:</span> <span class="mi">1</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_processor_threads_per_core&quot;</span><span class="err">:</span> <span class="mi">1</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_processor_vcpus&quot;</span><span class="err">:</span> <span class="mi">1</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_product_name&quot;</span><span class="err">:</span> <span class="s2">&quot;VMware Virtual Platform&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_product_serial&quot;</span><span class="err">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_product_uuid&quot;</span><span class="err">:</span> <span class="s2">&quot;REDACTED&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_product_version&quot;</span><span class="err">:</span> <span class="s2">&quot;None&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_python_version&quot;</span><span class="err">:</span> <span class="s2">&quot;2.7.3&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_selinux&quot;</span><span class="err">:</span> <span class="kc">false</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_ssh_host_key_dsa_public&quot;</span><span class="err">:</span> <span class="s2">&quot;REDACTED KEY VALUE&quot;</span>
</span><span class='line'><span class="s2">&quot;ansible_ssh_host_key_ecdsa_public&quot;</span><span class="err">:</span> <span class="s2">&quot;REDACTED KEY VALUE&quot;</span>
</span><span class='line'><span class="s2">&quot;ansible_ssh_host_key_rsa_public&quot;</span><span class="err">:</span> <span class="s2">&quot;REDACTED KEY VALUE&quot;</span>
</span><span class='line'><span class="s2">&quot;ansible_swapfree_mb&quot;</span><span class="err">:</span> <span class="mi">665</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_swaptotal_mb&quot;</span><span class="err">:</span> <span class="mi">1021</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_system&quot;</span><span class="err">:</span> <span class="s2">&quot;Linux&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_system_vendor&quot;</span><span class="err">:</span> <span class="s2">&quot;VMware, Inc.&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_user_id&quot;</span><span class="err">:</span> <span class="s2">&quot;root&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_userspace_architecture&quot;</span><span class="err">:</span> <span class="s2">&quot;x86_64&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_userspace_bits&quot;</span><span class="err">:</span> <span class="s2">&quot;64&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_virtualization_role&quot;</span><span class="err">:</span> <span class="s2">&quot;guest&quot;</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;ansible_virtualization_type&quot;</span><span class="err">:</span> <span class="s2">&quot;VMware&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>たとえば、IPアドレスは <code>{{ ansible_eth0["ipv4"]["address"] }}</code> のように、Playbook の中で変数として
扱うことができる。</p>

<p>その他、<code>facter</code> や <code>ohai</code> がリモートホストにインストールされていればそれらも利用可能。
facts よりも詳細な情報が取得できる。</p>

<p>この facts は、いまのところリモートホストが Linux でのみ動作する。
リモートホストが windows やネットワーク機器の場合は以下のように無効化できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">whatever</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gather_facts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">no</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、システム情報を利用しない場合も無効化することで実行時間短縮が図れる。</p>

<h1>links</h1>

<ul>
<li><a href="http(//yteraoka.github.io/ansible-tutorial/">Ansible Tutorial</a></li>
<li><a href="https(//github.com/yteraoka/ansible-tutorial/wiki/ansible-playbook%20%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89">ansible playbook コマンド オプション</a></li>
<li><a href="https(//www.ansible.com/blog/ansible-performance-tuning">Ansible Performance Tuning (for Fun and Profit)</a></li>
<li><a href="http(//tdoc.info/blog/2014/01/20/ansible_beyond_configuration.html">Ansibleのアーキテクチャー( 構成管理を超えて</a></li>
<li><a href="http(//qiita.com/yteraoka/items/5ed2bddefff32e1b9faf">Ansible オレオレベストプラクティス</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ansible で MacBook Pro をセットアップ]]></title>
    <link href="http://momota.github.io/blog/2016/08/10/ansible-mac/"/>
    <updated>2016-08-10T15:15:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/08/10/ansible-mac</id>
    <content type="html"><![CDATA[<p>MacBook Pro 2700/13.3 MF839J/A を購入したので (わーい) 、構成管理ツール ansible を使ってセットアップした。</p>

<p><img src="http://momota.github.io/images/20160810_macbookpro.jpg" alt="macbook pro" /></p>

<p>t-wada さんのエントリ <a href="http://t-wada.hatenablog.jp/entry/mac-provisioning-by-ansible">Mac の開発環境構築を自動化する (2015 年初旬編) &ndash; t-wadaのブログ変更する</a>
を見れば事足りると思われるので、本稿は自分用のメモ(t-wada さんのを少しだけカスタマイズ &amp; 補足)。</p>

<p>実行環境は以下。</p>

<table>
<thead>
<tr>
<th>what    </th>
<th> version</th>
</tr>
</thead>
<tbody>
<tr>
<td>laptop  </td>
<td> MacBook Pro (Retina 13-inch, Early 2015)</td>
</tr>
<tr>
<td>OS      </td>
<td> OS X El Capitan 10.11.6</td>
</tr>
<tr>
<td>ansible </td>
<td> 2.1.1.0</td>
</tr>
</tbody>
</table>


<!-- more -->


<h1>1. 事前準備</h1>

<h2>1.1. SSH</h2>

<p>ansible では、コントローラ (Control Machine) から SSH 越しで管理対象ノード (Managed Node) を操作する。
今回は Control Machine も Managed Node も同一マシン (Macbook) なので、localhost に SSH できるようにする。</p>

<p>まず SSH の許可設定。
Mac で「システム環境設定」 > 「共有」 > 「リモートログイン」にチェック。</p>

<p>次にパスなしログインするために公開鍵を設定する。
<a href="http://momota.github.io/blog/2016/02/08/ansible/">こちらでも紹介したとおり</a>、以下のようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># no-pass SSH key を生成</span>
</span><span class='line'><span class="nv">$ </span>ssh-keygen -t rsa
</span><span class='line'>
</span><span class='line'><span class="c"># authorized_keysの登録</span>
</span><span class='line'><span class="nv">$ </span>cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class='line'><span class="nv">$ </span>chmod 600 ~/.ssh/authorized_keys
</span><span class='line'>
</span><span class='line'><span class="c"># SSH アクセス確認</span>
</span><span class='line'><span class="nv">$ </span>ssh 127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<h2>1.2. Xcode</h2>

<p>Homebrew をインストールするために必要なので、App Store から XCode をインストールする。
XCode インストール後、ライセンス同意する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo xcode build -license
</span></code></pre></td></tr></table></div></figure>


<p>ライセンス規約みたいな文章がつらつらと出てくるので、最後に「agree」と入力する。</p>

<p>XCode のコマンドラインツールもインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>xcode-select --install
</span></code></pre></td></tr></table></div></figure>


<h2>1.3. Homebrew</h2>

<p>Homebrew は Mac 用のパッケージマネージャ (yum とか apt 的なやつ。
Homebrew って、ホームブリューと読んでいるけどホームブルーのほうが正しい発音ぽい)。</p>

<p><a href="http://brew.sh/index_ja.html">公式サイト</a>の案内に従い、以下のワンライナーで Homebrew をインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>/usr/bin/ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ワンライナーでインストールするとたぶん最新版がインストールされるが、インストール後 <code>brew doctor</code> で古いと出力されたらアップデートする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'><span class="nv">$ </span>brew update
</span></code></pre></td></tr></table></div></figure>


<h2>1.4. Ansible</h2>

<p>Ansible に必要な python はすでに 2.7 系がプリインストールされていたので、
そのまま Homebrew で Ansible をインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew install ansible
</span><span class='line'><span class="nv">$ </span>ansible --version
</span></code></pre></td></tr></table></div></figure>


<h1>2. Ansible Playbook を開発する</h1>

<p>前回の <a href="http://momota.github.io/blog/2016/02/08/ansible/">Ansible でノート PC をセットアップ</a> で作った仕組みにのせる。</p>

<p>t-wada さんの場合、1 枚の Playbook に変数やタスクを記述していたが、ありものは活用したいという思いがあり。</p>

<p>今回は以下のようなアレンジをした。</p>

<ul>
<li>インストールするパッケージを列挙した変数を <code>vars/common.yml</code> に切り出す</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># for MacOSX</span>
</span><span class='line'><span class="l-Scalar-Plain">homebrew_taps</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">homebrew/versions</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">homebrew/binary</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">homebrew/dupes</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">caskroom/cask</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sanemat/font</span>
</span><span class='line'><span class="l-Scalar-Plain">homebrew_packages</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">readline</span> <span class="p-Indicator">}</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">openssl</span> <span class="p-Indicator">}</span>
</span><span class='line'>  <span class="c1"># (略)</span>
</span><span class='line'><span class="l-Scalar-Plain">homebrew_cask_packages</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">iterm2</span> <span class="p-Indicator">}</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">firefox</span> <span class="p-Indicator">}</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">google-chrome</span> <span class="p-Indicator">}</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">google-japanese-ime</span> <span class="p-Indicator">}</span>
</span><span class='line'>  <span class="c1"># (略)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>CentOS などへもインストールするような共通のパッケージは <code>common/</code> 以下の role を利用する

<ul>
<li>今回は tmux とzsh のみ</li>
</ul>
</li>
<li>Mac 固有のタスクは、<code>mac/</code> 以下に切り出す

<ul>
<li>brew (cask も) 用のrole を作る</li>
<li>ricty フォントインストールは個別の処理が多かったため別の role で切り出す</li>
</ul>
</li>
<li>インベントリファイル <code>hosts</code> に mac 用グループ <code>[mac]</code> を作る</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[mac]</span>
</span><span class='line'><span class="err">127.0.0.1</span>
</span></code></pre></td></tr></table></div></figure>


<p>ディレクトリ構造は以下のようになった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">└──</span> <span class="err">laptop-build</span>
</span><span class='line'>    <span class="err">├──</span> <span class="err">centos</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">docker</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="err">files</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">└──</span> <span class="err">yum</span>
</span><span class='line'>    <span class="err">│  </span>     <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">├──</span> <span class="err">common</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">dotfiles</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="err">meta</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">dstat</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">guest_account</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">ruby</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="err">meta</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">tmux</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">vim</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">└──</span> <span class="err">zsh</span>
</span><span class='line'>    <span class="err">│  </span>     <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">├──</span> <span class="err">mac</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">├──</span> <span class="err">brew</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">│  </span> <span class="err">└──</span> <span class="err">ricty</span>
</span><span class='line'>    <span class="err">│  </span>     <span class="err">├──</span> <span class="err">handlers</span>
</span><span class='line'>    <span class="err">│  </span>     <span class="err">└──</span> <span class="err">tasks</span>
</span><span class='line'>    <span class="err">└──</span> <span class="err">vars</span>
</span></code></pre></td></tr></table></div></figure>


<p>できあがった Playbook は Github にあげた。 <a href="https://github.com/momota/laptop-build">momota/laptop-build</a></p>

<h1>3. Ansible を実行する</h1>

<h2>3.1. ansible のログ出力設定</h2>

<p><code>tee</code> とかを使って Playbook の実行出力結果をファイルに保存しようと思ったが、ansible のログ機能を使った。
<code>ansible.cfg</code> に以下を記述。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[defaults]</span>
</span><span class='line'><span class="na">log_path</span><span class="o">=</span><span class="s">/var/log/ansible.log</span>
</span></code></pre></td></tr></table></div></figure>


<p>mac の場合、<code>/etc/ansible/ansible.cfg</code> がなかった (ディレクトリごとない) ので、<code>~/.ansible.cfg</code> を作成した。</p>

<h2>3.2. ansible の実行</h2>

<p>absible-playbook コマンドで実行する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># git clone</span>
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/momota/laptop-build
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>laptop-build
</span><span class='line'>
</span><span class='line'><span class="c"># execute playbook</span>
</span><span class='line'><span class="nv">$ HOMEBREW_CASK_OPTS</span><span class="o">=</span><span class="s2">&quot;--appdir=/Applications&quot;</span> ansible-playbook -i hosts mac/site.yml -vv -K
</span></code></pre></td></tr></table></div></figure>


<p><code>HOMEBREW_CASK_OPTS="--appdir=/Applications"</code> をつけないと、アプリケーションによって <code>/Applications</code> だったり、 <code>~/Applications</code> だったりにシンボリックリンクリンクが作られてしまうとのこと。</p>

<p>ログインシェルを zsh に変更するタスクで <code>sudo</code> するので、<code>-K</code> オプション付き。</p>

<h1>4. Playbook のトラブルフォロー</h1>

<h2>4.1. shell モジュールでcommand not found</h2>

<p>Playbook をコピペして実行したら、shell モジュールで <code>brew</code> を呼んでいるタスクから
<code>command not found</code> エラーが返ってきた。
フルパスで指定し直す。</p>

<h2>4.2. cask パッケージ名の誤り</h2>

<p><code>/vars/common.yml</code> にインストールしたい cask パッケージ名を定義するが、パッケージ名を謝って途中で処理がこけた。
もちろんググっても良いと思うが、事前に以下のコマンドなどで調べるとよさそう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew cask search <span class="o">[</span>探したいパッケージ<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4.3. cask インストールの処理停止</h2>

<p>Homebrew cask でパッケージインストール途中で処理が止まることがあった。(2, 3回)
どんなに待っても止まったままなので、 <code>Ctrl-c</code> で中断する。</p>

<p>ansible-playbook コマンドに <code>-vvv</code> オプションなどを付けるも、原因はよく分からず。
たぶん、ansible ではなく brew 側に原因がありそう。</p>

<p>インストール処理で止まっているパッケージは、ansible で表示されているパッケージの、<code>vars/common.yml</code> での変数定義上の次のパッケージ。
途中で止まっているパッケージもインストール一覧に出力される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew cask list
</span><span class='line'><span class="c">#=&gt; インストール処理中のパッケージも出力される</span>
</span></code></pre></td></tr></table></div></figure>


<p>リストには表示されるものの、中途半端にインストールされていそうなので、
<code>brew</code> コマンドでインストールし直して Playbook を再実行する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>brew cask install --force <span class="o">[</span>途中で止まったパッケージ<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># アンインストールして、再インストールしても良いかも</span>
</span><span class='line'><span class="c">#   $ brew cask uninstall [途中で止まったパッケージ]</span>
</span><span class='line'><span class="c">#   $ brew cask install [途中で止まったパッケージ]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ HOMEBREW_CASK_OPTS</span><span class="o">=</span><span class="s2">&quot;--appdir=/Applications&quot;</span> ansible-playbook -i hosts mac/site.yml -vv -K
</span></code></pre></td></tr></table></div></figure>


<p>なにも考えずに re-run できるのはうれしい。 (これが冪等性のパワーか)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットワークエンジニアのための cisco.vim]]></title>
    <link href="http://momota.github.io/blog/2016/06/24/cisco-dot-vim/"/>
    <updated>2016-06-24T16:42:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/06/24/cisco-dot-vim</id>
    <content type="html"><![CDATA[<p>ネットワークエンジニアのみなさん、こんにちは。</p>

<p><a href="http://momota.github.io/blog/2016/06/22/junos-dot-vim/">ネットワークエンジニアのための junos.vim</a> の cisco バージョンです。</p>

<p>cisco の configuration をカラーリングする vim プラグイン
<a href="https://github.com/momota/cisco.vim">momota/cisco.vim</a> を作ったのでご活用下さい。</p>

<p>対象は、cisco ルータと Catalyst スイッチ、Nexus スイッチです。</p>

<p>色を付けることによって、configuration の解釈を手助けしたり、
configuration 作成時のミスに気づきやすくしたりする効果が期待できます。
(誤ったタームを入力すると色が付かないので)</p>

<p>以下のようにカラーリングします。 (colorscheme は molokai)</p>

<h2>before</h2>

<p><img src="http://momota.github.io/images/20160624_cisco-config_before.png" alt="display_before" /></p>

<h2>after</h2>

<p><img src="http://momota.github.io/images/20160624_cisco-config_after.png" alt="display_after" /></p>

<!-- more -->


<h2>インストール</h2>

<p>NeoBundle で vim プラグインを管理している人は以下の行を<code>.vimrc</code> に追加して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;momota/cisco.vim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:NeoBundleInstall</code> でインストールする。</p>

<p>その他は、<a href="https://github.com/momota/cisco.vim#installation">README/Installation</a> を参照。</p>

<h2>使い方</h2>

<p>cisco config ファイルを <code>.cisco</code> という拡張子で保存して vim で開くか、
cisco config ファイルの先頭に以下行を追加して保存し vim で開くと色付けしてくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">!</span> <span class="k">vim</span>: <span class="k">set</span> <span class="nb">ft</span><span class="p">=</span>cisco:
</span></code></pre></td></tr></table></div></figure>


<p>もしくは、cisco config ファイルを vim 開いている時に <code>:set ft=cisco</code> を実行する。</p>

<h1>関連</h1>

<ul>
<li><a href="http://momota.github.io/blog/2016/06/22/junos-dot-vim/">ネットワークエンジニアのための junos.vim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットワークエンジニアのための junos.vim]]></title>
    <link href="http://momota.github.io/blog/2016/06/22/junos-dot-vim/"/>
    <updated>2016-06-22T10:57:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/06/22/junos-dot-vim</id>
    <content type="html"><![CDATA[<p>ネットワークエンジニアのみなさん、こんにちは。</p>

<p>Juniper の configuration をカラーリングする vim プラグイン
<a href="https://github.com/momota/junos.vim">momota/junos.vim</a> を作ったのでご活用下さい。</p>

<p>対象は、Juniper EX シリーズとSRX シリーズです。</p>

<p>色を付けることによって、junos configuration の解釈を手助けしたり、
configuration 作成時のミスに気づきやすくしたりする効果が期待できます。
(誤ったタームを入力すると色が付かないので)</p>

<p>以下のようにカラーリングします。 (colorscheme は molokai)</p>

<h2>before</h2>

<p><img src="http://momota.github.io/images/20160622_junos-confg_before.png" alt="display_before" /></p>

<h2>after</h2>

<p><img src="http://momota.github.io/images/20160622_junos-confg_after.png" alt="display_after" /></p>

<h2>before: <code>display set</code> モード</h2>

<p><img src="http://momota.github.io/images/20160622_junos-confg-set_before.png" alt="display-set_before" /></p>

<h2>after: <code>display set</code> モード</h2>

<p><img src="http://momota.github.io/images/20160622_junos-confg-set_after.png" alt="display-set_after" /></p>

<p>cisco 版はこちら <a href="http://momota.github.io/blog/2016/06/24/cisco-dot-vim/">ネットワークエンジニアのための cisco.vim</a></p>

<!-- more -->


<h2>インストール</h2>

<p>NeoBundle で vim プラグインを管理している人は以下の行を<code>.vimrc</code> に追加して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;momota/junos.vim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:NeoBundleInstall</code> でインストールする。</p>

<p>その他は、<a href="https://github.com/momota/junos.vim#installation">README/Installation</a> を参照。</p>

<h2>使い方</h2>

<p>juniper config ファイルを <code>.junos</code> という拡張子で保存して vim で開くか、
juniper config ファイルの先頭に以下行を追加して保存し vim で開くと色付けしてくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># vim: set ft=junos:</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしくは、juniper config ファイルを vim 開いている時に <code>:set ft=junos</code> を実行する。</p>

<h1>関連</h1>

<ul>
<li><a href="http://momota.github.io/blog/2016/06/24/cisco-dot-vim/">ネットワークエンジニアのための cisco.vim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuboCop でコーディングスタイルを矯正する]]></title>
    <link href="http://momota.github.io/blog/2016/06/17/rubocop/"/>
    <updated>2016-06-17T17:30:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/06/17/rubocop</id>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/bbatsov/rubocop/master/logo/rubo-logo-horizontal.png" alt="RuboCop Logo" /></p>

<p><a href="http://note103.hateblo.jp/entry/2016/06/13/074744">textlintで日本語テキストの文字校正を試してみた</a> とかで、lint 系の記事を目にしたので
そろそろ導入してみるか、と思い立った。</p>

<p>RuboCop はRuby の静的コードアナライザ。
<a href="https://github.com/bbatsov/rubocop">bbatsov/rubocop</a></p>

<p><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide</a> に沿ったコーディングスタイルに矯正(注意)してくれる。
無駄なスペースが入力されている、とか、無駄な改行が入っている、とか、
この変数1度も使われてないよ?とかクラスの中の行数が多すぎる、とか、
1行の文字数が長すぎる、とか。</p>

<p>大人数で開発していると細かなコーディングスタイルを合わせるだけでも面倒なので
こういうツールによって人間が矯正されると AI 時代に思いを馳せることができて良い感じですね。</p>

<!-- more -->


<h2>RuboCop インストール</h2>

<p>gem でインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install rubocop
</span><span class='line'><span class="nv">$ </span>rubocop -v
</span><span class='line'>0.40.0
</span></code></pre></td></tr></table></div></figure>


<p>実行は<code>rubocop</code> コマンドにチェックしたいスクリプトを渡す。
例えば、以下のような Ruby スクリプトを</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># conding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;date&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleRubocop</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="n">key</span> <span class="p">)</span>
</span><span class='line'>    <span class="vi">@key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hey</span>
</span><span class='line'>    <span class="vi">@key</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="bp">__FILE__</span> <span class="o">==</span> <span class="vg">$0</span>
</span><span class='line'>  <span class="n">hoge</span> <span class="o">=</span> <span class="no">SampleRubocop</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;hoge&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">hoge</span><span class="o">.</span><span class="n">hey</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>RuboCop でチェックすると以下のような感じで注意を受ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rubocop</span> <span class="n">sample_rubocop</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="no">Inspecting</span> <span class="mi">1</span> <span class="n">file</span>
</span><span class='line'><span class="n">C</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Offenses</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">sample_rubocop</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">9</span><span class="p">:</span> <span class="ss">C</span><span class="p">:</span> <span class="no">Prefer</span> <span class="n">single</span><span class="o">-</span><span class="n">quoted</span> <span class="n">strings</span> <span class="k">when</span> <span class="n">you</span> <span class="n">don</span><span class="s1">&#39;t need string interpolation or special symbols.</span>
</span><span class='line'><span class="s1">require &quot;date&quot;</span>
</span><span class='line'><span class="s1">        ^^^^^^</span>
</span><span class='line'><span class="s1">sample_rubocop.rb:4:1: C: Extra blank line detected.</span>
</span><span class='line'><span class="s1">sample_rubocop.rb:5:1: C: Missing top-level class documentation comment.</span>
</span><span class='line'><span class="s1">class SampleRubocop</span>
</span><span class='line'><span class="s1">^^^^^</span>
</span><span class='line'><span class="s1">sample_rubocop.rb:6:18: C: Space inside parentheses detected.</span>
</span><span class='line'><span class="s1">  def initialize( key )</span>
</span><span class='line'><span class="s1">                 ^</span>
</span><span class='line'><span class="s1">sample_rubocop.rb:6:22: C: Space inside parentheses detected.</span>
</span><span class='line'><span class="s1">  def initialize( key )</span>
</span><span class='line'><span class="s1">                     ^</span>
</span><span class='line'><span class="s1">sample_rubocop.rb:15:1: C: Extra blank line detected.</span>
</span><span class='line'><span class="s1">sample_rubocop.rb:16:16: C: Prefer $PROGRAM_NAME over $0.</span>
</span><span class='line'><span class="s1">if __FILE__ == $0</span>
</span><span class='line'><span class="s1">               ^^</span>
</span><span class='line'><span class="s1">sample_rubocop.rb:17:28: C: Prefer single-quoted strings when you don&#39;</span><span class="n">t</span> <span class="n">need</span> <span class="n">string</span> <span class="n">interpolation</span> <span class="ow">or</span> <span class="n">special</span> <span class="n">symbols</span><span class="o">.</span>
</span><span class='line'>  <span class="n">hoge</span> <span class="o">=</span> <span class="no">SampleRubocop</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;hoge&quot;</span><span class="p">)</span>
</span><span class='line'>                           <span class="o">^^^^^^</span>
</span><span class='line'><span class="n">sample_rubocop</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">20</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span> <span class="ss">C</span><span class="p">:</span> <span class="mi">1</span> <span class="n">trailing</span> <span class="n">blank</span> <span class="n">lines</span> <span class="n">detected</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>無駄な改行とかスペースを注意されていますね。修正しましょう。</p>

<p><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide</a> が自分(たち) の
コーディングスタイルに合わない場合は、カスタマイズが可能。
<code>.rubocop.yml</code> を編集する。</p>

<p>いったん、今書いているものを正しいコーディングスタイルとみなした <code>.rubocop.yml</code> を生成するには
<code>--auto-gen-config</code> オプションをつけて rubocop を実行する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/project
</span><span class='line'><span class="nv">$ </span>rubocop --auto-gen-config
</span><span class='line'><span class="c"># =&gt; /path/to/project/.rubocp_todo.yml が出力される</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記コマンドにより、プロジェクトディレクトリ(/path/to/project)配下のコードが解析されて、cop と
呼ばれるルール群が <code>.rubocp_todo.yml</code> というファイルで出力される。
<code>.rubocp_todo.yml</code> の中身は、以下のように cop 単位にそのプロジェクトに沿った設定が入ったものが
出力されている。</p>

<p>以下は、出力された <code>.rubocp_todo.yml</code> の一部を抜粋。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># -- snip --</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Offense count: 113</span>
</span><span class='line'><span class="c1"># Configuration parameters: AllowHeredoc, AllowURI, URISchemes.</span>
</span><span class='line'><span class="c1"># URISchemes: http, https</span>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/LineLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">137</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># -- snip --</span>
</span><span class='line'><span class="c1">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記は、以下を示している。</p>

<ul>
<li>デフォルト 1 行 80 文字までがコーディング規約となっているが最大 137 文字の行がある

<ul>
<li>1 行あたり最大 137 文字まで許容する、という設定</li>
</ul>
</li>
<li>1 行 80 文字以上 (違反: offense) に該当する箇所が 113 件</li>
</ul>


<p><code>.rubocp_todo.yml</code> の修正不可能・修正困難部分のみを残したりチューニングして、<code>.rubocop.yml</code> に
リネームしたら自分たちのコーディングスタイルに沿った現実的なルールを適用できる。</p>

<p>標準のコーディング規約に沿ってコードを修正していく場合は、<code>.rubocop.yml</code> に以下の行を追加するか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">inherit_from</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.rubocop-todo.yml</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>rubocop --config .rubocop_todo.yml</code> を実行して、違反をつぶしていく。</p>

<p>コードの自動修正機能もある。
<code>.rubocop_todo.yml</code> に <code># Cop supports --auto-correct.</code> と記述されている cop については、以下の
コマンドにより自動修正が可能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rubocop -a
</span><span class='line'><span class="c"># $ rubocop --auto-correct でもOK</span>
</span></code></pre></td></tr></table></div></figure>


<h2>vim と RuboCop を連携する</h2>

<p>コーディングしながら RuboCop に注意されたいので、vim と連携する。</p>

<p>vim プラグインの <a href="https://github.com/scrooloose/syntastic">scrooloose/syntastic</a> を入れる。</p>

<p>NeoBundle を使っているので、手持ちの <code>vimrc</code> を以下のように修正し、<code>:NeoBundleInstall</code> してインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+ NeoBundle &#39;scrooloose/syntastic&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="gi">+ &quot; ----------------------------------------------------------------------</span>
</span><span class='line'><span class="gi">+ &quot; syntastic</span>
</span><span class='line'><span class="gi">+ let g:syntastic_mode_map = { &#39;mode&#39;: &#39;active&#39; }</span>
</span><span class='line'><span class="gi">+ let g:syntastic_ruby_checkers = [&#39;rubocop&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>そうすると、<code>:SyntaxCheck</code> を実行するか、保存<code>:w</code> のタイミングで RuboCop が動いてくれる。
以下のように指摘してくれる。</p>

<p><img src="http://momota.github.io/images/syntastic_ss.png" alt="syntastic_ss" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[seleniumノウハウ]]></title>
    <link href="http://momota.github.io/blog/2016/05/28/selenium-know-how/"/>
    <updated>2016-05-28T16:57:00+09:00</updated>
    <id>http://momota.github.io/blog/2016/05/28/selenium-know-how</id>
    <content type="html"><![CDATA[<p><img src="http://momota.github.io/images/selenium.png" alt="selenium" /></p>

<p><a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a> でも書いたが、
selenium が便利すぎて、最近よくスクリプトを書くようになった。</p>

<p>以下のようなノウハウが溜まってきたので、ここらで放出する。</p>

<ul>
<li>ウィンドウサイズのリサイズ</li>
<li>ウィンドウ位置の移動</li>
<li>スクリーンショットの取得</li>
<li>要素セレクタメソッドの使い分け</li>
<li>ドロップダウンリストの選択</li>
<li>マウスオーバ (hover)</li>
<li>フレーム移動</li>
<li>ポップアップダイアログの扱い</li>
<li>コード量を減らすためのモンキーパッチ</li>
<li>よく採るプログラム構造</li>
</ul>


<p>インストール方法などは <a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a>
を参照。</p>

<p>selenium用スクリプト開発のノウハウというべきかコツといういべきかアレな感じだが、結局、
スクレイピングと同様にHTML構造を理解することが必要なのでブラウザ付属の開発ツールが
手離せない。</p>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Tools">Firefox 開発ツール</a></li>
<li><a href="https://developer.chrome.com/devtools">chrome devtools</a></li>
</ul>


<!-- more -->


<p>これ以降のサンプルコードは以下を定義しているものとする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;selenium-webdriver&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ウィンドウサイズのリサイズ</h2>

<p><code>driver.manage.window.resize_to</code>の引数にリサイズするサイズ情報(width, height)を渡す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">width</span>  <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">height</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">resize_to</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>現在のサイズを取得して、相対的にリサイズしたい場合は以下のようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="n">size</span><span class="o">.</span><span class="n">width</span>  <span class="o">+=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">+=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ウィンドウ位置の移動</h2>

<p><code>driver.manage.window.move_to</code>の引数に移動したい場所の座標情報(x, y)を渡す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">move_to</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>現在のウィンドウ位置を取得して、相対的にリサイズしたい場合は以下のようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pos</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">position</span>
</span><span class='line'><span class="n">pos</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">pos</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">pos</span>
</span></code></pre></td></tr></table></div></figure>


<h2>スクリーンショットの取得</h2>

<p>開いているページのスクリーンショットを撮りたい場合は、<code>driver.save_screenshot</code> に保存先のファイル名を指定するだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;https://www.google.co.jp/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">save_screenshot</span><span class="p">(</span><span class="s2">&quot;/path/to/save/screenshot.png&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ページ全体を撮りたいのに、frame 構造が邪魔をして、スクロールしなければ全体が撮れない場合がある。
ちょっと、調べたところ <code>driver.execute_script("some script")</code> で javascript を利用してスクロールをしている人がいたり、
<code>Selenium::WebDriver::Element.location_once_scrolled_into_view</code> を使ってスクロールしている人がいたり。
どちらにしても、コンテンツ表示上の高さを取得して、1スクロール分の長さをデクリメントしていっているような処理。</p>

<p>自分の場合は、めんどくさかったので、上述したリサイズ方法を使ってスクロールがいらないくらいウィンドウサイズを大きくして、
スクリーンショットを撮るという荒業を繰り広げている。</p>

<h2>要素セレクタメソッドの使い分け</h2>

<p>要素セレクタメソッドは <code>find_element</code> と <code>find_elements</code> の2種類。
そのメソッド名の単数形・複数形の通りなのだが、以下のような違いがある</p>

<ul>
<li><code>find_element</code>

<ul>
<li>指定した引数にマッチする最初の要素 (<code>WebDriver::Element</code>) を <strong>1つ</strong> 返す。</li>
<li>マッチする要素がなければ例外 (<code>NoSuchElementError</code>) を投げる。</li>
</ul>
</li>
<li><code>find_elements</code>

<ul>
<li>指定した引数にマッチする要素を詰めた配列 (<code>Array&lt;WebDriver::Element&gt;</code>) を返す。</li>
<li>マッチする要素がなければ、空の配列 (<code>Array</code>) を返す。</li>
</ul>
</li>
</ul>


<p>テーブルの <code>&lt;tr&gt;</code> 要素やリストの <code>&lt;li&gt;</code> 要素に対してイテレーション処理するときには <code>find_elements</code> が便利。
以下は、例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># リストのリンクをクリックしていくイテレーションの例</span>
</span><span class='line'><span class="n">elements</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:css</span><span class="p">,</span> <span class="s2">&quot;#some-list &gt; li&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">elements</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>  <span class="n">link</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">link</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要素セレクタメソッドの引数には、<code>find_element(:how, "what")</code> のように symbol と文字列を渡す。
渡す引数は、<code>find_elements</code> も同じ。</p>

<p>指定できるsymbolの種類は以下。</p>

<table>
<thead>
<tr>
<th>symbol             </th>
<th> 対象</th>
</tr>
</thead>
<tbody>
<tr>
<td>:class             </td>
<td> クラス名 (属性名 class)</td>
</tr>
<tr>
<td>:class_name        </td>
<td> 上記 :class と同じ</td>
</tr>
<tr>
<td>:id                </td>
<td> ID (属性名 id)</td>
</tr>
<tr>
<td>:link_text         </td>
<td> <code>&lt;a&gt;</code> タグのテキスト</td>
</tr>
<tr>
<td>:link              </td>
<td> 上記 :link_text と同じ</td>
</tr>
<tr>
<td>:partial_link_text </td>
<td> <code>&lt;a&gt;</code> タグのテキストの部分文字列</td>
</tr>
<tr>
<td>:name              </td>
<td> name (属性名 name)</td>
</tr>
<tr>
<td>:tag_name          </td>
<td> タグ名</td>
</tr>
<tr>
<td>:xpath             </td>
<td> xpath で指定</td>
</tr>
<tr>
<td>:css               </td>
<td> css セレクタ で指定</td>
</tr>
</tbody>
</table>


<p><a href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Find">参考 Module: Selenium::WebDriver::Find</a></p>

<h2>ドロップダウンリストの選択</h2>

<p>Selenium IDEでRubyコードの出力をしようとすると、ドロップダウンリストの選択をする処理部分がERRORに
なってコメントアウトされることがある。(今のSelenium IDEバージョンでは大丈夫そう)</p>

<p>ドロップダウンリストの選択は以下のように書けばOK。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Support</span><span class="p">:</span><span class="ss">:Select</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">select_by</span><span class="p">(</span><span class="ss">:text</span><span class="p">,</span> <span class="s2">&quot;ほげほげ&quot;</span><span class="p">)</span>  <span class="c1"># 表示テキストで選択</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">select_by</span><span class="p">(</span><span class="ss">:value</span><span class="p">,</span> <span class="s2">&quot;value1&quot;</span><span class="p">)</span>   <span class="c1"># valueの値で選択</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">select_by</span><span class="p">(</span><span class="ss">:index</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>          <span class="c1"># index(0, 1, 2, ...)で選択</span>
</span></code></pre></td></tr></table></div></figure>


<h2>マウスオーバ (hover)</h2>

<p>例えば、ナビゲーションメニューなどが、通常時には折りたたまれていて、メニュー上にマウスオーバした場合に、
子メニューが展開されるようなページがある。
折りたたまれているときに、子メニューHTMLをロードできていないようなページのときは、ユーザ操作と同じように
マウスオーバしてあげる必要がある。</p>

<p>以下のようにマウスオーバしたい要素を指定して、<code>driver.mouse.move_to</code> を呼べば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;menu&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">mouse</span><span class="o">.</span><span class="n">move_to</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>フレーム移動</h2>

<p>frame や iframe 要素を使っているサイトで、そのフレーム内の要素に対して操作したい場合、当該フレームへ切り替える操作が必要となる。</p>

<p>以下のようにスイッチしたいフレーム要素を指定して、<code>driver.switch_to.frame</code> を呼べば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;frame&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">switch_to</span><span class="o">.</span><span class="n">frame</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>フレームを移動してから、いったん最上位のフレームにに戻りたい場合は、以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">switch_to</span><span class="o">.</span><span class="n">window</span><span class="p">(</span><span class="n">driver</span><span class="o">.</span><span class="n">window_handle</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;top-frame&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">driver</span><span class="o">.</span><span class="n">switch_to</span><span class="o">.</span><span class="n">frame</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ポップアップダイアログの扱い</h2>

<p>「マジでこのページから移動する?」的なjavascriptによるポップアップダイアログを表示するページがある。
このポップアップダイアログを強制的に閉じるには以下のようにする。</p>

<p><code>.accept</code> ではい、<code>.dismiss</code>でいいえを押して閉じる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">alert_box</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">switch_to</span><span class="o">.</span><span class="n">alert</span>
</span><span class='line'>  <span class="n">alert_box</span><span class="o">.</span><span class="n">accept</span>     <span class="c1"># 「はい」「OK」ボタンクリック</span>
</span><span class='line'>  <span class="c1"># alert_box.dismiss  # 「いいえ」「cancel」ボタンクリック</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Error</span><span class="p">:</span><span class="ss">:NoSuchAlertError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># ダイアログがポップアップしない場合、例外を投げるので、何もせずにスルー</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コード量を減らすためのモンキーパッチ</h2>

<p>たとえば、ログインなどの処理の際、フォームへ文字列を送る <code>send_keys</code> 前にいつも <code>.clear</code> しているので
もう <code>send_keys</code> の中に <code>.clear</code> 処理を入れ込んでしまえと思った。</p>

<p>また、<code>input</code> タグの値を取得するときは、<code>.attribute("value")</code> と長ったらしく書く必要があるので <code>.value</code>メソッドを
定義してしまおうと思った。checkbox のチェック有無も同じく。</p>

<p>そこで、<code>Selenium::WebDriver::Element</code> を拡張するため、以下のようなモンキーパッチを書く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ElementExtension</span>
</span><span class='line'>  <span class="n">refine</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="no">Element</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send_keys</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>      <span class="n">clear</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">value</span>
</span><span class='line'>      <span class="n">attribute</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">checked?</span>
</span><span class='line'>      <span class="n">attribute</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">url</span>
</span><span class='line'>      <span class="n">attribute</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">using</span> <span class="no">ElementExtension</span>
</span></code></pre></td></tr></table></div></figure>


<p>そうすると以下のようにコード量を減らせる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'># たとえば、ログイン処理
</span><span class='line'>user     = &quot;USER&quot;
</span><span class='line'>password = &quot;PASSWORD&quot;
</span><span class='line'>
</span><span class='line'><span class="gd">- driver.find_element(:id, &quot;loginuser&quot;).clear</span>
</span><span class='line'>driver.find_element(:id, &quot;loginuser&quot;).send_keys(user)
</span><span class='line'><span class="gd">- driver.find_element(:id, &quot;loginpass&quot;).clear</span>
</span><span class='line'>driver.find_element(:id, &quot;loginpass&quot;).send_keys(password)
</span><span class='line'>driver.find_element(:id, &quot;submit&quot;).click
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># &lt;input&gt;の値を取得する処理
</span><span class='line'><span class="gd">- hostname = driver.find_element(:id, &quot;hostname&quot;).attribute(&quot;value&quot;)</span>
</span><span class='line'><span class="gi">+ hostname = driver.find_element(:id, &quot;hostname&quot;).value</span>
</span><span class='line'>
</span><span class='line'># チェックボックスがチェックされているかどうか
</span><span class='line'>checkbox = driver.find_element(:id, &quot;some-checkbox&quot;)
</span><span class='line'><span class="gd">- do_something if checkbox.attribute(&quot;checked&quot;).nil?</span>
</span><span class='line'><span class="gi">+ do_something if checkbox.checked?</span>
</span><span class='line'>
</span><span class='line'># URLの取得
</span><span class='line'><span class="gd">- url = driver.find_element(:tag_namem &quot;a&quot;).attribute(&quot;href&quot;)</span>
</span><span class='line'><span class="gi">+ url = driver.find_element(:tag_namem &quot;a&quot;).url</span>
</span></code></pre></td></tr></table></div></figure>


<p>モンキーパッチの書き方は以下を参考にした。</p>

<ul>
<li><a href="http://melborne.github.io/2013/08/30/monkey-patching-for-prudent-rubyists/">分別のあるRubyモンキーパッチャーになるために</a></li>
</ul>


<h2>よく採るプログラム構造</h2>

<p>よく採るプログラム構造は以下。</p>

<ul>
<li>操作ターゲットとなるサイト単位にクラスを作る</li>
<li>処理の内容にしたがって、メソッドを作る。以下の様な粒度。

<ul>
<li>サインイン</li>
<li>リスト表示</li>
<li>自動入力と申請</li>
</ul>
</li>
<li>アカウント情報や入力データはYAMLファイルなどに書き出しておく</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># conding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;selenium-webdriver&quot;</span>
</span><span class='line'><span class="c1"># その他必要に応じてrequire</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Selenium::WebDriver::Element の拡張</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Elementextension</span>
</span><span class='line'>  <span class="c1"># 上記モンキーパッチの章を参照</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">using</span> <span class="no">Elementextension</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># 本体</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeSite</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="c1"># 初期化処理</span>
</span><span class='line'>    <span class="c1"># 定数をセットしたり、webdriverを生成してアクセスしたり。</span>
</span><span class='line'>    <span class="vi">@ss_dir</span>  <span class="o">=</span> <span class="s2">&quot;./screenshot/&quot;</span>
</span><span class='line'>    <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="vi">@ss_dir</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@driver</span>  <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span>
</span><span class='line'>    <span class="n">base_url</span> <span class="o">=</span> <span class="s2">&quot;http://somesite.com&quot;</span>
</span><span class='line'>    <span class="vi">@driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">base_url</span> <span class="o">+</span> <span class="s2">&quot;/index.html&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># サインイン処理</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_something</span>
</span><span class='line'>    <span class="c1"># やりたいことを書く</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">close</span>
</span><span class='line'>    <span class="c1"># 終了時に実行する処理を書く</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="c1"># privat method を定義する</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_screenshot</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="n">now</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y%m%d%H%M%S&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@driver</span><span class="o">.</span><span class="n">save_screenshot</span><span class="p">(</span><span class="vi">@ss_dir</span> <span class="o">+</span> <span class="s2">&quot;_&quot;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s2">&quot;_&quot;</span> <span class="o">+</span> <span class="n">now</span> <span class="o">+</span> <span class="s2">&quot;.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># ----------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># main</span>
</span><span class='line'><span class="c1"># ----------------------------------------------------------------------</span>
</span><span class='line'><span class="k">if</span> <span class="bp">__FILE__</span> <span class="o">==</span> <span class="vg">$0</span>
</span><span class='line'>  <span class="c1"># サインインに必要なアカウント情報はYAMLなどに書いておいて、それを読む</span>
</span><span class='line'>  <span class="n">y</span>        <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s2">&quot;/path/to/yaml.yml&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user</span>     <span class="o">=</span>  <span class="n">y</span><span class="o">[</span><span class="s2">&quot;account&quot;</span><span class="o">][</span><span class="s2">&quot;user&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">password</span> <span class="o">=</span>  <span class="n">y</span><span class="o">[</span><span class="s2">&quot;account&quot;</span><span class="o">][</span><span class="s2">&quot;password&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hoge</span> <span class="o">=</span> <span class="no">SomeSite</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">hoge</span><span class="o">.</span><span class="n">sign_in</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hoge</span><span class="o">.</span><span class="n">do_something</span>
</span><span class='line'>  <span class="n">hoge</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>関連</h2>

<ul>
<li><a href="http://momota.github.io/blog/2016/02/26/selenium/">ブラウザ操作の自動化: Selenium と Ruby</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
